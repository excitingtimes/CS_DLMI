{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "accelerator": "GPU",
    "colab": {
      "name": "Model_XGBOOST.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "toc_visible": true,
      "machine_shape": "hm"
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "widgets": {
      "application/vnd.jupyter.widget-state+json": {
        "cb6161c68f9743ab9390cf1a86549765": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "state": {
            "_view_name": "HBoxView",
            "_dom_classes": [],
            "_model_name": "HBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_1c0bd0e8ee334efa81656c456381d257",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_d4aa57a608fb43768c73f1059be98dcd",
              "IPY_MODEL_8e4c877289de46e59e2e3ef50cc0310e"
            ]
          }
        },
        "1c0bd0e8ee334efa81656c456381d257": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "d4aa57a608fb43768c73f1059be98dcd": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_4edabdbd76284ced81b7809bb45039b2",
            "_dom_classes": [],
            "description": "100%",
            "_model_name": "FloatProgressModel",
            "bar_style": "success",
            "max": 122,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 122,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_e535baf4f7ff43148c51d6b22dbda2b3"
          }
        },
        "8e4c877289de46e59e2e3ef50cc0310e": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "state": {
            "_view_name": "HTMLView",
            "style": "IPY_MODEL_c82d370fafb74795adb39ced7fbc1b51",
            "_dom_classes": [],
            "description": "",
            "_model_name": "HTMLModel",
            "placeholder": "​",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": " 122/122 [01:05&lt;00:00,  1.88it/s]",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_91be7719f0fc4ecca636ef957665aaf2"
          }
        },
        "4edabdbd76284ced81b7809bb45039b2": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "initial",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "e535baf4f7ff43148c51d6b22dbda2b3": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "c82d370fafb74795adb39ced7fbc1b51": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "91be7719f0fc4ecca636ef957665aaf2": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "edc189ca7d4f409bbe212b6a3fa92312": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "state": {
            "_view_name": "HBoxView",
            "_dom_classes": [],
            "_model_name": "HBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_95fc55f9fea24d0ea6299bfe7934b7d4",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_a162454109cb4d209492b1a1fd109721",
              "IPY_MODEL_d5ad135a77d44ef08772925f316ab35e"
            ]
          }
        },
        "95fc55f9fea24d0ea6299bfe7934b7d4": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "a162454109cb4d209492b1a1fd109721": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_69bf4fb9e4ca44e2988ea071855164d0",
            "_dom_classes": [],
            "description": "100%",
            "_model_name": "FloatProgressModel",
            "bar_style": "success",
            "max": 122,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 122,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_71dbd6a75f9649d79b8d0590eec7ac01"
          }
        },
        "d5ad135a77d44ef08772925f316ab35e": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "state": {
            "_view_name": "HTMLView",
            "style": "IPY_MODEL_a11dc177e1b148ad9ddd75468188479e",
            "_dom_classes": [],
            "description": "",
            "_model_name": "HTMLModel",
            "placeholder": "​",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": " 122/122 [02:12&lt;00:00,  1.09s/it]",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_0dec0e0c20af405e94d693e8a8f3b567"
          }
        },
        "69bf4fb9e4ca44e2988ea071855164d0": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "initial",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "71dbd6a75f9649d79b8d0590eec7ac01": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "a11dc177e1b148ad9ddd75468188479e": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "0dec0e0c20af405e94d693e8a8f3b567": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "a4c5c722094a422280b2843b02aeafd7": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "state": {
            "_view_name": "HBoxView",
            "_dom_classes": [],
            "_model_name": "HBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_de3209de690146b7b3b6db7de2c76974",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_8b3eced0c7224032915aedf6a9f19272",
              "IPY_MODEL_17d3555066164d7b92b8f195f79ac435"
            ]
          }
        },
        "de3209de690146b7b3b6db7de2c76974": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "8b3eced0c7224032915aedf6a9f19272": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_8813eb2f7c8e4ba68ad1d99c888bbf48",
            "_dom_classes": [],
            "description": "100%",
            "_model_name": "FloatProgressModel",
            "bar_style": "success",
            "max": 122,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 122,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_e744f5e3c8a043718799d928b8b3a04b"
          }
        },
        "17d3555066164d7b92b8f195f79ac435": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "state": {
            "_view_name": "HTMLView",
            "style": "IPY_MODEL_0eb87a91b7214823aeeef02e3f666f28",
            "_dom_classes": [],
            "description": "",
            "_model_name": "HTMLModel",
            "placeholder": "​",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": " 122/122 [01:06&lt;00:00,  1.84it/s]",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_9073c2ad1e1b4f918ca144ba844178bb"
          }
        },
        "8813eb2f7c8e4ba68ad1d99c888bbf48": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "initial",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "e744f5e3c8a043718799d928b8b3a04b": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "0eb87a91b7214823aeeef02e3f666f28": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "9073c2ad1e1b4f918ca144ba844178bb": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "dbbd84dbf6694d149d531449f0e2d2ac": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "state": {
            "_view_name": "HBoxView",
            "_dom_classes": [],
            "_model_name": "HBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_5174e8794676466e831b00652a9e088a",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_46970ca418664243a13232dda7c10115",
              "IPY_MODEL_687f4fb11a0f4c98aaa85c4de383cd9b"
            ]
          }
        },
        "5174e8794676466e831b00652a9e088a": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "46970ca418664243a13232dda7c10115": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_76573da9c7434d47a4aa5f8768aab0e0",
            "_dom_classes": [],
            "description": "100%",
            "_model_name": "FloatProgressModel",
            "bar_style": "success",
            "max": 122,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 122,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_778991979f94473c8121ff8a849abdfb"
          }
        },
        "687f4fb11a0f4c98aaa85c4de383cd9b": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "state": {
            "_view_name": "HTMLView",
            "style": "IPY_MODEL_d0a17e169c23424b9d7ca92a6610e126",
            "_dom_classes": [],
            "description": "",
            "_model_name": "HTMLModel",
            "placeholder": "​",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": " 122/122 [02:11&lt;00:00,  1.07s/it]",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_2352cec302f449549594ad7497de7646"
          }
        },
        "76573da9c7434d47a4aa5f8768aab0e0": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "initial",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "778991979f94473c8121ff8a849abdfb": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "d0a17e169c23424b9d7ca92a6610e126": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "2352cec302f449549594ad7497de7646": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "06533e27da1b454e81e1092510aeac05": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "state": {
            "_view_name": "HBoxView",
            "_dom_classes": [],
            "_model_name": "HBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_98389a39a4934170bd346a58c6b8525e",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_0c3afa316b504bd29755c4395dde92a9",
              "IPY_MODEL_ada9208e6bbc4a98a6776db68d559bf1"
            ]
          }
        },
        "98389a39a4934170bd346a58c6b8525e": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "0c3afa316b504bd29755c4395dde92a9": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_0c63e2a67c444d998fdd528b75dc8e63",
            "_dom_classes": [],
            "description": "100%",
            "_model_name": "FloatProgressModel",
            "bar_style": "success",
            "max": 122,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 122,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_933295f4100e45e5bc705201f40caea6"
          }
        },
        "ada9208e6bbc4a98a6776db68d559bf1": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "state": {
            "_view_name": "HTMLView",
            "style": "IPY_MODEL_9fad3f94dbae431ba5770c6c72c6f43e",
            "_dom_classes": [],
            "description": "",
            "_model_name": "HTMLModel",
            "placeholder": "​",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": " 122/122 [01:05&lt;00:00,  1.87it/s]",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_03b51fc2ff494a5aa7ecacbf5e6c028a"
          }
        },
        "0c63e2a67c444d998fdd528b75dc8e63": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "initial",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "933295f4100e45e5bc705201f40caea6": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "9fad3f94dbae431ba5770c6c72c6f43e": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "03b51fc2ff494a5aa7ecacbf5e6c028a": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "130a9ff17c1549938d364b31da0c3c68": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "state": {
            "_view_name": "HBoxView",
            "_dom_classes": [],
            "_model_name": "HBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_dbc9c1eee8974da292206970d296bced",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_82ac190a21634915ba0565edc5098e53",
              "IPY_MODEL_a1f46feb033c472f88baa5ba2321fb72"
            ]
          }
        },
        "dbc9c1eee8974da292206970d296bced": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "82ac190a21634915ba0565edc5098e53": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_d319802f469d4fd093b957917d77ff89",
            "_dom_classes": [],
            "description": "100%",
            "_model_name": "FloatProgressModel",
            "bar_style": "success",
            "max": 122,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 122,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_7b2987442e4d4bc5abeef90a0ec8f4d1"
          }
        },
        "a1f46feb033c472f88baa5ba2321fb72": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "state": {
            "_view_name": "HTMLView",
            "style": "IPY_MODEL_24ce79fb58ed406aa940d88d8a7df0ca",
            "_dom_classes": [],
            "description": "",
            "_model_name": "HTMLModel",
            "placeholder": "​",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": " 122/122 [04:22&lt;00:00,  2.15s/it]",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_583e798a46a744609ea9ad4d06a6c92c"
          }
        },
        "d319802f469d4fd093b957917d77ff89": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "initial",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "7b2987442e4d4bc5abeef90a0ec8f4d1": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "24ce79fb58ed406aa940d88d8a7df0ca": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "583e798a46a744609ea9ad4d06a6c92c": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "9414dd59a8fa4a7394e50df0e81d14c8": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "state": {
            "_view_name": "HBoxView",
            "_dom_classes": [],
            "_model_name": "HBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_8d98490525634ad4afac3ddaa2be2dde",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_69703346c9204f18b34ee44fa31414b5",
              "IPY_MODEL_a99d5b280b904aea9be5f1c06c14deee"
            ]
          }
        },
        "8d98490525634ad4afac3ddaa2be2dde": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "69703346c9204f18b34ee44fa31414b5": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_021fa09fd1eb43b9a1f5074c68a72d4d",
            "_dom_classes": [],
            "description": "100%",
            "_model_name": "FloatProgressModel",
            "bar_style": "success",
            "max": 122,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 122,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_94755fc72e324be9a82ece957454f9ca"
          }
        },
        "a99d5b280b904aea9be5f1c06c14deee": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "state": {
            "_view_name": "HTMLView",
            "style": "IPY_MODEL_1550a84d017d48efabc75d09dc0fba71",
            "_dom_classes": [],
            "description": "",
            "_model_name": "HTMLModel",
            "placeholder": "​",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": " 122/122 [03:16&lt;00:00,  1.61s/it]",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_b0cd34026b244ab784d4ba84bf173538"
          }
        },
        "021fa09fd1eb43b9a1f5074c68a72d4d": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "initial",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "94755fc72e324be9a82ece957454f9ca": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "1550a84d017d48efabc75d09dc0fba71": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "b0cd34026b244ab784d4ba84bf173538": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "b2d20d620b704310a038126a45c4d1b5": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "state": {
            "_view_name": "HBoxView",
            "_dom_classes": [],
            "_model_name": "HBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_70ab7436c11840f59ee6548959679cf7",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_93162871f3da45dc8810e500d07dede6",
              "IPY_MODEL_60581bda95314b75984ad8ee3b64a325"
            ]
          }
        },
        "70ab7436c11840f59ee6548959679cf7": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "93162871f3da45dc8810e500d07dede6": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_71601acca2a94b90a451e6237464a79c",
            "_dom_classes": [],
            "description": "100%",
            "_model_name": "FloatProgressModel",
            "bar_style": "success",
            "max": 122,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 122,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_7d2dc083b31741c59fda93e8269cd60e"
          }
        },
        "60581bda95314b75984ad8ee3b64a325": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "state": {
            "_view_name": "HTMLView",
            "style": "IPY_MODEL_6b4ea2d5d3a94ceabac49bae5dd8dfb1",
            "_dom_classes": [],
            "description": "",
            "_model_name": "HTMLModel",
            "placeholder": "​",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": " 122/122 [02:10&lt;00:00,  1.07s/it]",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_81faca7fdea64121b62050ce63193a1f"
          }
        },
        "71601acca2a94b90a451e6237464a79c": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "initial",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "7d2dc083b31741c59fda93e8269cd60e": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "6b4ea2d5d3a94ceabac49bae5dd8dfb1": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "81faca7fdea64121b62050ce63193a1f": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "1a8aa9c772b64d52bf874a55ab7699a5": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "state": {
            "_view_name": "HBoxView",
            "_dom_classes": [],
            "_model_name": "HBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_715b2507bb8845d4a798b799d1bff42a",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_368379c4d8b74cdd9a1ff148b8e18008",
              "IPY_MODEL_014c0f3a230c4dde96dd64945545222d"
            ]
          }
        },
        "715b2507bb8845d4a798b799d1bff42a": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "368379c4d8b74cdd9a1ff148b8e18008": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_234ddff2784a472da3ca3fca2b2e25f7",
            "_dom_classes": [],
            "description": "100%",
            "_model_name": "FloatProgressModel",
            "bar_style": "success",
            "max": 122,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 122,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_2761c6f6dd24410ea07e375279d27635"
          }
        },
        "014c0f3a230c4dde96dd64945545222d": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "state": {
            "_view_name": "HTMLView",
            "style": "IPY_MODEL_a37f881680824de098decefb4b4db936",
            "_dom_classes": [],
            "description": "",
            "_model_name": "HTMLModel",
            "placeholder": "​",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": " 122/122 [01:05&lt;00:00,  1.86it/s]",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_4aaea69f73b94c0b8566822115a7d089"
          }
        },
        "234ddff2784a472da3ca3fca2b2e25f7": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "initial",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "2761c6f6dd24410ea07e375279d27635": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "a37f881680824de098decefb4b4db936": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "4aaea69f73b94c0b8566822115a7d089": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "e19306b6a50146ac91f2e0d2c7375854": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "state": {
            "_view_name": "HBoxView",
            "_dom_classes": [],
            "_model_name": "HBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_dcb7500f52c24c2e85de2610c026ec72",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_bbff8c6122044f19abbd3f70453818cd",
              "IPY_MODEL_bf66f62fb03f42859292af8a8cabc15a"
            ]
          }
        },
        "dcb7500f52c24c2e85de2610c026ec72": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "bbff8c6122044f19abbd3f70453818cd": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_dd4881ab32504343b92773dca5ab0251",
            "_dom_classes": [],
            "description": "100%",
            "_model_name": "FloatProgressModel",
            "bar_style": "success",
            "max": 122,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 122,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_57b54e21e9ba4f9f9afc4be7bf4ce909"
          }
        },
        "bf66f62fb03f42859292af8a8cabc15a": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "state": {
            "_view_name": "HTMLView",
            "style": "IPY_MODEL_509cc45e84a748bb9173fd0536f92880",
            "_dom_classes": [],
            "description": "",
            "_model_name": "HTMLModel",
            "placeholder": "​",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": " 122/122 [05:27&lt;00:00,  2.68s/it]",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_651e6d78139d4dfcb7fa2bc6273ee726"
          }
        },
        "dd4881ab32504343b92773dca5ab0251": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "initial",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "57b54e21e9ba4f9f9afc4be7bf4ce909": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "509cc45e84a748bb9173fd0536f92880": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "651e6d78139d4dfcb7fa2bc6273ee726": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "9b62ee902afe4e1f844765a36609df9b": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "state": {
            "_view_name": "HBoxView",
            "_dom_classes": [],
            "_model_name": "HBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_809c7742c7de4fdc8ba77c38e9f5b01c",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_6c1099be0d854907955186348b8896cd",
              "IPY_MODEL_f9d52b5c0af2493380d2efba18eea72b"
            ]
          }
        },
        "809c7742c7de4fdc8ba77c38e9f5b01c": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "6c1099be0d854907955186348b8896cd": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_1779821f6573481c871fffc98688f510",
            "_dom_classes": [],
            "description": "100%",
            "_model_name": "FloatProgressModel",
            "bar_style": "success",
            "max": 122,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 122,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_0f3d16e0bc2d44718bd2763d0547c060"
          }
        },
        "f9d52b5c0af2493380d2efba18eea72b": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "state": {
            "_view_name": "HTMLView",
            "style": "IPY_MODEL_c9b008542c544f18a80f65b902916d23",
            "_dom_classes": [],
            "description": "",
            "_model_name": "HTMLModel",
            "placeholder": "​",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": " 122/122 [04:22&lt;00:00,  2.15s/it]",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_cd382e92cb05480b9e1d169c2af1a8fd"
          }
        },
        "1779821f6573481c871fffc98688f510": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "initial",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "0f3d16e0bc2d44718bd2763d0547c060": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "c9b008542c544f18a80f65b902916d23": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "cd382e92cb05480b9e1d169c2af1a8fd": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "a89e6eb0185b426d95e10e0bcf9d0c00": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "state": {
            "_view_name": "HBoxView",
            "_dom_classes": [],
            "_model_name": "HBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_6373c9df846b4c859c81ab0b2a322670",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_d84c659817cb4aabbc372a2778b3a9e1",
              "IPY_MODEL_fbe44f93108b4fada19444e420cc7d17"
            ]
          }
        },
        "6373c9df846b4c859c81ab0b2a322670": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "d84c659817cb4aabbc372a2778b3a9e1": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_49a229facf9249a8980b9daf4e0c3ba8",
            "_dom_classes": [],
            "description": "100%",
            "_model_name": "FloatProgressModel",
            "bar_style": "success",
            "max": 122,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 122,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_485b117650e0406caec37a61b76124bc"
          }
        },
        "fbe44f93108b4fada19444e420cc7d17": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "state": {
            "_view_name": "HTMLView",
            "style": "IPY_MODEL_2c1d40a5984e4e63942225e14f43e41b",
            "_dom_classes": [],
            "description": "",
            "_model_name": "HTMLModel",
            "placeholder": "​",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": " 122/122 [03:16&lt;00:00,  1.61s/it]",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_babfc943f22847219c0db08fcc75f2f0"
          }
        },
        "49a229facf9249a8980b9daf4e0c3ba8": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "initial",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "485b117650e0406caec37a61b76124bc": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "2c1d40a5984e4e63942225e14f43e41b": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "babfc943f22847219c0db08fcc75f2f0": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "b8fe2d76c24f495db4d591b25586b6cd": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "state": {
            "_view_name": "HBoxView",
            "_dom_classes": [],
            "_model_name": "HBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_f0daeb6da6164882b679f65ccba095c6",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_7565ef898d1a4627a55aa9a84291ab0c",
              "IPY_MODEL_d129701273e047df90a7987b73053496"
            ]
          }
        },
        "f0daeb6da6164882b679f65ccba095c6": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "7565ef898d1a4627a55aa9a84291ab0c": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_f9ccaed800d44156b25d7dad3aaa0f3d",
            "_dom_classes": [],
            "description": "100%",
            "_model_name": "FloatProgressModel",
            "bar_style": "success",
            "max": 122,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 122,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_a41d1eda9ce7415e9f01571b754841de"
          }
        },
        "d129701273e047df90a7987b73053496": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "state": {
            "_view_name": "HTMLView",
            "style": "IPY_MODEL_be3cd7aa528a4e189764ae3ffb5dc7c5",
            "_dom_classes": [],
            "description": "",
            "_model_name": "HTMLModel",
            "placeholder": "​",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": " 122/122 [02:11&lt;00:00,  1.08s/it]",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_5bdf2b007b694b1492b0717abdb4545a"
          }
        },
        "f9ccaed800d44156b25d7dad3aaa0f3d": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "initial",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "a41d1eda9ce7415e9f01571b754841de": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "be3cd7aa528a4e189764ae3ffb5dc7c5": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "5bdf2b007b694b1492b0717abdb4545a": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "f8601d7944fa4ff4803e7404acbce306": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "state": {
            "_view_name": "HBoxView",
            "_dom_classes": [],
            "_model_name": "HBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_259c607682654588970f2c68708a6d05",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_f42fcc391cb74cfda066669cb224a6ef",
              "IPY_MODEL_4a5d440baa2e4d158e3b05014cdca3e8"
            ]
          }
        },
        "259c607682654588970f2c68708a6d05": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "f42fcc391cb74cfda066669cb224a6ef": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_0494214d797648acaaf6d79ca9797359",
            "_dom_classes": [],
            "description": "100%",
            "_model_name": "FloatProgressModel",
            "bar_style": "success",
            "max": 122,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 122,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_99228d126ef543aa91f7783bf099e180"
          }
        },
        "4a5d440baa2e4d158e3b05014cdca3e8": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "state": {
            "_view_name": "HTMLView",
            "style": "IPY_MODEL_d673082019ec40289a51770a155baec4",
            "_dom_classes": [],
            "description": "",
            "_model_name": "HTMLModel",
            "placeholder": "​",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": " 122/122 [01:05&lt;00:00,  1.86it/s]",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_7d97bb2f2a724d56bb9b35fa2f38bfa3"
          }
        },
        "0494214d797648acaaf6d79ca9797359": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "initial",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "99228d126ef543aa91f7783bf099e180": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "d673082019ec40289a51770a155baec4": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "7d97bb2f2a724d56bb9b35fa2f38bfa3": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "fdaf200d0f4d4e13bddd17de29c858a5": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "state": {
            "_view_name": "HBoxView",
            "_dom_classes": [],
            "_model_name": "HBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_3f9e219348f84ee2889eb66897786695",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_de63b680b44e48cab436f0a05cc2c22f",
              "IPY_MODEL_a15b38d75d4a4fe9b8d810daaa6ab5a6"
            ]
          }
        },
        "3f9e219348f84ee2889eb66897786695": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "de63b680b44e48cab436f0a05cc2c22f": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_4a53266e942b4173813af88437661c32",
            "_dom_classes": [],
            "description": "100%",
            "_model_name": "FloatProgressModel",
            "bar_style": "success",
            "max": 122,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 122,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_c99a0666f613408799e62189a293ef81"
          }
        },
        "a15b38d75d4a4fe9b8d810daaa6ab5a6": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "state": {
            "_view_name": "HTMLView",
            "style": "IPY_MODEL_63b2552c319b48e39d810412aacfe1a0",
            "_dom_classes": [],
            "description": "",
            "_model_name": "HTMLModel",
            "placeholder": "​",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": " 122/122 [01:07&lt;00:00,  1.81it/s]",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_5a3d5d304beb45b6abdedd0d43c61b87"
          }
        },
        "4a53266e942b4173813af88437661c32": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "initial",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "c99a0666f613408799e62189a293ef81": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "63b2552c319b48e39d810412aacfe1a0": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "5a3d5d304beb45b6abdedd0d43c61b87": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "15f6fc81fae24f889ce9e070744f6230": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "state": {
            "_view_name": "HBoxView",
            "_dom_classes": [],
            "_model_name": "HBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_b17f964c7eb14866a7af556bd945b92e",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_9371f3e82fb74bbaae951bf5ac475fab",
              "IPY_MODEL_65327c4364744e10983690de3ea4da5e"
            ]
          }
        },
        "b17f964c7eb14866a7af556bd945b92e": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "9371f3e82fb74bbaae951bf5ac475fab": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_03d5952f86ff437ebacf1991631d0eb0",
            "_dom_classes": [],
            "description": "100%",
            "_model_name": "FloatProgressModel",
            "bar_style": "success",
            "max": 122,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 122,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_63410999f61247b4b65b278eecfdf97a"
          }
        },
        "65327c4364744e10983690de3ea4da5e": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "state": {
            "_view_name": "HTMLView",
            "style": "IPY_MODEL_779c4b58571d4e73b2bd4b60638a0890",
            "_dom_classes": [],
            "description": "",
            "_model_name": "HTMLModel",
            "placeholder": "​",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": " 122/122 [04:29&lt;00:00,  2.21s/it]",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_2b5abc9a64cb4902904faddd31b0f578"
          }
        },
        "03d5952f86ff437ebacf1991631d0eb0": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "initial",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "63410999f61247b4b65b278eecfdf97a": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "779c4b58571d4e73b2bd4b60638a0890": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "2b5abc9a64cb4902904faddd31b0f578": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "de18b79f2bc04308a3f44d3236396223": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "state": {
            "_view_name": "HBoxView",
            "_dom_classes": [],
            "_model_name": "HBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_a4d19ec295a645288efcec735deb63cf",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_c529a3394ba24944995320e7f7e26038",
              "IPY_MODEL_10f3687214d140a18837939279d6585c"
            ]
          }
        },
        "a4d19ec295a645288efcec735deb63cf": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "c529a3394ba24944995320e7f7e26038": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_76d4c91608ea4f0ba3d9b346143ac1ab",
            "_dom_classes": [],
            "description": "100%",
            "_model_name": "FloatProgressModel",
            "bar_style": "success",
            "max": 122,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 122,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_7087952b4a7b4adb909e19c4c28a5241"
          }
        },
        "10f3687214d140a18837939279d6585c": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "state": {
            "_view_name": "HTMLView",
            "style": "IPY_MODEL_541878def9064358b1d66d3b205291dd",
            "_dom_classes": [],
            "description": "",
            "_model_name": "HTMLModel",
            "placeholder": "​",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": " 122/122 [03:21&lt;00:00,  1.65s/it]",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_14f0973989aa41a9ac1c086f27ece32e"
          }
        },
        "76d4c91608ea4f0ba3d9b346143ac1ab": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "initial",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "7087952b4a7b4adb909e19c4c28a5241": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "541878def9064358b1d66d3b205291dd": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "14f0973989aa41a9ac1c086f27ece32e": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "877d2c7d9c784972af1571c936289d72": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "state": {
            "_view_name": "HBoxView",
            "_dom_classes": [],
            "_model_name": "HBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_0bf609a777514bbfac502b71748ba50a",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_43d92c166f764c118388103ba30d0c7f",
              "IPY_MODEL_133fe1d323c44d65b9d6eb669e891ccb"
            ]
          }
        },
        "0bf609a777514bbfac502b71748ba50a": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "43d92c166f764c118388103ba30d0c7f": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_090e0ae93565478d98eff8ca03ef66e9",
            "_dom_classes": [],
            "description": "100%",
            "_model_name": "FloatProgressModel",
            "bar_style": "success",
            "max": 122,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 122,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_a3f256f21cae4016b340e7d3a1cdeb04"
          }
        },
        "133fe1d323c44d65b9d6eb669e891ccb": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "state": {
            "_view_name": "HTMLView",
            "style": "IPY_MODEL_4c68fbde45d849b78a578860548d197d",
            "_dom_classes": [],
            "description": "",
            "_model_name": "HTMLModel",
            "placeholder": "​",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": " 122/122 [02:14&lt;00:00,  1.10s/it]",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_b859069d51464221aabf4652eb7ecc69"
          }
        },
        "090e0ae93565478d98eff8ca03ef66e9": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "initial",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "a3f256f21cae4016b340e7d3a1cdeb04": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "4c68fbde45d849b78a578860548d197d": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "b859069d51464221aabf4652eb7ecc69": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "ca927f8dcc974d98a22fc08f378cdd0e": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "state": {
            "_view_name": "HBoxView",
            "_dom_classes": [],
            "_model_name": "HBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_4b2474280df04a23ae26ce15a3a04ce1",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_4730fbeff6f3498ca7200f20f14cc446",
              "IPY_MODEL_476fb21c2dfc4ef5a774eb1fa089caa2"
            ]
          }
        },
        "4b2474280df04a23ae26ce15a3a04ce1": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "4730fbeff6f3498ca7200f20f14cc446": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_dfec18be58b349e2ab7213d72ef883f4",
            "_dom_classes": [],
            "description": "100%",
            "_model_name": "FloatProgressModel",
            "bar_style": "success",
            "max": 122,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 122,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_eb69017c0fd34116a5bda8405c576091"
          }
        },
        "476fb21c2dfc4ef5a774eb1fa089caa2": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "state": {
            "_view_name": "HTMLView",
            "style": "IPY_MODEL_c6fe88fb4e3b47348769abbba9306023",
            "_dom_classes": [],
            "description": "",
            "_model_name": "HTMLModel",
            "placeholder": "​",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": " 122/122 [01:07&lt;00:00,  1.81it/s]",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_87cd8f965a024100bf84c61aa64fdbc7"
          }
        },
        "dfec18be58b349e2ab7213d72ef883f4": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "initial",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "eb69017c0fd34116a5bda8405c576091": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "c6fe88fb4e3b47348769abbba9306023": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "87cd8f965a024100bf84c61aa64fdbc7": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "634052faba694eb9afb243984a3c92a5": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "state": {
            "_view_name": "HBoxView",
            "_dom_classes": [],
            "_model_name": "HBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_9924b2f75f8641c3a7397850c557e1e1",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_64dccbba9e55448bbbf70577a3a00621",
              "IPY_MODEL_ed5468f22b1640a3979055e845f9c312"
            ]
          }
        },
        "9924b2f75f8641c3a7397850c557e1e1": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "64dccbba9e55448bbbf70577a3a00621": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_fffcace372954df4a29e3cdd086e9d29",
            "_dom_classes": [],
            "description": "100%",
            "_model_name": "FloatProgressModel",
            "bar_style": "success",
            "max": 122,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 122,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_8af80cc7f799437887c7ba1ba6a73b91"
          }
        },
        "ed5468f22b1640a3979055e845f9c312": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "state": {
            "_view_name": "HTMLView",
            "style": "IPY_MODEL_31e230df56e440c09b5e27b71325512d",
            "_dom_classes": [],
            "description": "",
            "_model_name": "HTMLModel",
            "placeholder": "​",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": " 122/122 [07:49&lt;00:00,  3.85s/it]",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_303dd4197dba492eb84e294ec6a1562a"
          }
        },
        "fffcace372954df4a29e3cdd086e9d29": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "initial",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "8af80cc7f799437887c7ba1ba6a73b91": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "31e230df56e440c09b5e27b71325512d": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "303dd4197dba492eb84e294ec6a1562a": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "2cda34dcc6604b53966c4522e7194c63": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "state": {
            "_view_name": "HBoxView",
            "_dom_classes": [],
            "_model_name": "HBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_3ce38973755b462cb179e7276f6ceb92",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_ce0b7d8c6266408789d06c0af26ea71c",
              "IPY_MODEL_ab790fb611c84d53a66df07a9b3c145c"
            ]
          }
        },
        "3ce38973755b462cb179e7276f6ceb92": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "ce0b7d8c6266408789d06c0af26ea71c": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_3884808a2df142cfa0f4139e01f0becd",
            "_dom_classes": [],
            "description": "100%",
            "_model_name": "FloatProgressModel",
            "bar_style": "success",
            "max": 122,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 122,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_85153c2a10614392bb1843bab849ac89"
          }
        },
        "ab790fb611c84d53a66df07a9b3c145c": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "state": {
            "_view_name": "HTMLView",
            "style": "IPY_MODEL_0f0e62e09ed1469398f4634fadd34baf",
            "_dom_classes": [],
            "description": "",
            "_model_name": "HTMLModel",
            "placeholder": "​",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": " 122/122 [06:42&lt;00:00,  3.30s/it]",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_95095f2ccd8347a5bee4c611f64474b2"
          }
        },
        "3884808a2df142cfa0f4139e01f0becd": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "initial",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "85153c2a10614392bb1843bab849ac89": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "0f0e62e09ed1469398f4634fadd34baf": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "95095f2ccd8347a5bee4c611f64474b2": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "00dd0bc2a2114901a1a27eec0c8c2228": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "state": {
            "_view_name": "HBoxView",
            "_dom_classes": [],
            "_model_name": "HBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_8e0c69dc02c54930bae74e4339122d85",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_90e7166a9233480eaff7a6bbc50766b8",
              "IPY_MODEL_8be85dfd38d9425d9792b6cf08c7304b"
            ]
          }
        },
        "8e0c69dc02c54930bae74e4339122d85": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "90e7166a9233480eaff7a6bbc50766b8": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_e461d7ae484f40e9aa806ff19080b1f5",
            "_dom_classes": [],
            "description": "100%",
            "_model_name": "FloatProgressModel",
            "bar_style": "success",
            "max": 122,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 122,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_54cf6a07f299488abb733aa1becb1ca0"
          }
        },
        "8be85dfd38d9425d9792b6cf08c7304b": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "state": {
            "_view_name": "HTMLView",
            "style": "IPY_MODEL_2303fbb2d35b485488c322848aa8f75f",
            "_dom_classes": [],
            "description": "",
            "_model_name": "HTMLModel",
            "placeholder": "​",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": " 122/122 [05:35&lt;00:00,  2.75s/it]",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_281a3817620a4d8d8bcfef7783c8ecdc"
          }
        },
        "e461d7ae484f40e9aa806ff19080b1f5": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "initial",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "54cf6a07f299488abb733aa1becb1ca0": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "2303fbb2d35b485488c322848aa8f75f": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "281a3817620a4d8d8bcfef7783c8ecdc": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "76592b5eeb1641f9ba6c925556d0d20f": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "state": {
            "_view_name": "HBoxView",
            "_dom_classes": [],
            "_model_name": "HBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_68326556498a41aaaca4724b84c28673",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_b3fb0a207d0c446ba513cee610241e55",
              "IPY_MODEL_8dddb00c834748aca63de64deb1e0b32"
            ]
          }
        },
        "68326556498a41aaaca4724b84c28673": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "b3fb0a207d0c446ba513cee610241e55": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_3b99fffab85c46ccb55a08d3e51726ff",
            "_dom_classes": [],
            "description": "100%",
            "_model_name": "FloatProgressModel",
            "bar_style": "success",
            "max": 122,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 122,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_8e9d993f2dd341fd89af25f9830f3e93"
          }
        },
        "8dddb00c834748aca63de64deb1e0b32": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "state": {
            "_view_name": "HTMLView",
            "style": "IPY_MODEL_58dee101d08f4f3bb52e11128ab897f4",
            "_dom_classes": [],
            "description": "",
            "_model_name": "HTMLModel",
            "placeholder": "​",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": " 122/122 [04:28&lt;00:00,  2.20s/it]",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_c1908a4b213a41b8ae938e41a8eeb829"
          }
        },
        "3b99fffab85c46ccb55a08d3e51726ff": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "initial",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "8e9d993f2dd341fd89af25f9830f3e93": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "58dee101d08f4f3bb52e11128ab897f4": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "c1908a4b213a41b8ae938e41a8eeb829": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "2dcd0e7ddf544e7f9d9c6b4916b106b4": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "state": {
            "_view_name": "HBoxView",
            "_dom_classes": [],
            "_model_name": "HBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_e4399fde5cdc4ba5a835321329923470",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_451802397f78455d8f2596edb09fef5b",
              "IPY_MODEL_e9b010f24fdd4ff4942f7cdaef61ed06"
            ]
          }
        },
        "e4399fde5cdc4ba5a835321329923470": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "451802397f78455d8f2596edb09fef5b": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_9d2115e3baaf4421a3af1be3e9def6ed",
            "_dom_classes": [],
            "description": "100%",
            "_model_name": "FloatProgressModel",
            "bar_style": "success",
            "max": 122,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 122,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_ef44f24d767646ecb25e2c2c510886b3"
          }
        },
        "e9b010f24fdd4ff4942f7cdaef61ed06": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "state": {
            "_view_name": "HTMLView",
            "style": "IPY_MODEL_68bfad276b264727aff03108887dfea9",
            "_dom_classes": [],
            "description": "",
            "_model_name": "HTMLModel",
            "placeholder": "​",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": " 122/122 [03:21&lt;00:00,  1.65s/it]",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_2c0f83a85d8f4af780fca10812eeb037"
          }
        },
        "9d2115e3baaf4421a3af1be3e9def6ed": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "initial",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "ef44f24d767646ecb25e2c2c510886b3": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "68bfad276b264727aff03108887dfea9": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "2c0f83a85d8f4af780fca10812eeb037": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "e6714516021c42ae856790ad99139ff2": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "state": {
            "_view_name": "HBoxView",
            "_dom_classes": [],
            "_model_name": "HBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_818a183ab0a84404a9844b8870b95847",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_4078b7a6a5bb46a68ca866c1b1087ec3",
              "IPY_MODEL_0cddb04ae12f4934aa46a50d506a213d"
            ]
          }
        },
        "818a183ab0a84404a9844b8870b95847": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "4078b7a6a5bb46a68ca866c1b1087ec3": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_54a0e1b263964b6c8d5dea70934358df",
            "_dom_classes": [],
            "description": "100%",
            "_model_name": "FloatProgressModel",
            "bar_style": "success",
            "max": 122,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 122,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_36fd145d17344f0cb53bd8199aba0c4a"
          }
        },
        "0cddb04ae12f4934aa46a50d506a213d": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "state": {
            "_view_name": "HTMLView",
            "style": "IPY_MODEL_2509c37ea8ea4148b5df477370adf962",
            "_dom_classes": [],
            "description": "",
            "_model_name": "HTMLModel",
            "placeholder": "​",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": " 122/122 [02:14&lt;00:00,  1.10s/it]",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_a44ec12c0b1a4b24a2eff89938912285"
          }
        },
        "54a0e1b263964b6c8d5dea70934358df": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "initial",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "36fd145d17344f0cb53bd8199aba0c4a": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "2509c37ea8ea4148b5df477370adf962": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "a44ec12c0b1a4b24a2eff89938912285": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "9e30adfad0e84fe68f1064c8a25a53e4": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "state": {
            "_view_name": "HBoxView",
            "_dom_classes": [],
            "_model_name": "HBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_8f7bcbd93ea64116b7593d37b950e2ad",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_cf53d3bf6dd147d2887dfb3eb3ef0f97",
              "IPY_MODEL_230bacfef30149f981e172c567deb873"
            ]
          }
        },
        "8f7bcbd93ea64116b7593d37b950e2ad": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "cf53d3bf6dd147d2887dfb3eb3ef0f97": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_833c7d0d32c34d868a73936bea585fe1",
            "_dom_classes": [],
            "description": "100%",
            "_model_name": "FloatProgressModel",
            "bar_style": "success",
            "max": 122,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 122,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_c26fb402eaf04ed2afcc68d30e6c8e95"
          }
        },
        "230bacfef30149f981e172c567deb873": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "state": {
            "_view_name": "HTMLView",
            "style": "IPY_MODEL_9fb24c55bc8b45b9a5c86aced7a88f8b",
            "_dom_classes": [],
            "description": "",
            "_model_name": "HTMLModel",
            "placeholder": "​",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": " 122/122 [01:08&lt;00:00,  1.79it/s]",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_fe6693a9b3cf4ca783c089b8583b9f74"
          }
        },
        "833c7d0d32c34d868a73936bea585fe1": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "initial",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "c26fb402eaf04ed2afcc68d30e6c8e95": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "9fb24c55bc8b45b9a5c86aced7a88f8b": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "fe6693a9b3cf4ca783c089b8583b9f74": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "180fc9094a4e41fa948e44b00958b75c": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "state": {
            "_view_name": "HBoxView",
            "_dom_classes": [],
            "_model_name": "HBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_cc1248028e954073b61f1a7df5ea1aea",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_2b25cf9b985f42aa9f061ebb4cc0a2b6",
              "IPY_MODEL_9ab062baa860459e81560328a2b6f2e0"
            ]
          }
        },
        "cc1248028e954073b61f1a7df5ea1aea": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "2b25cf9b985f42aa9f061ebb4cc0a2b6": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_02c83308c4b140b98078cf0b3d021bc2",
            "_dom_classes": [],
            "description": "100%",
            "_model_name": "FloatProgressModel",
            "bar_style": "success",
            "max": 122,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 122,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_939b3cd8da9f4cb190b67e4252a3d578"
          }
        },
        "9ab062baa860459e81560328a2b6f2e0": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "state": {
            "_view_name": "HTMLView",
            "style": "IPY_MODEL_8529ace51af84665a4a4e5e3968777db",
            "_dom_classes": [],
            "description": "",
            "_model_name": "HTMLModel",
            "placeholder": "​",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": " 122/122 [00:52&lt;00:00,  2.34it/s]",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_447326e4470a4425b17946a33a130f3f"
          }
        },
        "02c83308c4b140b98078cf0b3d021bc2": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "initial",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "939b3cd8da9f4cb190b67e4252a3d578": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "8529ace51af84665a4a4e5e3968777db": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "447326e4470a4425b17946a33a130f3f": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "c43a65d2e03f47aa9f4f8955ddc6f37f": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "state": {
            "_view_name": "HBoxView",
            "_dom_classes": [],
            "_model_name": "HBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_b2863fb495044406bb65cd94dcaace2a",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_33fa8327647d47edb12fc4f2a96a7540",
              "IPY_MODEL_14625bbb269b44daaefce2131a23f43f"
            ]
          }
        },
        "b2863fb495044406bb65cd94dcaace2a": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "33fa8327647d47edb12fc4f2a96a7540": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_583d7ca7c23c4747bf9c72197c416bc0",
            "_dom_classes": [],
            "description": "100%",
            "_model_name": "FloatProgressModel",
            "bar_style": "success",
            "max": 122,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 122,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_a7a2955d29234b6480b3f604d1fd74c3"
          }
        },
        "14625bbb269b44daaefce2131a23f43f": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "state": {
            "_view_name": "HTMLView",
            "style": "IPY_MODEL_95caa828633646bba8e75679674af8f6",
            "_dom_classes": [],
            "description": "",
            "_model_name": "HTMLModel",
            "placeholder": "​",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": " 122/122 [00:52&lt;00:00,  2.33it/s]",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_dab5d6cfddd34ddbbef9d07db7fd5e51"
          }
        },
        "583d7ca7c23c4747bf9c72197c416bc0": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "initial",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "a7a2955d29234b6480b3f604d1fd74c3": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "95caa828633646bba8e75679674af8f6": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "dab5d6cfddd34ddbbef9d07db7fd5e51": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "5325899bee0a4a60b4bfb984d2e767e1": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "state": {
            "_view_name": "HBoxView",
            "_dom_classes": [],
            "_model_name": "HBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_fbfc1ccdaa8b4ae0bcba0794d28650bd",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_c386dbcb1a3144dab5ecb71a4374ea9b",
              "IPY_MODEL_e8590e6446ea4ae2bef5a15db674ff23"
            ]
          }
        },
        "fbfc1ccdaa8b4ae0bcba0794d28650bd": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "c386dbcb1a3144dab5ecb71a4374ea9b": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_0daacdf56b77451980ad4fd8ce919b1c",
            "_dom_classes": [],
            "description": "100%",
            "_model_name": "FloatProgressModel",
            "bar_style": "success",
            "max": 122,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 122,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_abacfcfbad2f4d4e9bfccd038fb5dc13"
          }
        },
        "e8590e6446ea4ae2bef5a15db674ff23": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "state": {
            "_view_name": "HTMLView",
            "style": "IPY_MODEL_4514808a00e84a0c862677770467fa23",
            "_dom_classes": [],
            "description": "",
            "_model_name": "HTMLModel",
            "placeholder": "​",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": " 122/122 [00:37&lt;00:00,  3.21it/s]",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_dcea3970194c4083ac5bd248e98b410f"
          }
        },
        "0daacdf56b77451980ad4fd8ce919b1c": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "initial",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "abacfcfbad2f4d4e9bfccd038fb5dc13": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "4514808a00e84a0c862677770467fa23": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "dcea3970194c4083ac5bd248e98b410f": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "5c1634307b974243bb97db653342e846": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "state": {
            "_view_name": "HBoxView",
            "_dom_classes": [],
            "_model_name": "HBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_0cfe5d5a18fe40f5be5a34eb4f455c25",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_060d9af496c8475eaf6f84443e1938ab",
              "IPY_MODEL_de3c9384f25d4b7f878990f72dffe212"
            ]
          }
        },
        "0cfe5d5a18fe40f5be5a34eb4f455c25": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "060d9af496c8475eaf6f84443e1938ab": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_47cd2877f9124afcb7e388cccc14cc22",
            "_dom_classes": [],
            "description": "100%",
            "_model_name": "FloatProgressModel",
            "bar_style": "success",
            "max": 122,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 122,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_2265d8bbb9c24728917344a46c46d848"
          }
        },
        "de3c9384f25d4b7f878990f72dffe212": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "state": {
            "_view_name": "HTMLView",
            "style": "IPY_MODEL_4298e5992a0040d3ba5d88acef2385d3",
            "_dom_classes": [],
            "description": "",
            "_model_name": "HTMLModel",
            "placeholder": "​",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": " 122/122 [26:37&lt;00:00, 13.09s/it]",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_8d876c99d2d64966ad7a01cf199b3ae0"
          }
        },
        "47cd2877f9124afcb7e388cccc14cc22": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "initial",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "2265d8bbb9c24728917344a46c46d848": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "4298e5992a0040d3ba5d88acef2385d3": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "8d876c99d2d64966ad7a01cf199b3ae0": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "8d2590c9ca82459a990dca2c45f2233f": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "state": {
            "_view_name": "HBoxView",
            "_dom_classes": [],
            "_model_name": "HBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_186ade56bc4749daa87d928d758687fb",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_fe29bf9a61094a289a8b70a2d5b7977c",
              "IPY_MODEL_f8d43b3149134d528768a6e085c3c210"
            ]
          }
        },
        "186ade56bc4749daa87d928d758687fb": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "fe29bf9a61094a289a8b70a2d5b7977c": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_4d09e10559b146d8a65f57ff64eab93c",
            "_dom_classes": [],
            "description": "100%",
            "_model_name": "FloatProgressModel",
            "bar_style": "success",
            "max": 122,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 122,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_098ef9b59c4b40b08b3add183ee89964"
          }
        },
        "f8d43b3149134d528768a6e085c3c210": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "state": {
            "_view_name": "HTMLView",
            "style": "IPY_MODEL_4705888cd57b40dfa9a7dd018a96c5b2",
            "_dom_classes": [],
            "description": "",
            "_model_name": "HTMLModel",
            "placeholder": "​",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": " 122/122 [02:28&lt;00:00,  1.22s/it]",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_49446f18a2a94bb5b7e85201ac95f8d6"
          }
        },
        "4d09e10559b146d8a65f57ff64eab93c": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "initial",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "098ef9b59c4b40b08b3add183ee89964": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "4705888cd57b40dfa9a7dd018a96c5b2": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "49446f18a2a94bb5b7e85201ac95f8d6": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "05a58840925a49f0ac301f743d0c9c3f": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "state": {
            "_view_name": "HBoxView",
            "_dom_classes": [],
            "_model_name": "HBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_6fbb4bae8a6643edaf6bbd26e9d2265c",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_7f592ae524d64527a34e68c79fdf4f61",
              "IPY_MODEL_1302c0f4cce74b2d9a58d31606122b0e"
            ]
          }
        },
        "6fbb4bae8a6643edaf6bbd26e9d2265c": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "7f592ae524d64527a34e68c79fdf4f61": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_cca8971c749640809802fc6bec66881f",
            "_dom_classes": [],
            "description": "100%",
            "_model_name": "FloatProgressModel",
            "bar_style": "success",
            "max": 122,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 122,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_fcafecb903d24b1f93f066857b18dd7d"
          }
        },
        "1302c0f4cce74b2d9a58d31606122b0e": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "state": {
            "_view_name": "HTMLView",
            "style": "IPY_MODEL_1eab987d3c6543f78729e5eb5ff7810e",
            "_dom_classes": [],
            "description": "",
            "_model_name": "HTMLModel",
            "placeholder": "​",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": " 122/122 [01:51&lt;00:00,  1.10it/s]",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_1f8fd35dd2bb468b90aa973e17ca2d88"
          }
        },
        "cca8971c749640809802fc6bec66881f": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "initial",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "fcafecb903d24b1f93f066857b18dd7d": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "1eab987d3c6543f78729e5eb5ff7810e": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "1f8fd35dd2bb468b90aa973e17ca2d88": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "90f4bca129fa4b568418a944d973c391": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "state": {
            "_view_name": "HBoxView",
            "_dom_classes": [],
            "_model_name": "HBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_9c46738ca4fd44cbbac03129440937a9",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_2acfc27d3b86412f84894832ddaf05f6",
              "IPY_MODEL_01b7d489303e4747a49ae1d7d9544e84"
            ]
          }
        },
        "9c46738ca4fd44cbbac03129440937a9": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "2acfc27d3b86412f84894832ddaf05f6": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_5ea145818f5f4cd7b95562ed7e0a85a7",
            "_dom_classes": [],
            "description": "100%",
            "_model_name": "FloatProgressModel",
            "bar_style": "success",
            "max": 122,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 122,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_abe3fe2fb24a48f5a2848b7eb45ecd65"
          }
        },
        "01b7d489303e4747a49ae1d7d9544e84": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "state": {
            "_view_name": "HTMLView",
            "style": "IPY_MODEL_aabee52fff0d4e48b491811799cc588d",
            "_dom_classes": [],
            "description": "",
            "_model_name": "HTMLModel",
            "placeholder": "​",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": " 122/122 [01:14&lt;00:00,  1.64it/s]",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_e760acbb06ad468ab4da2cc598b332f9"
          }
        },
        "5ea145818f5f4cd7b95562ed7e0a85a7": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "initial",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "abe3fe2fb24a48f5a2848b7eb45ecd65": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "aabee52fff0d4e48b491811799cc588d": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "e760acbb06ad468ab4da2cc598b332f9": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "582fc634f6d34e5bb9f597b7752b8a6b": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "state": {
            "_view_name": "HBoxView",
            "_dom_classes": [],
            "_model_name": "HBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_cd06d49a16ff4c3f80a7c32f0c3e6cde",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_c98df39f457a4bd1b0720df64b9690f0",
              "IPY_MODEL_3f403203abd04defae8887dfe4d18ca6"
            ]
          }
        },
        "cd06d49a16ff4c3f80a7c32f0c3e6cde": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "c98df39f457a4bd1b0720df64b9690f0": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_0348f78ed56d4d5199764ce0d2012b0b",
            "_dom_classes": [],
            "description": "100%",
            "_model_name": "FloatProgressModel",
            "bar_style": "success",
            "max": 122,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 122,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_a1cb59c7ddbf450badc5d75fb8d68896"
          }
        },
        "3f403203abd04defae8887dfe4d18ca6": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "state": {
            "_view_name": "HTMLView",
            "style": "IPY_MODEL_fc50b797efff4e8ca6077c29a44ef162",
            "_dom_classes": [],
            "description": "",
            "_model_name": "HTMLModel",
            "placeholder": "​",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": " 122/122 [00:37&lt;00:00,  3.29it/s]",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_6f471dc09b124b56a943f8627eea84a6"
          }
        },
        "0348f78ed56d4d5199764ce0d2012b0b": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "initial",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "a1cb59c7ddbf450badc5d75fb8d68896": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "fc50b797efff4e8ca6077c29a44ef162": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "6f471dc09b124b56a943f8627eea84a6": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "c6119914861c4fcba45670128e4149cd": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "state": {
            "_view_name": "HBoxView",
            "_dom_classes": [],
            "_model_name": "HBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_2f453823d6d049c8a6b039c871b4a3f5",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_ef59f54a43874749b0e2242f8e69d88d",
              "IPY_MODEL_4e6a81008e494713919f8985a7ec5651"
            ]
          }
        },
        "2f453823d6d049c8a6b039c871b4a3f5": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "ef59f54a43874749b0e2242f8e69d88d": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_0b7377cc96ac4d1d9bae967c7b967a0d",
            "_dom_classes": [],
            "description": "100%",
            "_model_name": "FloatProgressModel",
            "bar_style": "success",
            "max": 122,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 122,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_5cf6ef16f08c4547b2043f8e9d9ce45c"
          }
        },
        "4e6a81008e494713919f8985a7ec5651": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "state": {
            "_view_name": "HTMLView",
            "style": "IPY_MODEL_fbb2fb7ab05e499889c04516b34b9223",
            "_dom_classes": [],
            "description": "",
            "_model_name": "HTMLModel",
            "placeholder": "​",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": " 122/122 [02:31&lt;00:00,  1.24s/it]",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_1311ffa3b028430d8593d5434bf42bac"
          }
        },
        "0b7377cc96ac4d1d9bae967c7b967a0d": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "initial",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "5cf6ef16f08c4547b2043f8e9d9ce45c": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "fbb2fb7ab05e499889c04516b34b9223": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "1311ffa3b028430d8593d5434bf42bac": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "239d3355af784bd6b5f6e6384f438b85": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "state": {
            "_view_name": "HBoxView",
            "_dom_classes": [],
            "_model_name": "HBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_79ff923aae94457e87a8c0e01a2712aa",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_b5ca3e07fed84165bcec3111ea20510b",
              "IPY_MODEL_f96ed2b8c9834ffc82c0a9fe280c0299"
            ]
          }
        },
        "79ff923aae94457e87a8c0e01a2712aa": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "b5ca3e07fed84165bcec3111ea20510b": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_9b25de6af39548d5bf7759e1eb718bcb",
            "_dom_classes": [],
            "description": "100%",
            "_model_name": "FloatProgressModel",
            "bar_style": "success",
            "max": 122,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 122,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_929cf885538f476c95db4c3ad0c0b055"
          }
        },
        "f96ed2b8c9834ffc82c0a9fe280c0299": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "state": {
            "_view_name": "HTMLView",
            "style": "IPY_MODEL_8b4ba90b40ab48ccbe209f017ae24697",
            "_dom_classes": [],
            "description": "",
            "_model_name": "HTMLModel",
            "placeholder": "​",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": " 122/122 [01:53&lt;00:00,  1.07it/s]",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_3999cdcd7ec4469c8b7bc245de647388"
          }
        },
        "9b25de6af39548d5bf7759e1eb718bcb": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "initial",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "929cf885538f476c95db4c3ad0c0b055": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "8b4ba90b40ab48ccbe209f017ae24697": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "3999cdcd7ec4469c8b7bc245de647388": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "1d6107caa247456b96f58b92353d2be4": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "state": {
            "_view_name": "HBoxView",
            "_dom_classes": [],
            "_model_name": "HBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_f77d644eb65e4944abda280ba4b4314f",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_f115f6b78af848d9a6a8adf09000b240",
              "IPY_MODEL_0c0a0fbecd454dd5aff5738f95e3cb97"
            ]
          }
        },
        "f77d644eb65e4944abda280ba4b4314f": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "f115f6b78af848d9a6a8adf09000b240": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_f893fceb04924b6680cffc9c4dcb328f",
            "_dom_classes": [],
            "description": "100%",
            "_model_name": "FloatProgressModel",
            "bar_style": "success",
            "max": 122,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 122,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_b9141fd5d2d44f91809f8915a58221ba"
          }
        },
        "0c0a0fbecd454dd5aff5738f95e3cb97": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "state": {
            "_view_name": "HTMLView",
            "style": "IPY_MODEL_8f652081a46e43709a7a4bf6ba4ba842",
            "_dom_classes": [],
            "description": "",
            "_model_name": "HTMLModel",
            "placeholder": "​",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": " 122/122 [01:16&lt;00:00,  1.59it/s]",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_1c910bc5cf2b4a47909a1c916d779d06"
          }
        },
        "f893fceb04924b6680cffc9c4dcb328f": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "initial",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "b9141fd5d2d44f91809f8915a58221ba": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "8f652081a46e43709a7a4bf6ba4ba842": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "1c910bc5cf2b4a47909a1c916d779d06": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "515e1330a46843b4ad07804a9a1b22a0": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "state": {
            "_view_name": "HBoxView",
            "_dom_classes": [],
            "_model_name": "HBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_7f3ce96395a2433d9a38ff25bc7187f5",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_866e8cd2336f415a9a7887a1f421b57e",
              "IPY_MODEL_3937ca10556d4616876204f15794a5c7"
            ]
          }
        },
        "7f3ce96395a2433d9a38ff25bc7187f5": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "866e8cd2336f415a9a7887a1f421b57e": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_2e7803748890446a9d04d4f09f321780",
            "_dom_classes": [],
            "description": "100%",
            "_model_name": "FloatProgressModel",
            "bar_style": "success",
            "max": 122,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 122,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_32b6387f5184489991c82ee796374f94"
          }
        },
        "3937ca10556d4616876204f15794a5c7": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "state": {
            "_view_name": "HTMLView",
            "style": "IPY_MODEL_10a21391cb1f40b8b311b0bbfbb1a798",
            "_dom_classes": [],
            "description": "",
            "_model_name": "HTMLModel",
            "placeholder": "​",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": " 122/122 [00:39&lt;00:00,  3.12it/s]",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_ce9e49948f584be5a2eec990488ecd70"
          }
        },
        "2e7803748890446a9d04d4f09f321780": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "initial",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "32b6387f5184489991c82ee796374f94": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "10a21391cb1f40b8b311b0bbfbb1a798": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "ce9e49948f584be5a2eec990488ecd70": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "17be2e9f1b72417596b57499697cd508": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "state": {
            "_view_name": "HBoxView",
            "_dom_classes": [],
            "_model_name": "HBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_6fafed0611e34c1e95f8e381884b4ecb",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_94f88f1307f74bd08ae4e80307e6f655",
              "IPY_MODEL_6455e7cb1764472d9d04b2da03bceafa"
            ]
          }
        },
        "6fafed0611e34c1e95f8e381884b4ecb": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "94f88f1307f74bd08ae4e80307e6f655": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_3a9430bac6d44540a18f1570202c71c8",
            "_dom_classes": [],
            "description": "100%",
            "_model_name": "FloatProgressModel",
            "bar_style": "success",
            "max": 122,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 122,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_a7d92fe7ec5b48f5b830e4ac9657acff"
          }
        },
        "6455e7cb1764472d9d04b2da03bceafa": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "state": {
            "_view_name": "HTMLView",
            "style": "IPY_MODEL_419fcc4118c14804b6edefafcfe3c79e",
            "_dom_classes": [],
            "description": "",
            "_model_name": "HTMLModel",
            "placeholder": "​",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": " 122/122 [21:01&lt;00:00, 10.34s/it]",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_02c41b595d3d4b449bc94d6b1d5695bf"
          }
        },
        "3a9430bac6d44540a18f1570202c71c8": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "initial",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "a7d92fe7ec5b48f5b830e4ac9657acff": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "419fcc4118c14804b6edefafcfe3c79e": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "02c41b595d3d4b449bc94d6b1d5695bf": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "955ac6cb1af54229a777d9b0b288e1f9": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "state": {
            "_view_name": "HBoxView",
            "_dom_classes": [],
            "_model_name": "HBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_24982574e5ce4aab95364ae81be85e63",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_19e736bf58444ab19e2ca3be359edea5",
              "IPY_MODEL_efde2ff89655456abdc2f75cbd7eb40a"
            ]
          }
        },
        "24982574e5ce4aab95364ae81be85e63": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "19e736bf58444ab19e2ca3be359edea5": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_91160b5eb93e48c4b8244159068bbe33",
            "_dom_classes": [],
            "description": "100%",
            "_model_name": "FloatProgressModel",
            "bar_style": "success",
            "max": 122,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 122,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_683c1c7f5f4844b8b6a12a878b766d4b"
          }
        },
        "efde2ff89655456abdc2f75cbd7eb40a": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "state": {
            "_view_name": "HTMLView",
            "style": "IPY_MODEL_82229427558b430db6c416cc0abbdbf0",
            "_dom_classes": [],
            "description": "",
            "_model_name": "HTMLModel",
            "placeholder": "​",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": " 122/122 [03:42&lt;00:00,  1.83s/it]",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_b663f8e1824e456b944376b010801cfc"
          }
        },
        "91160b5eb93e48c4b8244159068bbe33": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "initial",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "683c1c7f5f4844b8b6a12a878b766d4b": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "82229427558b430db6c416cc0abbdbf0": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "b663f8e1824e456b944376b010801cfc": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "50c31074cb394228ab92b91eaa7c71e2": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "state": {
            "_view_name": "HBoxView",
            "_dom_classes": [],
            "_model_name": "HBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_ee5d57929f7c443ba8dc6d764738d24c",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_2da00e2b49764384a404d5323ce366f1",
              "IPY_MODEL_c4e2828c7d3748dda6c6156c7e31e562"
            ]
          }
        },
        "ee5d57929f7c443ba8dc6d764738d24c": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "2da00e2b49764384a404d5323ce366f1": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_d22158e5fa724a6f84c875642a1347ac",
            "_dom_classes": [],
            "description": "100%",
            "_model_name": "FloatProgressModel",
            "bar_style": "success",
            "max": 122,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 122,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_e1d0dabcd9f54ab0aa80e6c920329884"
          }
        },
        "c4e2828c7d3748dda6c6156c7e31e562": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "state": {
            "_view_name": "HTMLView",
            "style": "IPY_MODEL_9b8ea8ad34b549c69fa8eac8d71cbc80",
            "_dom_classes": [],
            "description": "",
            "_model_name": "HTMLModel",
            "placeholder": "​",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": " 122/122 [03:05&lt;00:00,  1.52s/it]",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_e1c067c8c2eb4d90bac089ceb6044166"
          }
        },
        "d22158e5fa724a6f84c875642a1347ac": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "initial",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "e1d0dabcd9f54ab0aa80e6c920329884": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "9b8ea8ad34b549c69fa8eac8d71cbc80": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "e1c067c8c2eb4d90bac089ceb6044166": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "4cb5665d0fd9465896e1a434caa41834": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "state": {
            "_view_name": "HBoxView",
            "_dom_classes": [],
            "_model_name": "HBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_2ad26efe35534dce840262de78b11d7d",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_f1bc4b3458434ba89aafbbd0ba7f19e8",
              "IPY_MODEL_8d417ad6f92b4bff99068ac04394f1cf"
            ]
          }
        },
        "2ad26efe35534dce840262de78b11d7d": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "f1bc4b3458434ba89aafbbd0ba7f19e8": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_2a015e3a67664010bc46bdf633dd12d3",
            "_dom_classes": [],
            "description": "100%",
            "_model_name": "FloatProgressModel",
            "bar_style": "success",
            "max": 122,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 122,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_13ed8fd3f1a840279e70ab62752298cb"
          }
        },
        "8d417ad6f92b4bff99068ac04394f1cf": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "state": {
            "_view_name": "HTMLView",
            "style": "IPY_MODEL_37fab2807e164da78b095cd1ef0cdcb4",
            "_dom_classes": [],
            "description": "",
            "_model_name": "HTMLModel",
            "placeholder": "​",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": " 122/122 [02:28&lt;00:00,  1.22s/it]",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_432b42b030f74f2e8fb3e747a2090f05"
          }
        },
        "2a015e3a67664010bc46bdf633dd12d3": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "initial",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "13ed8fd3f1a840279e70ab62752298cb": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "37fab2807e164da78b095cd1ef0cdcb4": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "432b42b030f74f2e8fb3e747a2090f05": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "f0740f03b4d44487aa8bbef91adbd73d": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "state": {
            "_view_name": "HBoxView",
            "_dom_classes": [],
            "_model_name": "HBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_0f431a1fcf804e38877cd0f135c8f4dd",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_9252c6ebb769405cb95c293a38e6747f",
              "IPY_MODEL_3e41bbc2e7804de3a0867a3a09a06def"
            ]
          }
        },
        "0f431a1fcf804e38877cd0f135c8f4dd": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "9252c6ebb769405cb95c293a38e6747f": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_db314d00bddf43b2b12b1749b285192e",
            "_dom_classes": [],
            "description": "100%",
            "_model_name": "FloatProgressModel",
            "bar_style": "success",
            "max": 122,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 122,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_e64ff0943e724731aaca3a5bfcc03c24"
          }
        },
        "3e41bbc2e7804de3a0867a3a09a06def": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "state": {
            "_view_name": "HTMLView",
            "style": "IPY_MODEL_5c4ab401d2a74fc2b96438fd78eb3363",
            "_dom_classes": [],
            "description": "",
            "_model_name": "HTMLModel",
            "placeholder": "​",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": " 122/122 [01:51&lt;00:00,  1.09it/s]",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_24a02883cc3c493fa679e56b65402aa8"
          }
        },
        "db314d00bddf43b2b12b1749b285192e": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "initial",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "e64ff0943e724731aaca3a5bfcc03c24": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "5c4ab401d2a74fc2b96438fd78eb3363": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "24a02883cc3c493fa679e56b65402aa8": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "9a8f49bd5d624225bbbe73153fe3534b": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "state": {
            "_view_name": "HBoxView",
            "_dom_classes": [],
            "_model_name": "HBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_4b2cffe5f51a4bd6933a2463acf3aac9",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_8f24489525a843e89cdf2acc8d660f3e",
              "IPY_MODEL_d17268eca5464a6f95c26029d566a500"
            ]
          }
        },
        "4b2cffe5f51a4bd6933a2463acf3aac9": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "8f24489525a843e89cdf2acc8d660f3e": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_fc73fe469b3d4503a817e9cb267b268e",
            "_dom_classes": [],
            "description": "100%",
            "_model_name": "FloatProgressModel",
            "bar_style": "success",
            "max": 122,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 122,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_83bbb70ac3a84ba18887513b064de0fa"
          }
        },
        "d17268eca5464a6f95c26029d566a500": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "state": {
            "_view_name": "HTMLView",
            "style": "IPY_MODEL_50ada840e39a420892736e7b9945e620",
            "_dom_classes": [],
            "description": "",
            "_model_name": "HTMLModel",
            "placeholder": "​",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": " 122/122 [01:13&lt;00:00,  1.65it/s]",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_cca0f7b474554beabe43d6ed5a0e9978"
          }
        },
        "fc73fe469b3d4503a817e9cb267b268e": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "initial",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "83bbb70ac3a84ba18887513b064de0fa": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "50ada840e39a420892736e7b9945e620": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "cca0f7b474554beabe43d6ed5a0e9978": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "eb01b01507a2487e86ef9d62d0d8876a": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "state": {
            "_view_name": "HBoxView",
            "_dom_classes": [],
            "_model_name": "HBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_5bb4d7ff89bc4307a68cbaa4956c41f0",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_64e51eab8e1b428d96102df93d3a6df1",
              "IPY_MODEL_3e78ba41cc824e4895dd50b99045ed53"
            ]
          }
        },
        "5bb4d7ff89bc4307a68cbaa4956c41f0": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "64e51eab8e1b428d96102df93d3a6df1": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_ab743f6d1e5b496db0f1ab4f23db0de9",
            "_dom_classes": [],
            "description": "100%",
            "_model_name": "FloatProgressModel",
            "bar_style": "success",
            "max": 122,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 122,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_d48ab93fe7bb4753b3a1b30ade783f36"
          }
        },
        "3e78ba41cc824e4895dd50b99045ed53": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "state": {
            "_view_name": "HTMLView",
            "style": "IPY_MODEL_d0889d730b6f44fe98de8f3b7bd6da93",
            "_dom_classes": [],
            "description": "",
            "_model_name": "HTMLModel",
            "placeholder": "​",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": " 122/122 [00:36&lt;00:00,  3.30it/s]",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_92a2b179681e4bc4a68e2702e524c053"
          }
        },
        "ab743f6d1e5b496db0f1ab4f23db0de9": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "initial",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "d48ab93fe7bb4753b3a1b30ade783f36": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "d0889d730b6f44fe98de8f3b7bd6da93": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "92a2b179681e4bc4a68e2702e524c053": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "6231b8421edb4457aa4a350a303f71b7": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "state": {
            "_view_name": "HBoxView",
            "_dom_classes": [],
            "_model_name": "HBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_a2001bf4b5124bd0ab337d77e5bd351c",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_cffb04402e6746a887ad8af691102df2",
              "IPY_MODEL_d9adcd55a3c744d38b4c28dea81ae512"
            ]
          }
        },
        "a2001bf4b5124bd0ab337d77e5bd351c": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "cffb04402e6746a887ad8af691102df2": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_89b4e5b9f8194a36b140148434a0849b",
            "_dom_classes": [],
            "description": "100%",
            "_model_name": "FloatProgressModel",
            "bar_style": "success",
            "max": 122,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 122,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_97ee7d72afa548e9988822bea0d3505f"
          }
        },
        "d9adcd55a3c744d38b4c28dea81ae512": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "state": {
            "_view_name": "HTMLView",
            "style": "IPY_MODEL_31d5bd35e1224aefa39b8ce20c4e52af",
            "_dom_classes": [],
            "description": "",
            "_model_name": "HTMLModel",
            "placeholder": "​",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": " 122/122 [01:51&lt;00:00,  1.09it/s]",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_bab8109d3fb84c80a187a2a3d51f0782"
          }
        },
        "89b4e5b9f8194a36b140148434a0849b": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "initial",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "97ee7d72afa548e9988822bea0d3505f": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "31d5bd35e1224aefa39b8ce20c4e52af": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "bab8109d3fb84c80a187a2a3d51f0782": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "72a3c221c9784817a35069edb416329c": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "state": {
            "_view_name": "HBoxView",
            "_dom_classes": [],
            "_model_name": "HBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_3d7eb43cf24944f9a1bd50af6983eef2",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_c02e67bdff66495cbd391b8cc0309823",
              "IPY_MODEL_315298ea674c4cf19f28d183f5c0248a"
            ]
          }
        },
        "3d7eb43cf24944f9a1bd50af6983eef2": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "c02e67bdff66495cbd391b8cc0309823": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_385068a8372b4b139f0a636207b4e5c6",
            "_dom_classes": [],
            "description": "100%",
            "_model_name": "FloatProgressModel",
            "bar_style": "success",
            "max": 122,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 122,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_8b3c2c712b2c4429a35bc890705473d2"
          }
        },
        "315298ea674c4cf19f28d183f5c0248a": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "state": {
            "_view_name": "HTMLView",
            "style": "IPY_MODEL_f143bd0a6c7c4c1e9b7d4615b588b952",
            "_dom_classes": [],
            "description": "",
            "_model_name": "HTMLModel",
            "placeholder": "​",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": " 122/122 [01:14&lt;00:00,  1.64it/s]",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_6a59347c11fd4163b6407bac26ac917c"
          }
        },
        "385068a8372b4b139f0a636207b4e5c6": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "initial",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "8b3c2c712b2c4429a35bc890705473d2": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "f143bd0a6c7c4c1e9b7d4615b588b952": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "6a59347c11fd4163b6407bac26ac917c": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "681767ac2aab418289f9a233e92493d0": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "state": {
            "_view_name": "HBoxView",
            "_dom_classes": [],
            "_model_name": "HBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_bd69ab8d43094f4592ef4ce9c307eaad",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_4b94b3f9a2a34dfb89c897e111804a0d",
              "IPY_MODEL_93d230af1405447f8cbcefa6135501d1"
            ]
          }
        },
        "bd69ab8d43094f4592ef4ce9c307eaad": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "4b94b3f9a2a34dfb89c897e111804a0d": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_476b336423984400a39ef19b19e88e41",
            "_dom_classes": [],
            "description": "100%",
            "_model_name": "FloatProgressModel",
            "bar_style": "success",
            "max": 122,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 122,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_907114f44a3e479e83512f6dc2358b07"
          }
        },
        "93d230af1405447f8cbcefa6135501d1": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "state": {
            "_view_name": "HTMLView",
            "style": "IPY_MODEL_b8de3f7993234c158ed3a07498a16ee3",
            "_dom_classes": [],
            "description": "",
            "_model_name": "HTMLModel",
            "placeholder": "​",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": " 122/122 [00:37&lt;00:00,  3.29it/s]",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_b577c90cea5149e9adde7538669de22f"
          }
        },
        "476b336423984400a39ef19b19e88e41": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "initial",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "907114f44a3e479e83512f6dc2358b07": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "b8de3f7993234c158ed3a07498a16ee3": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "b577c90cea5149e9adde7538669de22f": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "c3ce450bef9c41e39570d7038e54c7c9": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "state": {
            "_view_name": "HBoxView",
            "_dom_classes": [],
            "_model_name": "HBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_4a018afa908d4cf0a22a83c0857aa636",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_c2d3f45be8b34d969cd51188fcf20039",
              "IPY_MODEL_99ba27638f894eae8ab2399afbaf8622"
            ]
          }
        },
        "4a018afa908d4cf0a22a83c0857aa636": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "c2d3f45be8b34d969cd51188fcf20039": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_2e95d3f14d0745b4ae8518d803ae1514",
            "_dom_classes": [],
            "description": "100%",
            "_model_name": "FloatProgressModel",
            "bar_style": "success",
            "max": 122,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 122,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_0ceefba161e34d1aa6ecb927ce01e623"
          }
        },
        "99ba27638f894eae8ab2399afbaf8622": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "state": {
            "_view_name": "HTMLView",
            "style": "IPY_MODEL_46ee81faf5a3460c9a262529a5fdd384",
            "_dom_classes": [],
            "description": "",
            "_model_name": "HTMLModel",
            "placeholder": "​",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": " 122/122 [05:33&lt;00:00,  2.73s/it]",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_1fafb3379fd24874906e62381335b525"
          }
        },
        "2e95d3f14d0745b4ae8518d803ae1514": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "initial",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "0ceefba161e34d1aa6ecb927ce01e623": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "46ee81faf5a3460c9a262529a5fdd384": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "1fafb3379fd24874906e62381335b525": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "1c6c5e071845477ca1e69c6e87fd18cd": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "state": {
            "_view_name": "HBoxView",
            "_dom_classes": [],
            "_model_name": "HBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_b9c3ba918a5c49cdbb801e846c9be4fa",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_50deef9ace7c4b31bf571baf40f03e81",
              "IPY_MODEL_b976d6abb40944729dacd6c7224af437"
            ]
          }
        },
        "b9c3ba918a5c49cdbb801e846c9be4fa": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "50deef9ace7c4b31bf571baf40f03e81": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_c598d073398743c9ad1c71e5002151e7",
            "_dom_classes": [],
            "description": "100%",
            "_model_name": "FloatProgressModel",
            "bar_style": "success",
            "max": 122,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 122,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_aa06fcf5481446918631780b8a445ee0"
          }
        },
        "b976d6abb40944729dacd6c7224af437": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "state": {
            "_view_name": "HTMLView",
            "style": "IPY_MODEL_904da6624c9d458194f111d0f2ed6897",
            "_dom_classes": [],
            "description": "",
            "_model_name": "HTMLModel",
            "placeholder": "​",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": " 122/122 [04:55&lt;00:00,  2.42s/it]",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_3f0af9984dc9460d9ecae0cb08617706"
          }
        },
        "c598d073398743c9ad1c71e5002151e7": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "initial",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "aa06fcf5481446918631780b8a445ee0": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "904da6624c9d458194f111d0f2ed6897": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "3f0af9984dc9460d9ecae0cb08617706": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "152af172e8a447cea71db59bba7afa2d": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "state": {
            "_view_name": "HBoxView",
            "_dom_classes": [],
            "_model_name": "HBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_1c28b8ba0f9942bc892b83cc7e47f745",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_a67969ddc6374c4eb52e5a9b66266ecd",
              "IPY_MODEL_523291fbc691411eb0f418d8c21495a8"
            ]
          }
        },
        "1c28b8ba0f9942bc892b83cc7e47f745": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "a67969ddc6374c4eb52e5a9b66266ecd": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_c3359ee9648a4a22b70154283964e70b",
            "_dom_classes": [],
            "description": "100%",
            "_model_name": "FloatProgressModel",
            "bar_style": "success",
            "max": 122,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 122,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_8465b4fc0590494785c338e6cbaaec1a"
          }
        },
        "523291fbc691411eb0f418d8c21495a8": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "state": {
            "_view_name": "HTMLView",
            "style": "IPY_MODEL_46872b41d0e44f5f919f942e67b016ec",
            "_dom_classes": [],
            "description": "",
            "_model_name": "HTMLModel",
            "placeholder": "​",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": " 122/122 [04:18&lt;00:00,  2.12s/it]",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_7be7c0240087430cb648b8e7c0f1b040"
          }
        },
        "c3359ee9648a4a22b70154283964e70b": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "initial",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "8465b4fc0590494785c338e6cbaaec1a": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "46872b41d0e44f5f919f942e67b016ec": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "7be7c0240087430cb648b8e7c0f1b040": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "ecb16f65f55942a8a7603667724eb871": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "state": {
            "_view_name": "HBoxView",
            "_dom_classes": [],
            "_model_name": "HBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_e932a511327347108adc9e54f0a29e9a",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_9ec998fbbd154f578b3e061b0f6dd9ad",
              "IPY_MODEL_9a32a6a34a2f4090abfcb2e499b2222b"
            ]
          }
        },
        "e932a511327347108adc9e54f0a29e9a": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "9ec998fbbd154f578b3e061b0f6dd9ad": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_3ee8cf42f777456b9c64cf464bfa1c98",
            "_dom_classes": [],
            "description": "100%",
            "_model_name": "FloatProgressModel",
            "bar_style": "success",
            "max": 122,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 122,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_5156fa25d3a64aa7a16fffcb7933de2b"
          }
        },
        "9a32a6a34a2f4090abfcb2e499b2222b": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "state": {
            "_view_name": "HTMLView",
            "style": "IPY_MODEL_2ea1d52d196b455d93b2f47e4b531f34",
            "_dom_classes": [],
            "description": "",
            "_model_name": "HTMLModel",
            "placeholder": "​",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": " 122/122 [03:41&lt;00:00,  1.82s/it]",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_0bec2ea8f4d447249365e1649f1cc59f"
          }
        },
        "3ee8cf42f777456b9c64cf464bfa1c98": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "initial",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "5156fa25d3a64aa7a16fffcb7933de2b": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "2ea1d52d196b455d93b2f47e4b531f34": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "0bec2ea8f4d447249365e1649f1cc59f": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "b678ccc2b4f0470a9fbe4d058b66e989": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "state": {
            "_view_name": "HBoxView",
            "_dom_classes": [],
            "_model_name": "HBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_97a1c765027041d3b6d5a77c0b20e0fe",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_71aaa4cea13f4ae792c4837a59da4643",
              "IPY_MODEL_dbcc3ee0a1b146af82dbc10723eebe4d"
            ]
          }
        },
        "97a1c765027041d3b6d5a77c0b20e0fe": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "71aaa4cea13f4ae792c4837a59da4643": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_a1d92f03abef4150a6f5ec20d5cc6c4d",
            "_dom_classes": [],
            "description": "100%",
            "_model_name": "FloatProgressModel",
            "bar_style": "success",
            "max": 122,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 122,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_02c7955502d54c0faf2191e8e426845a"
          }
        },
        "dbcc3ee0a1b146af82dbc10723eebe4d": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "state": {
            "_view_name": "HTMLView",
            "style": "IPY_MODEL_0080494346544177aeb7dd4e6f3dd16f",
            "_dom_classes": [],
            "description": "",
            "_model_name": "HTMLModel",
            "placeholder": "​",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": " 122/122 [03:04&lt;00:00,  1.51s/it]",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_f96d248bd96048d78339aceb2168dc57"
          }
        },
        "a1d92f03abef4150a6f5ec20d5cc6c4d": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "initial",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "02c7955502d54c0faf2191e8e426845a": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "0080494346544177aeb7dd4e6f3dd16f": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "f96d248bd96048d78339aceb2168dc57": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "1afba5a03bc545c78dc85d7fd60d4af2": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "state": {
            "_view_name": "HBoxView",
            "_dom_classes": [],
            "_model_name": "HBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_0db08c726b7343a9a47a15a4d3d416e2",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_6a857028650643fb9e5912dcd6eafa6a",
              "IPY_MODEL_10c926ef30624f619ecb33e23d81b0a8"
            ]
          }
        },
        "0db08c726b7343a9a47a15a4d3d416e2": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "6a857028650643fb9e5912dcd6eafa6a": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_a1e2a82547c744d1a7bdb1c0132f8f30",
            "_dom_classes": [],
            "description": "100%",
            "_model_name": "FloatProgressModel",
            "bar_style": "success",
            "max": 122,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 122,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_b9ebdabaffcc4934958b92c5b14f3831"
          }
        },
        "10c926ef30624f619ecb33e23d81b0a8": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "state": {
            "_view_name": "HTMLView",
            "style": "IPY_MODEL_464caed6d90d496a8b4d2f9a9fd738b2",
            "_dom_classes": [],
            "description": "",
            "_model_name": "HTMLModel",
            "placeholder": "​",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": " 122/122 [02:27&lt;00:00,  1.21s/it]",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_8c9c37c46b2746368d14b955ec81c9f6"
          }
        },
        "a1e2a82547c744d1a7bdb1c0132f8f30": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "initial",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "b9ebdabaffcc4934958b92c5b14f3831": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "464caed6d90d496a8b4d2f9a9fd738b2": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "8c9c37c46b2746368d14b955ec81c9f6": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "17a7f1c7df534abdb36a90c500ef854f": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "state": {
            "_view_name": "HBoxView",
            "_dom_classes": [],
            "_model_name": "HBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_668419a5f3ba4cd7b8f77baf45dedda0",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_ce8a1c1dcff2427a921fa4ccd2166bba",
              "IPY_MODEL_c860041177f146718198b90ed4db122e"
            ]
          }
        },
        "668419a5f3ba4cd7b8f77baf45dedda0": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "ce8a1c1dcff2427a921fa4ccd2166bba": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_f1c38d12a6384ea0a3b2c44f162014bc",
            "_dom_classes": [],
            "description": "100%",
            "_model_name": "FloatProgressModel",
            "bar_style": "success",
            "max": 122,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 122,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_d3a9c12a100b41288dde8e4f4ba69add"
          }
        },
        "c860041177f146718198b90ed4db122e": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "state": {
            "_view_name": "HTMLView",
            "style": "IPY_MODEL_8e18485a46704019803d6671533f5f02",
            "_dom_classes": [],
            "description": "",
            "_model_name": "HTMLModel",
            "placeholder": "​",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": " 122/122 [01:50&lt;00:00,  1.10it/s]",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_396620bfbca6472a9512b64e69f9cea1"
          }
        },
        "f1c38d12a6384ea0a3b2c44f162014bc": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "initial",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "d3a9c12a100b41288dde8e4f4ba69add": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "8e18485a46704019803d6671533f5f02": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "396620bfbca6472a9512b64e69f9cea1": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "2585a6969126469787581ee4fc5ed965": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "state": {
            "_view_name": "HBoxView",
            "_dom_classes": [],
            "_model_name": "HBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_9b65fe04c5c54186ba27b23c9216b409",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_a5feca3c862f44cfbb23733927dba697",
              "IPY_MODEL_0aee513b54724884bf1f661f5cd940c9"
            ]
          }
        },
        "9b65fe04c5c54186ba27b23c9216b409": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "a5feca3c862f44cfbb23733927dba697": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_3c99f4a454684b2e808bb47b273ad64f",
            "_dom_classes": [],
            "description": "100%",
            "_model_name": "FloatProgressModel",
            "bar_style": "success",
            "max": 122,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 122,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_7e207bb576774f0c820974c64f26cbf0"
          }
        },
        "0aee513b54724884bf1f661f5cd940c9": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "state": {
            "_view_name": "HTMLView",
            "style": "IPY_MODEL_fca3a970b53b4e40b015e985f277be59",
            "_dom_classes": [],
            "description": "",
            "_model_name": "HTMLModel",
            "placeholder": "​",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": " 122/122 [01:14&lt;00:00,  1.65it/s]",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_7260c283caa74c4bbad32323ee64fd27"
          }
        },
        "3c99f4a454684b2e808bb47b273ad64f": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "initial",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "7e207bb576774f0c820974c64f26cbf0": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "fca3a970b53b4e40b015e985f277be59": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "7260c283caa74c4bbad32323ee64fd27": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "f70c017c0c4144a08dc1cea28851cd9f": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "state": {
            "_view_name": "HBoxView",
            "_dom_classes": [],
            "_model_name": "HBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_1915ec79cce648a480b9714ff0350790",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_8ec0f5f219d54860aa8e78dadb68c333",
              "IPY_MODEL_3ae574fe801d4a8c89508b3bb9280b67"
            ]
          }
        },
        "1915ec79cce648a480b9714ff0350790": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "8ec0f5f219d54860aa8e78dadb68c333": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_e097c6defadc45efa2aefa37d8222bc3",
            "_dom_classes": [],
            "description": "100%",
            "_model_name": "FloatProgressModel",
            "bar_style": "success",
            "max": 122,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 122,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_578e231b3c4343888bb0f4a8d8a7ebc4"
          }
        },
        "3ae574fe801d4a8c89508b3bb9280b67": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "state": {
            "_view_name": "HTMLView",
            "style": "IPY_MODEL_4458ee112bce43ff9a43278787bef1f5",
            "_dom_classes": [],
            "description": "",
            "_model_name": "HTMLModel",
            "placeholder": "​",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": " 122/122 [00:37&lt;00:00,  3.28it/s]",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_89053ab068984b3b898b35ccbdd492f4"
          }
        },
        "e097c6defadc45efa2aefa37d8222bc3": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "initial",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "578e231b3c4343888bb0f4a8d8a7ebc4": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "4458ee112bce43ff9a43278787bef1f5": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "89053ab068984b3b898b35ccbdd492f4": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "0b142ab184ce4a28ac1687cc3d00abbe": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "state": {
            "_view_name": "HBoxView",
            "_dom_classes": [],
            "_model_name": "HBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_5da4637f57744c368c294e5baecc84b3",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_a21a0fba91b641f4a4dc25e6eb66761f",
              "IPY_MODEL_753ea699d6ec468f842179aa114d4e44"
            ]
          }
        },
        "5da4637f57744c368c294e5baecc84b3": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "a21a0fba91b641f4a4dc25e6eb66761f": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_eab96765675240f58b6fe5d3687dbf22",
            "_dom_classes": [],
            "description": "100%",
            "_model_name": "FloatProgressModel",
            "bar_style": "success",
            "max": 122,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 122,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_97df106be5564327a5775ff2d8e36d25"
          }
        },
        "753ea699d6ec468f842179aa114d4e44": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "state": {
            "_view_name": "HTMLView",
            "style": "IPY_MODEL_6f8c71fae2e8441ca2b7f119f6545933",
            "_dom_classes": [],
            "description": "",
            "_model_name": "HTMLModel",
            "placeholder": "​",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": " 122/122 [03:09&lt;00:00,  1.55s/it]",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_c64eb74102f94f6a9c2c5afbcf6adcc4"
          }
        },
        "eab96765675240f58b6fe5d3687dbf22": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "initial",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "97df106be5564327a5775ff2d8e36d25": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "6f8c71fae2e8441ca2b7f119f6545933": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "c64eb74102f94f6a9c2c5afbcf6adcc4": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "2a62da2d56964555a5152f2da201dc60": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "state": {
            "_view_name": "HBoxView",
            "_dom_classes": [],
            "_model_name": "HBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_f7f059757452452183d4c447850e0093",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_007d23070c88445aa0340975a6e9a725",
              "IPY_MODEL_4e2c22cb49124bb69edd159602b47d05"
            ]
          }
        },
        "f7f059757452452183d4c447850e0093": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "007d23070c88445aa0340975a6e9a725": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_c78d7822dc974892bb9dbc51330ec672",
            "_dom_classes": [],
            "description": "100%",
            "_model_name": "FloatProgressModel",
            "bar_style": "success",
            "max": 108,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 108,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_02a72f80ea4e46eeb83e8101dce37d8a"
          }
        },
        "4e2c22cb49124bb69edd159602b47d05": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "state": {
            "_view_name": "HTMLView",
            "style": "IPY_MODEL_a88df88e7ee348659a73ea6bce585c0a",
            "_dom_classes": [],
            "description": "",
            "_model_name": "HTMLModel",
            "placeholder": "​",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": " 108/108 [29:38&lt;00:00, 16.47s/it]",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_0c4b03261fff425cbc30d6772c73b6c2"
          }
        },
        "c78d7822dc974892bb9dbc51330ec672": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "initial",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "02a72f80ea4e46eeb83e8101dce37d8a": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "a88df88e7ee348659a73ea6bce585c0a": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "0c4b03261fff425cbc30d6772c73b6c2": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "3253bc34f4414e50892e59991ff90298": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "state": {
            "_view_name": "HBoxView",
            "_dom_classes": [],
            "_model_name": "HBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_3f920d407a6d4a3cb1e97fd55d0f6482",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_2bb18d3f43de406490f463a5f354376e",
              "IPY_MODEL_3edf9a897d384b698af6a9062ed85626"
            ]
          }
        },
        "3f920d407a6d4a3cb1e97fd55d0f6482": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "2bb18d3f43de406490f463a5f354376e": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_aed306484cb0438d96cadc4bcc2d75ae",
            "_dom_classes": [],
            "description": "100%",
            "_model_name": "FloatProgressModel",
            "bar_style": "success",
            "max": 108,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 108,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_83015dae1e1e4d5c9b987d3c47155af6"
          }
        },
        "3edf9a897d384b698af6a9062ed85626": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "state": {
            "_view_name": "HTMLView",
            "style": "IPY_MODEL_e502626d1fea48999e5079d9b6b49f00",
            "_dom_classes": [],
            "description": "",
            "_model_name": "HTMLModel",
            "placeholder": "​",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": " 108/108 [01:44&lt;00:00,  1.04it/s]",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_ec8c59412679409f80bf8b48874b85ae"
          }
        },
        "aed306484cb0438d96cadc4bcc2d75ae": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "initial",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "83015dae1e1e4d5c9b987d3c47155af6": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "e502626d1fea48999e5079d9b6b49f00": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "ec8c59412679409f80bf8b48874b85ae": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "a17f267672e04372a28a3a1fe4b810de": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "state": {
            "_view_name": "HBoxView",
            "_dom_classes": [],
            "_model_name": "HBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_8c7b420ce99a41ec87804630ba08f8f8",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_be63420f17164d3abc76cf53e3fddf40",
              "IPY_MODEL_d2d7b0e9ec9544948a5f53944eb52bb2"
            ]
          }
        },
        "8c7b420ce99a41ec87804630ba08f8f8": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "be63420f17164d3abc76cf53e3fddf40": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_62efc56c26494f06a9e4dbfef974e991",
            "_dom_classes": [],
            "description": "100%",
            "_model_name": "FloatProgressModel",
            "bar_style": "success",
            "max": 108,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 108,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_ac12a26b89d54f4592f6a3937f14ea12"
          }
        },
        "d2d7b0e9ec9544948a5f53944eb52bb2": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "state": {
            "_view_name": "HTMLView",
            "style": "IPY_MODEL_45eb392693e049bea9c15816e5ace2d3",
            "_dom_classes": [],
            "description": "",
            "_model_name": "HTMLModel",
            "placeholder": "​",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": " 108/108 [05:14&lt;00:00,  2.91s/it]",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_7a58c7e381414ed9b45028d5687748bc"
          }
        },
        "62efc56c26494f06a9e4dbfef974e991": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "initial",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "ac12a26b89d54f4592f6a3937f14ea12": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "45eb392693e049bea9c15816e5ace2d3": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "7a58c7e381414ed9b45028d5687748bc": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "65bbb0514907488185361bebc85caa09": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "state": {
            "_view_name": "HBoxView",
            "_dom_classes": [],
            "_model_name": "HBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_78081f2562fe4db7bb2b8d5807417630",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_7eb57d824d3a4ac99e0914b3d67d8771",
              "IPY_MODEL_f31811530a984e9fa342d924688565c0"
            ]
          }
        },
        "78081f2562fe4db7bb2b8d5807417630": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "7eb57d824d3a4ac99e0914b3d67d8771": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_345e8a0c5b604f21b9a43a068d6ba59e",
            "_dom_classes": [],
            "description": "100%",
            "_model_name": "FloatProgressModel",
            "bar_style": "success",
            "max": 108,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 108,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_7ddb0b3c5c8247bf863d9503bbce5931"
          }
        },
        "f31811530a984e9fa342d924688565c0": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "state": {
            "_view_name": "HTMLView",
            "style": "IPY_MODEL_0a848d6ea00b4e7d8acd87e1a0953262",
            "_dom_classes": [],
            "description": "",
            "_model_name": "HTMLModel",
            "placeholder": "​",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": " 108/108 [03:30&lt;00:00,  1.94s/it]",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_b16fc225e724491d84d0adfd7d107070"
          }
        },
        "345e8a0c5b604f21b9a43a068d6ba59e": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "initial",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "7ddb0b3c5c8247bf863d9503bbce5931": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "0a848d6ea00b4e7d8acd87e1a0953262": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "b16fc225e724491d84d0adfd7d107070": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "556306a98979421a9ff717cbea96fe87": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "state": {
            "_view_name": "HBoxView",
            "_dom_classes": [],
            "_model_name": "HBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_a10e3b3436c246eca67c4b47f3fb6361",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_8f2139f6b9fe4e33a9af8c16970dfb7b",
              "IPY_MODEL_1e8eb92ad02c4043a75bb26635345435"
            ]
          }
        },
        "a10e3b3436c246eca67c4b47f3fb6361": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "8f2139f6b9fe4e33a9af8c16970dfb7b": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_22574e982f6d4c26ae0d68fe39ffc05d",
            "_dom_classes": [],
            "description": "100%",
            "_model_name": "FloatProgressModel",
            "bar_style": "success",
            "max": 108,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 108,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_a181b02a021e4ee4b65923166e7d7779"
          }
        },
        "1e8eb92ad02c4043a75bb26635345435": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "state": {
            "_view_name": "HTMLView",
            "style": "IPY_MODEL_604f487ecb8d4b82a190e7641f51fbec",
            "_dom_classes": [],
            "description": "",
            "_model_name": "HTMLModel",
            "placeholder": "​",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": " 108/108 [01:46&lt;00:00,  1.02it/s]",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_5abed2ca39fd47b5bb6866eaaa2975e1"
          }
        },
        "22574e982f6d4c26ae0d68fe39ffc05d": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "initial",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "a181b02a021e4ee4b65923166e7d7779": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "604f487ecb8d4b82a190e7641f51fbec": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "5abed2ca39fd47b5bb6866eaaa2975e1": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "e168e7a1ee364980b9412689d363eb58": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "state": {
            "_view_name": "HBoxView",
            "_dom_classes": [],
            "_model_name": "HBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_937dc7fdd6874c2ca8c657b53496e010",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_dbd79ae484f942fc8ba2bd6a5366daa4",
              "IPY_MODEL_baaf90e4d85049df97b5ea8d828fccf8"
            ]
          }
        },
        "937dc7fdd6874c2ca8c657b53496e010": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "dbd79ae484f942fc8ba2bd6a5366daa4": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_6cbc56045d8d40b2bfad1e17edc35395",
            "_dom_classes": [],
            "description": "100%",
            "_model_name": "FloatProgressModel",
            "bar_style": "success",
            "max": 108,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 108,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_adef127045414cf68104e584166ca800"
          }
        },
        "baaf90e4d85049df97b5ea8d828fccf8": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "state": {
            "_view_name": "HTMLView",
            "style": "IPY_MODEL_dcdeb3d774194ffebfae5a49afaadcf0",
            "_dom_classes": [],
            "description": "",
            "_model_name": "HTMLModel",
            "placeholder": "​",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": " 108/108 [20:57&lt;00:00, 11.64s/it]",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_17fed8310f7c4ffebcbbbc5b58b680ba"
          }
        },
        "6cbc56045d8d40b2bfad1e17edc35395": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "initial",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "adef127045414cf68104e584166ca800": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "dcdeb3d774194ffebfae5a49afaadcf0": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "17fed8310f7c4ffebcbbbc5b58b680ba": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "b5380afd14934543940d9f274472fd16": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "state": {
            "_view_name": "HBoxView",
            "_dom_classes": [],
            "_model_name": "HBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_aef5269ea55546efa89958b0affd5873",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_d79dc655285f4738890f6ba7242e0d71",
              "IPY_MODEL_ab2cd9b296244fe0bf359fb9ab1e744b"
            ]
          }
        },
        "aef5269ea55546efa89958b0affd5873": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "d79dc655285f4738890f6ba7242e0d71": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_21107c820e86479bb72738348e91577a",
            "_dom_classes": [],
            "description": "100%",
            "_model_name": "FloatProgressModel",
            "bar_style": "success",
            "max": 108,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 108,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_7b6f78d1bb3b4c41bd275af9c2b1c786"
          }
        },
        "ab2cd9b296244fe0bf359fb9ab1e744b": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "state": {
            "_view_name": "HTMLView",
            "style": "IPY_MODEL_8a4c397e22e143f98f525da7c723d78d",
            "_dom_classes": [],
            "description": "",
            "_model_name": "HTMLModel",
            "placeholder": "​",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": " 108/108 [08:44&lt;00:00,  4.85s/it]",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_8798d6ae8773469cbf51e7de0436f128"
          }
        },
        "21107c820e86479bb72738348e91577a": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "initial",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "7b6f78d1bb3b4c41bd275af9c2b1c786": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "8a4c397e22e143f98f525da7c723d78d": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "8798d6ae8773469cbf51e7de0436f128": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "be9adda726fa447aaf333614b1a08626": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "state": {
            "_view_name": "HBoxView",
            "_dom_classes": [],
            "_model_name": "HBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_6c8fc1c0f16f4544ab4dfc944e9f8ef6",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_2a3ce94a781c46d7bc913631808db1f1",
              "IPY_MODEL_6196cabb508b45729a25c8d25cf38119"
            ]
          }
        },
        "6c8fc1c0f16f4544ab4dfc944e9f8ef6": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "2a3ce94a781c46d7bc913631808db1f1": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_249eea800a194dd6b6d5d784f7dbbaaa",
            "_dom_classes": [],
            "description": "100%",
            "_model_name": "FloatProgressModel",
            "bar_style": "success",
            "max": 108,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 108,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_11d09c7828584dd5a76d36950f82f30e"
          }
        },
        "6196cabb508b45729a25c8d25cf38119": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "state": {
            "_view_name": "HTMLView",
            "style": "IPY_MODEL_4ca4b9779fe340688e3555ba8ac2c965",
            "_dom_classes": [],
            "description": "",
            "_model_name": "HTMLModel",
            "placeholder": "​",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": " 108/108 [06:59&lt;00:00,  3.89s/it]",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_76817856bd6e4b8a914fcfb15d0e9e09"
          }
        },
        "249eea800a194dd6b6d5d784f7dbbaaa": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "initial",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "11d09c7828584dd5a76d36950f82f30e": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "4ca4b9779fe340688e3555ba8ac2c965": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "76817856bd6e4b8a914fcfb15d0e9e09": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "6c17e6436e85462a859581592401dbe1": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "state": {
            "_view_name": "HBoxView",
            "_dom_classes": [],
            "_model_name": "HBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_4bae43b66aee4670bdfbcd3420541724",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_6063c9a03c1f4c2499aa7499b675818f",
              "IPY_MODEL_0a84689e542340d88568e27ca57671bf"
            ]
          }
        },
        "4bae43b66aee4670bdfbcd3420541724": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "6063c9a03c1f4c2499aa7499b675818f": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_e66d53c210ec401e82dc29349067e7bc",
            "_dom_classes": [],
            "description": "100%",
            "_model_name": "FloatProgressModel",
            "bar_style": "success",
            "max": 108,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 108,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_697ee44860c84467a879f115cfaf896b"
          }
        },
        "0a84689e542340d88568e27ca57671bf": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "state": {
            "_view_name": "HTMLView",
            "style": "IPY_MODEL_0028d3a2d9e943f28484be907a16791c",
            "_dom_classes": [],
            "description": "",
            "_model_name": "HTMLModel",
            "placeholder": "​",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": " 108/108 [05:15&lt;00:00,  2.92s/it]",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_e349f7dbcaeb46a893f0b9db22adf576"
          }
        },
        "e66d53c210ec401e82dc29349067e7bc": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "initial",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "697ee44860c84467a879f115cfaf896b": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "0028d3a2d9e943f28484be907a16791c": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "e349f7dbcaeb46a893f0b9db22adf576": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "c7b1aecfc2de4b79b911dc9d69e06455": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "state": {
            "_view_name": "HBoxView",
            "_dom_classes": [],
            "_model_name": "HBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_71a60c3b131546a9b330f219bb2c8a73",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_467c47a4cb874b5c9551d8935d2d24eb",
              "IPY_MODEL_22d485e8204d4d8e9fb8377ec1a9772d"
            ]
          }
        },
        "71a60c3b131546a9b330f219bb2c8a73": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "467c47a4cb874b5c9551d8935d2d24eb": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_0cdd608e628f43999ea04e43eb6ad7e7",
            "_dom_classes": [],
            "description": "100%",
            "_model_name": "FloatProgressModel",
            "bar_style": "success",
            "max": 108,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 108,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_bacf72cca2e549e2a547572f3ca833b5"
          }
        },
        "22d485e8204d4d8e9fb8377ec1a9772d": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "state": {
            "_view_name": "HTMLView",
            "style": "IPY_MODEL_121ea4c4b45648de99e0d078d8521cf2",
            "_dom_classes": [],
            "description": "",
            "_model_name": "HTMLModel",
            "placeholder": "​",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": " 108/108 [03:30&lt;00:00,  1.95s/it]",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_79e7b4e05bc0431db731f45b5e789a21"
          }
        },
        "0cdd608e628f43999ea04e43eb6ad7e7": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "initial",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "bacf72cca2e549e2a547572f3ca833b5": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "121ea4c4b45648de99e0d078d8521cf2": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "79e7b4e05bc0431db731f45b5e789a21": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "404f0373348049ec9b8f7e4b05c8555b": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "state": {
            "_view_name": "HBoxView",
            "_dom_classes": [],
            "_model_name": "HBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_fd9f20114a4f48b8bbb3c5412c7da67c",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_e4517bd43aec4e86b64cdeb1ea862c18",
              "IPY_MODEL_9125a34dda074dceba27e6c54513c0e6"
            ]
          }
        },
        "fd9f20114a4f48b8bbb3c5412c7da67c": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "e4517bd43aec4e86b64cdeb1ea862c18": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_9ad240a1ebe34e5ab2924474d5e3c2ae",
            "_dom_classes": [],
            "description": "100%",
            "_model_name": "FloatProgressModel",
            "bar_style": "success",
            "max": 108,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 108,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_fe3734cc16474bdea1dcb6615c76f486"
          }
        },
        "9125a34dda074dceba27e6c54513c0e6": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "state": {
            "_view_name": "HTMLView",
            "style": "IPY_MODEL_14d10a26c46d40ac9b3e6eddfb1a26ba",
            "_dom_classes": [],
            "description": "",
            "_model_name": "HTMLModel",
            "placeholder": "​",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": " 108/108 [01:45&lt;00:00,  1.02it/s]",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_42c1d92d4c2548a9b59537f9cd40b001"
          }
        },
        "9ad240a1ebe34e5ab2924474d5e3c2ae": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "initial",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "fe3734cc16474bdea1dcb6615c76f486": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "14d10a26c46d40ac9b3e6eddfb1a26ba": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "42c1d92d4c2548a9b59537f9cd40b001": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "fb9c37c0f03f4bde86c5970b3f60cd86": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "state": {
            "_view_name": "HBoxView",
            "_dom_classes": [],
            "_model_name": "HBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_c3a0b91b9e28494e853f80f7ae4f9e24",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_33573c8e86344d3794895b15e0f21a3d",
              "IPY_MODEL_3acb58b3314a49718e7c22a6a540b9fe"
            ]
          }
        },
        "c3a0b91b9e28494e853f80f7ae4f9e24": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "33573c8e86344d3794895b15e0f21a3d": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_445b0f7a3c514a5989ca4bbb094086dc",
            "_dom_classes": [],
            "description": "100%",
            "_model_name": "FloatProgressModel",
            "bar_style": "success",
            "max": 108,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 108,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_85f64a38f92940c9bf5f6f21a1c99e27"
          }
        },
        "3acb58b3314a49718e7c22a6a540b9fe": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "state": {
            "_view_name": "HTMLView",
            "style": "IPY_MODEL_755c40a2dd2c41ad84bb188c8c48abf2",
            "_dom_classes": [],
            "description": "",
            "_model_name": "HTMLModel",
            "placeholder": "​",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": " 108/108 [10:29&lt;00:00,  5.83s/it]",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_813030e15c4e4d0caf2e5e24e7774773"
          }
        },
        "445b0f7a3c514a5989ca4bbb094086dc": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "initial",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "85f64a38f92940c9bf5f6f21a1c99e27": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "755c40a2dd2c41ad84bb188c8c48abf2": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "813030e15c4e4d0caf2e5e24e7774773": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "ca50451ca44145be948d1eca81f5840e": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "state": {
            "_view_name": "HBoxView",
            "_dom_classes": [],
            "_model_name": "HBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_0ba15b0d80644bcda0726c1c344077a4",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_fe474c732afb4984856eeee6106b843c",
              "IPY_MODEL_adc46bce95d441128ba350cf9d63aa45"
            ]
          }
        },
        "0ba15b0d80644bcda0726c1c344077a4": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "fe474c732afb4984856eeee6106b843c": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_855db93780664f838bc70ab62e750c4c",
            "_dom_classes": [],
            "description": "100%",
            "_model_name": "FloatProgressModel",
            "bar_style": "success",
            "max": 108,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 108,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_a346cecf936f43ad91fa117c61a7799e"
          }
        },
        "adc46bce95d441128ba350cf9d63aa45": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "state": {
            "_view_name": "HTMLView",
            "style": "IPY_MODEL_9379608a59ea41298ce0833394075f6e",
            "_dom_classes": [],
            "description": "",
            "_model_name": "HTMLModel",
            "placeholder": "​",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": " 108/108 [08:38&lt;00:00,  4.80s/it]",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_9cc7e1dbf4e64fe795d88c82c7b8c579"
          }
        },
        "855db93780664f838bc70ab62e750c4c": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "initial",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "a346cecf936f43ad91fa117c61a7799e": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "9379608a59ea41298ce0833394075f6e": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "9cc7e1dbf4e64fe795d88c82c7b8c579": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "73b3ed4251664a23b92f36c7e40248cb": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "state": {
            "_view_name": "HBoxView",
            "_dom_classes": [],
            "_model_name": "HBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_1e52e40f557f49fdb65fd36d3a63a5ad",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_c5ecc26e6dc0407785d837a5bf6ae4b5",
              "IPY_MODEL_8cc9db429bc548d980f438cd4510fcca"
            ]
          }
        },
        "1e52e40f557f49fdb65fd36d3a63a5ad": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "c5ecc26e6dc0407785d837a5bf6ae4b5": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_3343ec65bf994dfc89089c0e63a9bd09",
            "_dom_classes": [],
            "description": "100%",
            "_model_name": "FloatProgressModel",
            "bar_style": "success",
            "max": 108,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 108,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_aa55f560be054362bb31cd40e4c11343"
          }
        },
        "8cc9db429bc548d980f438cd4510fcca": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "state": {
            "_view_name": "HTMLView",
            "style": "IPY_MODEL_d36af1f404bd48e8b849f00605da37fa",
            "_dom_classes": [],
            "description": "",
            "_model_name": "HTMLModel",
            "placeholder": "​",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": " 108/108 [06:54&lt;00:00,  3.83s/it]",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_a0eb821c3c6b4baa992da3a39a9bd5d9"
          }
        },
        "3343ec65bf994dfc89089c0e63a9bd09": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "initial",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "aa55f560be054362bb31cd40e4c11343": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "d36af1f404bd48e8b849f00605da37fa": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "a0eb821c3c6b4baa992da3a39a9bd5d9": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "e4aeaf3a2efb47739104685e1544123e": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "state": {
            "_view_name": "HBoxView",
            "_dom_classes": [],
            "_model_name": "HBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_6e29c77d40714dd3b03d61a02189dd04",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_b7ce3e41aad04132901301915906b212",
              "IPY_MODEL_c70774ae9c284e539c4c9008e808ca4f"
            ]
          }
        },
        "6e29c77d40714dd3b03d61a02189dd04": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "b7ce3e41aad04132901301915906b212": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_9d2340330db94ed68b8e113840bae72a",
            "_dom_classes": [],
            "description": "100%",
            "_model_name": "FloatProgressModel",
            "bar_style": "success",
            "max": 108,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 108,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_5316128a14c448a7a7c7c4b4897c1155"
          }
        },
        "c70774ae9c284e539c4c9008e808ca4f": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "state": {
            "_view_name": "HTMLView",
            "style": "IPY_MODEL_d999e077806b45299e03ad837a5c2ab9",
            "_dom_classes": [],
            "description": "",
            "_model_name": "HTMLModel",
            "placeholder": "​",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": " 108/108 [05:09&lt;00:00,  2.87s/it]",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_9f28ceb97d3c46f5a52cb4e3a8b0c3ad"
          }
        },
        "9d2340330db94ed68b8e113840bae72a": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "initial",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "5316128a14c448a7a7c7c4b4897c1155": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "d999e077806b45299e03ad837a5c2ab9": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "9f28ceb97d3c46f5a52cb4e3a8b0c3ad": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "c736bff62f39413da50702697a3db16c": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "state": {
            "_view_name": "HBoxView",
            "_dom_classes": [],
            "_model_name": "HBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_0391e9de3a294d87876553878dbd6d3c",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_d255ed34a27d4047a73effdd3dacdd38",
              "IPY_MODEL_e653a4c2719d4cae9449c48aebf8d008"
            ]
          }
        },
        "0391e9de3a294d87876553878dbd6d3c": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "d255ed34a27d4047a73effdd3dacdd38": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_a0a2655b4b5f4926aaac699d56f00203",
            "_dom_classes": [],
            "description": "100%",
            "_model_name": "FloatProgressModel",
            "bar_style": "success",
            "max": 108,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 108,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_c9582612fb3541839c4fa888ad9863a9"
          }
        },
        "e653a4c2719d4cae9449c48aebf8d008": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "state": {
            "_view_name": "HTMLView",
            "style": "IPY_MODEL_642dc73a9c904173bf247ca366350b68",
            "_dom_classes": [],
            "description": "",
            "_model_name": "HTMLModel",
            "placeholder": "​",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": " 108/108 [03:25&lt;00:00,  1.90s/it]",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_f1bf69685f1f439ebb0fc98029e48c8c"
          }
        },
        "a0a2655b4b5f4926aaac699d56f00203": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "initial",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "c9582612fb3541839c4fa888ad9863a9": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "642dc73a9c904173bf247ca366350b68": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "f1bf69685f1f439ebb0fc98029e48c8c": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "9303a86ceb6543e0ac8bd82726612bd4": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "state": {
            "_view_name": "HBoxView",
            "_dom_classes": [],
            "_model_name": "HBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_7edeed2c612447bdb6202f08d8ea5a2d",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_be729396cbdd4281b833e759c9863742",
              "IPY_MODEL_3a8caf2cbad34b69aca5a0e0d4dfc388"
            ]
          }
        },
        "7edeed2c612447bdb6202f08d8ea5a2d": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "be729396cbdd4281b833e759c9863742": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_df18ce77d7b240449d68af8a8b6bb56f",
            "_dom_classes": [],
            "description": "100%",
            "_model_name": "FloatProgressModel",
            "bar_style": "success",
            "max": 108,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 108,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_5464c8a373104a3c8aede90bfd72e026"
          }
        },
        "3a8caf2cbad34b69aca5a0e0d4dfc388": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "state": {
            "_view_name": "HTMLView",
            "style": "IPY_MODEL_ba551959eca345a3bc8423782276e70b",
            "_dom_classes": [],
            "description": "",
            "_model_name": "HTMLModel",
            "placeholder": "​",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": " 108/108 [01:40&lt;00:00,  1.07it/s]",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_a6ddc8c7359d420983eb67f944cf1a07"
          }
        },
        "df18ce77d7b240449d68af8a8b6bb56f": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "initial",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "5464c8a373104a3c8aede90bfd72e026": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "ba551959eca345a3bc8423782276e70b": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "a6ddc8c7359d420983eb67f944cf1a07": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "c174f5958a6841b582a51e508faaba8c": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "state": {
            "_view_name": "HBoxView",
            "_dom_classes": [],
            "_model_name": "HBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_8e55041e173c434bbb54f4821ed68257",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_4a480a7ad1244ab3972e601bf80e460e",
              "IPY_MODEL_64c4dcdcd68842be8e26acdc06b0cc2b"
            ]
          }
        },
        "8e55041e173c434bbb54f4821ed68257": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "4a480a7ad1244ab3972e601bf80e460e": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_62f2abc4619649449efa02d0e0f164a7",
            "_dom_classes": [],
            "description": "100%",
            "_model_name": "FloatProgressModel",
            "bar_style": "success",
            "max": 108,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 108,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_fd70cdff9dd4400ab1801d4c152e33b6"
          }
        },
        "64c4dcdcd68842be8e26acdc06b0cc2b": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "state": {
            "_view_name": "HTMLView",
            "style": "IPY_MODEL_e48fc82c6c9b457c94681c2987d55613",
            "_dom_classes": [],
            "description": "",
            "_model_name": "HTMLModel",
            "placeholder": "​",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": " 108/108 [13:53&lt;00:00,  7.72s/it]",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_c414b7c9ab0a4a098f089c43c78d2a4c"
          }
        },
        "62f2abc4619649449efa02d0e0f164a7": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "initial",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "fd70cdff9dd4400ab1801d4c152e33b6": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "e48fc82c6c9b457c94681c2987d55613": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "c414b7c9ab0a4a098f089c43c78d2a4c": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "68f304949dc640e096e65652637c8276": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "state": {
            "_view_name": "HBoxView",
            "_dom_classes": [],
            "_model_name": "HBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_55b7ac635e06445f85bf172467cb666f",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_4613212bd5d746df935979d8bf0f8eb2",
              "IPY_MODEL_38afa0a9f1a845588782739cfa63df3f"
            ]
          }
        },
        "55b7ac635e06445f85bf172467cb666f": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "4613212bd5d746df935979d8bf0f8eb2": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_c8acc82a6bde4ae98e392d7956b79758",
            "_dom_classes": [],
            "description": "100%",
            "_model_name": "FloatProgressModel",
            "bar_style": "success",
            "max": 108,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 108,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_3bb93c57f762410e8a24fb21dc1b51bc"
          }
        },
        "38afa0a9f1a845588782739cfa63df3f": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "state": {
            "_view_name": "HTMLView",
            "style": "IPY_MODEL_e919ee9021cc46a3b218670525239ea2",
            "_dom_classes": [],
            "description": "",
            "_model_name": "HTMLModel",
            "placeholder": "​",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": " 108/108 [11:33&lt;00:00,  6.42s/it]",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_b2c2b78747da490ba12459f7c9097d5e"
          }
        },
        "c8acc82a6bde4ae98e392d7956b79758": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "initial",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "3bb93c57f762410e8a24fb21dc1b51bc": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "e919ee9021cc46a3b218670525239ea2": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "b2c2b78747da490ba12459f7c9097d5e": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "f3ac5e792d0c4f3199c3b1548f92e263": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "state": {
            "_view_name": "HBoxView",
            "_dom_classes": [],
            "_model_name": "HBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_58103776f95c4eaead4eb632b124f7de",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_ab189b0799a0406487746d6b3ba1bef4",
              "IPY_MODEL_4a29f97d6839456991f6a24fc7f26da2"
            ]
          }
        },
        "58103776f95c4eaead4eb632b124f7de": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "ab189b0799a0406487746d6b3ba1bef4": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_a1a562c9624b49ec91b94226755f9c8a",
            "_dom_classes": [],
            "description": "100%",
            "_model_name": "FloatProgressModel",
            "bar_style": "success",
            "max": 5,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 5,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_6f2ea68201b948559369f07582d1a81e"
          }
        },
        "4a29f97d6839456991f6a24fc7f26da2": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "state": {
            "_view_name": "HTMLView",
            "style": "IPY_MODEL_509cf3243641429ab93dd827be39fb26",
            "_dom_classes": [],
            "description": "",
            "_model_name": "HTMLModel",
            "placeholder": "​",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": " 5/5 [00:46&lt;00:00,  9.30s/it]",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_b15115b19712440f97fc6cdac5f9ff1f"
          }
        },
        "a1a562c9624b49ec91b94226755f9c8a": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "initial",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "6f2ea68201b948559369f07582d1a81e": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "509cf3243641429ab93dd827be39fb26": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "b15115b19712440f97fc6cdac5f9ff1f": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "de4e4043d56b420a98ad8dd21cff0de6": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "state": {
            "_view_name": "HBoxView",
            "_dom_classes": [],
            "_model_name": "HBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_ef50ad892712451da288fc2bf1f97fd3",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_80cfa06e9b314441a988a056c37ccd28",
              "IPY_MODEL_48bab0796441471787d205b160c86811"
            ]
          }
        },
        "ef50ad892712451da288fc2bf1f97fd3": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "80cfa06e9b314441a988a056c37ccd28": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_b693cdb3c4534616b0c726354c5b3121",
            "_dom_classes": [],
            "description": "100%",
            "_model_name": "FloatProgressModel",
            "bar_style": "success",
            "max": 122,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 122,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_8f450abaafb74f5790ae1568dba03223"
          }
        },
        "48bab0796441471787d205b160c86811": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "state": {
            "_view_name": "HTMLView",
            "style": "IPY_MODEL_137c99f89d16495d9cdee90c166afc7d",
            "_dom_classes": [],
            "description": "",
            "_model_name": "HTMLModel",
            "placeholder": "​",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": " 122/122 [02:50&lt;00:00,  1.40s/it]",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_f9df2fc0033c49ab85eeab3a209d566a"
          }
        },
        "b693cdb3c4534616b0c726354c5b3121": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "initial",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "8f450abaafb74f5790ae1568dba03223": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "137c99f89d16495d9cdee90c166afc7d": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "f9df2fc0033c49ab85eeab3a209d566a": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "c83bf918a5004228a63b268c72b6c164": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "state": {
            "_view_name": "HBoxView",
            "_dom_classes": [],
            "_model_name": "HBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_6d5d911e34fc43c79779ae122f2abb0f",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_384e3f0e1e234ebf81337dd1c33eb3c8",
              "IPY_MODEL_8ba62a4e80b94898aa8fd29eb4df8a2b"
            ]
          }
        },
        "6d5d911e34fc43c79779ae122f2abb0f": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "384e3f0e1e234ebf81337dd1c33eb3c8": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_423fb31722a84fe09249bcea8b26ef22",
            "_dom_classes": [],
            "description": "100%",
            "_model_name": "FloatProgressModel",
            "bar_style": "success",
            "max": 41,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 41,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_de1ffa8ef32c48d5bde38949af0202ed"
          }
        },
        "8ba62a4e80b94898aa8fd29eb4df8a2b": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "state": {
            "_view_name": "HTMLView",
            "style": "IPY_MODEL_21292bd0747d4bd996adc37a30f4cb29",
            "_dom_classes": [],
            "description": "",
            "_model_name": "HTMLModel",
            "placeholder": "​",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": " 41/41 [02:08&lt;00:00,  3.13s/it]",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_3abac90fe2374db59922ab1a7a50c073"
          }
        },
        "423fb31722a84fe09249bcea8b26ef22": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "initial",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "de1ffa8ef32c48d5bde38949af0202ed": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "21292bd0747d4bd996adc37a30f4cb29": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "3abac90fe2374db59922ab1a7a50c073": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "e83a141705d64be59c90f092ecb93ebf": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "state": {
            "_view_name": "HBoxView",
            "_dom_classes": [],
            "_model_name": "HBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_554bb6d871324ecea9e65567a12c154f",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_07b0eb7ce4ea45aab18356334d35af06",
              "IPY_MODEL_0123d39981434cd9886fb4b37dbc151f"
            ]
          }
        },
        "554bb6d871324ecea9e65567a12c154f": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "07b0eb7ce4ea45aab18356334d35af06": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_9cda6a4bc385415e9b7214ec6464224c",
            "_dom_classes": [],
            "description": "100%",
            "_model_name": "FloatProgressModel",
            "bar_style": "success",
            "max": 42,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 42,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_ca24881a36f24368a886b2c1e904a256"
          }
        },
        "0123d39981434cd9886fb4b37dbc151f": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "state": {
            "_view_name": "HTMLView",
            "style": "IPY_MODEL_d3f0a43c83854a64aaee884ec6632698",
            "_dom_classes": [],
            "description": "",
            "_model_name": "HTMLModel",
            "placeholder": "​",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": " 42/42 [01:03&lt;00:00,  1.50s/it]",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_155e9c7a287b46fa9e1f6d485d9355be"
          }
        },
        "9cda6a4bc385415e9b7214ec6464224c": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "initial",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "ca24881a36f24368a886b2c1e904a256": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "d3f0a43c83854a64aaee884ec6632698": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "155e9c7a287b46fa9e1f6d485d9355be": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "07f4c71ac64f41d48ed4e907587864de": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_292117b49c1f49638b20372333f247ea",
              "IPY_MODEL_c41b9676ecd14376ac29988e26cd8a03"
            ],
            "layout": "IPY_MODEL_645b57ac05294609899ae18f3a6a8849"
          }
        },
        "292117b49c1f49638b20372333f247ea": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "100%",
            "description_tooltip": null,
            "layout": "IPY_MODEL_66dafe411598436f92cc775139c5a59a",
            "max": 3,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_15f3ecdaec3a4585a1f20fbcc942081f",
            "value": 3
          }
        },
        "c41b9676ecd14376ac29988e26cd8a03": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_ae5a72671f1f4b46a57514923b6da812",
            "placeholder": "​",
            "style": "IPY_MODEL_83c14482f0a7459cb05d3443b01b9784",
            "value": " 3/3 [13:06&lt;00:00, 262.14s/it]"
          }
        },
        "645b57ac05294609899ae18f3a6a8849": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "66dafe411598436f92cc775139c5a59a": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "15f3ecdaec3a4585a1f20fbcc942081f": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": "initial"
          }
        },
        "ae5a72671f1f4b46a57514923b6da812": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "83c14482f0a7459cb05d3443b01b9784": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "399bfbe17ae049f181bf6ffd2d3a06aa": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_ad28dc5162ed47f5b4fb32dafdbd39cb",
              "IPY_MODEL_b2b123465b304759a61e5b988403bd74"
            ],
            "layout": "IPY_MODEL_31d97e74bdc94d7aa47fd005f11f3604"
          }
        },
        "ad28dc5162ed47f5b4fb32dafdbd39cb": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "100%",
            "description_tooltip": null,
            "layout": "IPY_MODEL_84b8216f084c465893b7613a92899c9f",
            "max": 3,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_782f252224344e62aea9baf60362e358",
            "value": 3
          }
        },
        "b2b123465b304759a61e5b988403bd74": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_52817edcf9ad4de09393588723d231c9",
            "placeholder": "​",
            "style": "IPY_MODEL_fae0c6e23b5c44b2a0d3f4b9b5419fe0",
            "value": " 3/3 [00:23&lt;00:00,  7.89s/it]"
          }
        },
        "31d97e74bdc94d7aa47fd005f11f3604": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "84b8216f084c465893b7613a92899c9f": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "782f252224344e62aea9baf60362e358": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": "initial"
          }
        },
        "52817edcf9ad4de09393588723d231c9": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "fae0c6e23b5c44b2a0d3f4b9b5419fe0": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "159f81c68bda465c8f6f7db35ad6c78d": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_98b477c8c17f438c8525b4bbb0f3aae1",
              "IPY_MODEL_ccc4fb232ed941a2ba2164ccb39dad31"
            ],
            "layout": "IPY_MODEL_5ecd1fb1058d4e42be82814736ed6c34"
          }
        },
        "98b477c8c17f438c8525b4bbb0f3aae1": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "100%",
            "description_tooltip": null,
            "layout": "IPY_MODEL_d1a60de5ec3e4a86a8d108f4f4c46d8c",
            "max": 102502400,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_e580cdf302a748528a9a059230684b97",
            "value": 102502400
          }
        },
        "ccc4fb232ed941a2ba2164ccb39dad31": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_8158a197c13240ebb34dde656cb967cf",
            "placeholder": "​",
            "style": "IPY_MODEL_77ba8e6aac194fde9774a7775bd65c9f",
            "value": " 97.8M/97.8M [00:00&lt;00:00, 167MB/s]"
          }
        },
        "5ecd1fb1058d4e42be82814736ed6c34": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "d1a60de5ec3e4a86a8d108f4f4c46d8c": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "e580cdf302a748528a9a059230684b97": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": "initial"
          }
        },
        "8158a197c13240ebb34dde656cb967cf": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "77ba8e6aac194fde9774a7775bd65c9f": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        }
      }
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wpAKczeJ9Ag-",
        "outputId": "226e068a-2a92-4932-e8f8-d986a0cd58f7"
      },
      "source": [
        "!nvidia-smi -L"
      ],
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "GPU 0: Tesla P100-PCIE-16GB (UUID: GPU-f314fab9-6c62-f662-3ade-07aca78e5ce9)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7mJgEfjAJ4RQ"
      },
      "source": [
        "######\n",
        "from PIL import Image\n",
        "import imageio\n",
        "######\n",
        "from sklearn.model_selection import train_test_split\n",
        "######\n",
        "import torch\n",
        "import torch.nn as nn\n",
        "import torch.nn.functional as F\n",
        "import torchvision.transforms as T\n",
        "import torchvision.transforms.functional as TF\n",
        "\n",
        "from torchvision import models\n",
        "######\n",
        "from tqdm.notebook import tqdm\n",
        "import os\n",
        "import matplotlib.pyplot as plt\n",
        "###### \n",
        "import time\n",
        "import random\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "# You can comment the lines below if you want to see warnings :)\n",
        "import warnings\n",
        "import copy\n",
        "\n",
        "warnings.filterwarnings(\"ignore\")"
      ],
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ox_6QSZQlVM8"
      },
      "source": [
        "# Load Data Locally"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "g25P_gc0rXAs"
      },
      "source": [
        "If you are using colab, I advise you to run these cells, it download the entire dataset and put it directly in the \"virtual machine\". It can speed up loading data because loading data from your google drive is much slower than loading it directly from the machine."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "resources": {
            "http://localhost:8080/nbextensions/google.colab/files.js": {
              "data": "Ly8gQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQwovLwovLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsKLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLgovLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKLy8KLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKLy8KLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQovLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLAovLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4KLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZAovLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4KCi8qKgogKiBAZmlsZW92ZXJ2aWV3IEhlbHBlcnMgZm9yIGdvb2dsZS5jb2xhYiBQeXRob24gbW9kdWxlLgogKi8KKGZ1bmN0aW9uKHNjb3BlKSB7CmZ1bmN0aW9uIHNwYW4odGV4dCwgc3R5bGVBdHRyaWJ1dGVzID0ge30pIHsKICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpOwogIGVsZW1lbnQudGV4dENvbnRlbnQgPSB0ZXh0OwogIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHN0eWxlQXR0cmlidXRlcykpIHsKICAgIGVsZW1lbnQuc3R5bGVba2V5XSA9IHN0eWxlQXR0cmlidXRlc1trZXldOwogIH0KICByZXR1cm4gZWxlbWVudDsKfQoKLy8gTWF4IG51bWJlciBvZiBieXRlcyB3aGljaCB3aWxsIGJlIHVwbG9hZGVkIGF0IGEgdGltZS4KY29uc3QgTUFYX1BBWUxPQURfU0laRSA9IDEwMCAqIDEwMjQ7CgpmdW5jdGlvbiBfdXBsb2FkRmlsZXMoaW5wdXRJZCwgb3V0cHV0SWQpIHsKICBjb25zdCBzdGVwcyA9IHVwbG9hZEZpbGVzU3RlcChpbnB1dElkLCBvdXRwdXRJZCk7CiAgY29uc3Qgb3V0cHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG91dHB1dElkKTsKICAvLyBDYWNoZSBzdGVwcyBvbiB0aGUgb3V0cHV0RWxlbWVudCB0byBtYWtlIGl0IGF2YWlsYWJsZSBmb3IgdGhlIG5leHQgY2FsbAogIC8vIHRvIHVwbG9hZEZpbGVzQ29udGludWUgZnJvbSBQeXRob24uCiAgb3V0cHV0RWxlbWVudC5zdGVwcyA9IHN0ZXBzOwoKICByZXR1cm4gX3VwbG9hZEZpbGVzQ29udGludWUob3V0cHV0SWQpOwp9CgovLyBUaGlzIGlzIHJvdWdobHkgYW4gYXN5bmMgZ2VuZXJhdG9yIChub3Qgc3VwcG9ydGVkIGluIHRoZSBicm93c2VyIHlldCksCi8vIHdoZXJlIHRoZXJlIGFyZSBtdWx0aXBsZSBhc3luY2hyb25vdXMgc3RlcHMgYW5kIHRoZSBQeXRob24gc2lkZSBpcyBnb2luZwovLyB0byBwb2xsIGZvciBjb21wbGV0aW9uIG9mIGVhY2ggc3RlcC4KLy8gVGhpcyB1c2VzIGEgUHJvbWlzZSB0byBibG9jayB0aGUgcHl0aG9uIHNpZGUgb24gY29tcGxldGlvbiBvZiBlYWNoIHN0ZXAsCi8vIHRoZW4gcGFzc2VzIHRoZSByZXN1bHQgb2YgdGhlIHByZXZpb3VzIHN0ZXAgYXMgdGhlIGlucHV0IHRvIHRoZSBuZXh0IHN0ZXAuCmZ1bmN0aW9uIF91cGxvYWRGaWxlc0NvbnRpbnVlKG91dHB1dElkKSB7CiAgY29uc3Qgb3V0cHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG91dHB1dElkKTsKICBjb25zdCBzdGVwcyA9IG91dHB1dEVsZW1lbnQuc3RlcHM7CgogIGNvbnN0IG5leHQgPSBzdGVwcy5uZXh0KG91dHB1dEVsZW1lbnQubGFzdFByb21pc2VWYWx1ZSk7CiAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShuZXh0LnZhbHVlLnByb21pc2UpLnRoZW4oKHZhbHVlKSA9PiB7CiAgICAvLyBDYWNoZSB0aGUgbGFzdCBwcm9taXNlIHZhbHVlIHRvIG1ha2UgaXQgYXZhaWxhYmxlIHRvIHRoZSBuZXh0CiAgICAvLyBzdGVwIG9mIHRoZSBnZW5lcmF0b3IuCiAgICBvdXRwdXRFbGVtZW50Lmxhc3RQcm9taXNlVmFsdWUgPSB2YWx1ZTsKICAgIHJldHVybiBuZXh0LnZhbHVlLnJlc3BvbnNlOwogIH0pOwp9CgovKioKICogR2VuZXJhdG9yIGZ1bmN0aW9uIHdoaWNoIGlzIGNhbGxlZCBiZXR3ZWVuIGVhY2ggYXN5bmMgc3RlcCBvZiB0aGUgdXBsb2FkCiAqIHByb2Nlc3MuCiAqIEBwYXJhbSB7c3RyaW5nfSBpbnB1dElkIEVsZW1lbnQgSUQgb2YgdGhlIGlucHV0IGZpbGUgcGlja2VyIGVsZW1lbnQuCiAqIEBwYXJhbSB7c3RyaW5nfSBvdXRwdXRJZCBFbGVtZW50IElEIG9mIHRoZSBvdXRwdXQgZGlzcGxheS4KICogQHJldHVybiB7IUl0ZXJhYmxlPCFPYmplY3Q+fSBJdGVyYWJsZSBvZiBuZXh0IHN0ZXBzLgogKi8KZnVuY3Rpb24qIHVwbG9hZEZpbGVzU3RlcChpbnB1dElkLCBvdXRwdXRJZCkgewogIGNvbnN0IGlucHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlucHV0SWQpOwogIGlucHV0RWxlbWVudC5kaXNhYmxlZCA9IGZhbHNlOwoKICBjb25zdCBvdXRwdXRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQob3V0cHV0SWQpOwogIG91dHB1dEVsZW1lbnQuaW5uZXJIVE1MID0gJyc7CgogIGNvbnN0IHBpY2tlZFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgaW5wdXRFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIChlKSA9PiB7CiAgICAgIHJlc29sdmUoZS50YXJnZXQuZmlsZXMpOwogICAgfSk7CiAgfSk7CgogIGNvbnN0IGNhbmNlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpOwogIGlucHV0RWxlbWVudC5wYXJlbnRFbGVtZW50LmFwcGVuZENoaWxkKGNhbmNlbCk7CiAgY2FuY2VsLnRleHRDb250ZW50ID0gJ0NhbmNlbCB1cGxvYWQnOwogIGNvbnN0IGNhbmNlbFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgY2FuY2VsLm9uY2xpY2sgPSAoKSA9PiB7CiAgICAgIHJlc29sdmUobnVsbCk7CiAgICB9OwogIH0pOwoKICAvLyBXYWl0IGZvciB0aGUgdXNlciB0byBwaWNrIHRoZSBmaWxlcy4KICBjb25zdCBmaWxlcyA9IHlpZWxkIHsKICAgIHByb21pc2U6IFByb21pc2UucmFjZShbcGlja2VkUHJvbWlzZSwgY2FuY2VsUHJvbWlzZV0pLAogICAgcmVzcG9uc2U6IHsKICAgICAgYWN0aW9uOiAnc3RhcnRpbmcnLAogICAgfQogIH07CgogIGNhbmNlbC5yZW1vdmUoKTsKCiAgLy8gRGlzYWJsZSB0aGUgaW5wdXQgZWxlbWVudCBzaW5jZSBmdXJ0aGVyIHBpY2tzIGFyZSBub3QgYWxsb3dlZC4KICBpbnB1dEVsZW1lbnQuZGlzYWJsZWQgPSB0cnVlOwoKICBpZiAoIWZpbGVzKSB7CiAgICByZXR1cm4gewogICAgICByZXNwb25zZTogewogICAgICAgIGFjdGlvbjogJ2NvbXBsZXRlJywKICAgICAgfQogICAgfTsKICB9CgogIGZvciAoY29uc3QgZmlsZSBvZiBmaWxlcykgewogICAgY29uc3QgbGkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpOwogICAgbGkuYXBwZW5kKHNwYW4oZmlsZS5uYW1lLCB7Zm9udFdlaWdodDogJ2JvbGQnfSkpOwogICAgbGkuYXBwZW5kKHNwYW4oCiAgICAgICAgYCgke2ZpbGUudHlwZSB8fCAnbi9hJ30pIC0gJHtmaWxlLnNpemV9IGJ5dGVzLCBgICsKICAgICAgICBgbGFzdCBtb2RpZmllZDogJHsKICAgICAgICAgICAgZmlsZS5sYXN0TW9kaWZpZWREYXRlID8gZmlsZS5sYXN0TW9kaWZpZWREYXRlLnRvTG9jYWxlRGF0ZVN0cmluZygpIDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ24vYSd9IC0gYCkpOwogICAgY29uc3QgcGVyY2VudCA9IHNwYW4oJzAlIGRvbmUnKTsKICAgIGxpLmFwcGVuZENoaWxkKHBlcmNlbnQpOwoKICAgIG91dHB1dEVsZW1lbnQuYXBwZW5kQ2hpbGQobGkpOwoKICAgIGNvbnN0IGZpbGVEYXRhUHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7CiAgICAgIGNvbnN0IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7CiAgICAgIHJlYWRlci5vbmxvYWQgPSAoZSkgPT4gewogICAgICAgIHJlc29sdmUoZS50YXJnZXQucmVzdWx0KTsKICAgICAgfTsKICAgICAgcmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKGZpbGUpOwogICAgfSk7CiAgICAvLyBXYWl0IGZvciB0aGUgZGF0YSB0byBiZSByZWFkeS4KICAgIGxldCBmaWxlRGF0YSA9IHlpZWxkIHsKICAgICAgcHJvbWlzZTogZmlsZURhdGFQcm9taXNlLAogICAgICByZXNwb25zZTogewogICAgICAgIGFjdGlvbjogJ2NvbnRpbnVlJywKICAgICAgfQogICAgfTsKCiAgICAvLyBVc2UgYSBjaHVua2VkIHNlbmRpbmcgdG8gYXZvaWQgbWVzc2FnZSBzaXplIGxpbWl0cy4gU2VlIGIvNjIxMTU2NjAuCiAgICBsZXQgcG9zaXRpb24gPSAwOwogICAgd2hpbGUgKHBvc2l0aW9uIDwgZmlsZURhdGEuYnl0ZUxlbmd0aCkgewogICAgICBjb25zdCBsZW5ndGggPSBNYXRoLm1pbihmaWxlRGF0YS5ieXRlTGVuZ3RoIC0gcG9zaXRpb24sIE1BWF9QQVlMT0FEX1NJWkUpOwogICAgICBjb25zdCBjaHVuayA9IG5ldyBVaW50OEFycmF5KGZpbGVEYXRhLCBwb3NpdGlvbiwgbGVuZ3RoKTsKICAgICAgcG9zaXRpb24gKz0gbGVuZ3RoOwoKICAgICAgY29uc3QgYmFzZTY0ID0gYnRvYShTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIGNodW5rKSk7CiAgICAgIHlpZWxkIHsKICAgICAgICByZXNwb25zZTogewogICAgICAgICAgYWN0aW9uOiAnYXBwZW5kJywKICAgICAgICAgIGZpbGU6IGZpbGUubmFtZSwKICAgICAgICAgIGRhdGE6IGJhc2U2NCwKICAgICAgICB9LAogICAgICB9OwogICAgICBwZXJjZW50LnRleHRDb250ZW50ID0KICAgICAgICAgIGAke01hdGgucm91bmQoKHBvc2l0aW9uIC8gZmlsZURhdGEuYnl0ZUxlbmd0aCkgKiAxMDApfSUgZG9uZWA7CiAgICB9CiAgfQoKICAvLyBBbGwgZG9uZS4KICB5aWVsZCB7CiAgICByZXNwb25zZTogewogICAgICBhY3Rpb246ICdjb21wbGV0ZScsCiAgICB9CiAgfTsKfQoKc2NvcGUuZ29vZ2xlID0gc2NvcGUuZ29vZ2xlIHx8IHt9OwpzY29wZS5nb29nbGUuY29sYWIgPSBzY29wZS5nb29nbGUuY29sYWIgfHwge307CnNjb3BlLmdvb2dsZS5jb2xhYi5fZmlsZXMgPSB7CiAgX3VwbG9hZEZpbGVzLAogIF91cGxvYWRGaWxlc0NvbnRpbnVlLAp9Owp9KShzZWxmKTsK",
              "ok": true,
              "headers": [
                [
                  "content-type",
                  "application/javascript"
                ]
              ],
              "status": 200,
              "status_text": ""
            }
          },
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "Tx4uBNSklOuY",
        "outputId": "08510b3a-4214-4458-cacf-3bb33c507001"
      },
      "source": [
        "!pip install --upgrade --force-reinstall --no-deps kaggle\n",
        "from google.colab import files\n",
        "# Here you should upload your Kaggle API key (see : https://www.kaggle.com/docs/api (Authentification paragraph))\n",
        "files.upload()\n",
        "# Kaggle API identification\n",
        "! mkdir ~/.kaggle\n",
        "! cp kaggle.json ~/.kaggle/\n",
        "! chmod 600 ~/.kaggle/kaggle.json\n",
        "! kaggle datasets list\n",
        "# Download the entire dataset in zip format\n",
        "! kaggle competitions download -c 3md3070-dlmi\n",
        "# Unzip file\n",
        "! unzip /content/3md3070-dlmi.zip"
      ],
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Collecting kaggle\n",
            "\u001b[?25l  Downloading https://files.pythonhosted.org/packages/3a/e7/3bac01547d2ed3d308ac92a0878fbdb0ed0f3d41fb1906c319ccbba1bfbc/kaggle-1.5.12.tar.gz (58kB)\n",
            "\r\u001b[K     |█████▋                          | 10kB 21.7MB/s eta 0:00:01\r\u001b[K     |███████████▏                    | 20kB 28.7MB/s eta 0:00:01\r\u001b[K     |████████████████▊               | 30kB 22.9MB/s eta 0:00:01\r\u001b[K     |██████████████████████▎         | 40kB 17.9MB/s eta 0:00:01\r\u001b[K     |███████████████████████████▉    | 51kB 15.9MB/s eta 0:00:01\r\u001b[K     |████████████████████████████████| 61kB 6.8MB/s \n",
            "\u001b[?25hBuilding wheels for collected packages: kaggle\n",
            "  Building wheel for kaggle (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for kaggle: filename=kaggle-1.5.12-cp37-none-any.whl size=73053 sha256=afd95db6369862cabee27e7a2648f619fe1e91a323615e1dc4679eec00c2cbdb\n",
            "  Stored in directory: /root/.cache/pip/wheels/a1/6a/26/d30b7499ff85a4a4593377a87ecf55f7d08af42f0de9b60303\n",
            "Successfully built kaggle\n",
            "Installing collected packages: kaggle\n",
            "  Found existing installation: kaggle 1.5.10\n",
            "    Uninstalling kaggle-1.5.10:\n",
            "      Successfully uninstalled kaggle-1.5.10\n",
            "Successfully installed kaggle-1.5.12\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-b8d41aa7-6ad9-4db5-9677-3b6763cbd210\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-b8d41aa7-6ad9-4db5-9677-3b6763cbd210\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script src=\"/nbextensions/google.colab/files.js\"></script> "
            ],
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\u001b[1;30;43mLe flux de sortie a été tronqué et ne contient que les 5000 dernières lignes.\u001b[0m\n",
            "  inflating: trainset/P27/000009.jpg  \n",
            "  inflating: trainset/P27/000010.jpg  \n",
            "  inflating: trainset/P27/000011.jpg  \n",
            "  inflating: trainset/P27/000012.jpg  \n",
            "  inflating: trainset/P27/000013.jpg  \n",
            "  inflating: trainset/P27/000014.jpg  \n",
            "  inflating: trainset/P27/000015.jpg  \n",
            "  inflating: trainset/P27/000016.jpg  \n",
            "  inflating: trainset/P27/000017.jpg  \n",
            "  inflating: trainset/P27/000018.jpg  \n",
            "  inflating: trainset/P27/000019.jpg  \n",
            "  inflating: trainset/P27/000020.jpg  \n",
            "  inflating: trainset/P27/000021.jpg  \n",
            "  inflating: trainset/P27/000022.jpg  \n",
            "  inflating: trainset/P27/000023.jpg  \n",
            "  inflating: trainset/P27/000024.jpg  \n",
            "  inflating: trainset/P27/000025.jpg  \n",
            "  inflating: trainset/P27/000026.jpg  \n",
            "  inflating: trainset/P27/000027.jpg  \n",
            "  inflating: trainset/P27/000028.jpg  \n",
            "  inflating: trainset/P27/000029.jpg  \n",
            "  inflating: trainset/P27/000030.jpg  \n",
            "  inflating: trainset/P27/000031.jpg  \n",
            "  inflating: trainset/P27/000032.jpg  \n",
            "  inflating: trainset/P27/000033.jpg  \n",
            "  inflating: trainset/P27/000034.jpg  \n",
            "  inflating: trainset/P27/000035.jpg  \n",
            "  inflating: trainset/P27/000036.jpg  \n",
            "  inflating: trainset/P27/000037.jpg  \n",
            "  inflating: trainset/P27/000038.jpg  \n",
            "  inflating: trainset/P27/000039.jpg  \n",
            "  inflating: trainset/P27/000040.jpg  \n",
            "  inflating: trainset/P27/000041.jpg  \n",
            "  inflating: trainset/P27/000042.jpg  \n",
            "  inflating: trainset/P27/000043.jpg  \n",
            "  inflating: trainset/P27/000044.jpg  \n",
            "  inflating: trainset/P27/000045.jpg  \n",
            "  inflating: trainset/P27/000046.jpg  \n",
            "  inflating: trainset/P27/000047.jpg  \n",
            "  inflating: trainset/P27/000048.jpg  \n",
            "  inflating: trainset/P27/000049.jpg  \n",
            "  inflating: trainset/P27/000050.jpg  \n",
            "  inflating: trainset/P27/000051.jpg  \n",
            "  inflating: trainset/P27/000052.jpg  \n",
            "  inflating: trainset/P27/000053.jpg  \n",
            "  inflating: trainset/P27/000054.jpg  \n",
            "  inflating: trainset/P27/000055.jpg  \n",
            "  inflating: trainset/P27/000056.jpg  \n",
            "  inflating: trainset/P27/000057.jpg  \n",
            "  inflating: trainset/P27/000058.jpg  \n",
            "  inflating: trainset/P27/000059.jpg  \n",
            "  inflating: trainset/P27/000060.jpg  \n",
            "  inflating: trainset/P27/000061.jpg  \n",
            "  inflating: trainset/P27/000062.jpg  \n",
            "  inflating: trainset/P27/000063.jpg  \n",
            "  inflating: trainset/P27/000064.jpg  \n",
            "  inflating: trainset/P27/000065.jpg  \n",
            "  inflating: trainset/P27/000066.jpg  \n",
            "  inflating: trainset/P27/000067.jpg  \n",
            "  inflating: trainset/P27/000068.jpg  \n",
            "  inflating: trainset/P27/000069.jpg  \n",
            "  inflating: trainset/P27/000070.jpg  \n",
            "  inflating: trainset/P27/000071.jpg  \n",
            "  inflating: trainset/P27/000072.jpg  \n",
            "  inflating: trainset/P27/000073.jpg  \n",
            "  inflating: trainset/P27/000074.jpg  \n",
            "  inflating: trainset/P27/000075.jpg  \n",
            "  inflating: trainset/P27/000076.jpg  \n",
            "  inflating: trainset/P27/000077.jpg  \n",
            "  inflating: trainset/P27/000078.jpg  \n",
            "  inflating: trainset/P27/000079.jpg  \n",
            "  inflating: trainset/P27/000080.jpg  \n",
            "  inflating: trainset/P27/000081.jpg  \n",
            "  inflating: trainset/P27/000082.jpg  \n",
            "  inflating: trainset/P27/000083.jpg  \n",
            "  inflating: trainset/P27/000084.jpg  \n",
            "  inflating: trainset/P27/000085.jpg  \n",
            "  inflating: trainset/P27/000086.jpg  \n",
            "  inflating: trainset/P27/000087.jpg  \n",
            "  inflating: trainset/P27/000088.jpg  \n",
            "  inflating: trainset/P27/000089.jpg  \n",
            "  inflating: trainset/P27/000090.jpg  \n",
            "  inflating: trainset/P27/000091.jpg  \n",
            "  inflating: trainset/P27/000092.jpg  \n",
            "  inflating: trainset/P27/000093.jpg  \n",
            "  inflating: trainset/P27/000094.jpg  \n",
            "  inflating: trainset/P27/000095.jpg  \n",
            "  inflating: trainset/P27/000096.jpg  \n",
            "  inflating: trainset/P27/000097.jpg  \n",
            "  inflating: trainset/P27/000098.jpg  \n",
            "  inflating: trainset/P27/000099.jpg  \n",
            "  inflating: trainset/P27/000100.jpg  \n",
            "  inflating: trainset/P27/000101.jpg  \n",
            "  inflating: trainset/P27/000102.jpg  \n",
            "  inflating: trainset/P27/000103.jpg  \n",
            "  inflating: trainset/P27/000104.jpg  \n",
            "  inflating: trainset/P27/000105.jpg  \n",
            "  inflating: trainset/P27/000106.jpg  \n",
            "  inflating: trainset/P27/000107.jpg  \n",
            "  inflating: trainset/P27/000108.jpg  \n",
            "  inflating: trainset/P27/000109.jpg  \n",
            "  inflating: trainset/P27/000110.jpg  \n",
            "  inflating: trainset/P27/000111.jpg  \n",
            "  inflating: trainset/P27/000112.jpg  \n",
            "  inflating: trainset/P27/000113.jpg  \n",
            "  inflating: trainset/P27/000114.jpg  \n",
            "  inflating: trainset/P27/000115.jpg  \n",
            "  inflating: trainset/P27/000116.jpg  \n",
            "  inflating: trainset/P27/000117.jpg  \n",
            "  inflating: trainset/P27/000118.jpg  \n",
            "  inflating: trainset/P27/000119.jpg  \n",
            "  inflating: trainset/P27/000120.jpg  \n",
            "  inflating: trainset/P27/000121.jpg  \n",
            "  inflating: trainset/P27/000122.jpg  \n",
            "  inflating: trainset/P27/000123.jpg  \n",
            "  inflating: trainset/P27/000124.jpg  \n",
            "  inflating: trainset/P27/000125.jpg  \n",
            "  inflating: trainset/P27/000126.jpg  \n",
            "  inflating: trainset/P27/000127.jpg  \n",
            "  inflating: trainset/P27/000128.jpg  \n",
            "  inflating: trainset/P27/000129.jpg  \n",
            "  inflating: trainset/P27/000130.jpg  \n",
            "  inflating: trainset/P27/000131.jpg  \n",
            "  inflating: trainset/P27/000132.jpg  \n",
            "  inflating: trainset/P27/000133.jpg  \n",
            "  inflating: trainset/P27/000134.jpg  \n",
            "  inflating: trainset/P27/000135.jpg  \n",
            "  inflating: trainset/P27/000136.jpg  \n",
            "  inflating: trainset/P27/000137.jpg  \n",
            "  inflating: trainset/P27/000138.jpg  \n",
            "  inflating: trainset/P27/000139.jpg  \n",
            "  inflating: trainset/P27/000140.jpg  \n",
            "  inflating: trainset/P27/000141.jpg  \n",
            "  inflating: trainset/P27/000142.jpg  \n",
            "  inflating: trainset/P27/000143.jpg  \n",
            "  inflating: trainset/P27/000144.jpg  \n",
            "  inflating: trainset/P27/000145.jpg  \n",
            "  inflating: trainset/P27/000146.jpg  \n",
            "  inflating: trainset/P27/000147.jpg  \n",
            "  inflating: trainset/P27/000148.jpg  \n",
            "  inflating: trainset/P27/000149.jpg  \n",
            "  inflating: trainset/P27/000150.jpg  \n",
            "  inflating: trainset/P27/000151.jpg  \n",
            "  inflating: trainset/P27/000152.jpg  \n",
            "  inflating: trainset/P27/000153.jpg  \n",
            "  inflating: trainset/P27/000154.jpg  \n",
            "  inflating: trainset/P27/000155.jpg  \n",
            "  inflating: trainset/P27/000156.jpg  \n",
            "  inflating: trainset/P27/000157.jpg  \n",
            "  inflating: trainset/P27/000158.jpg  \n",
            "  inflating: trainset/P27/000159.jpg  \n",
            "  inflating: trainset/P27/000160.jpg  \n",
            "  inflating: trainset/P27/000161.jpg  \n",
            "  inflating: trainset/P27/000162.jpg  \n",
            "  inflating: trainset/P27/000163.jpg  \n",
            "  inflating: trainset/P27/000164.jpg  \n",
            "  inflating: trainset/P27/000165.jpg  \n",
            "  inflating: trainset/P27/000166.jpg  \n",
            "  inflating: trainset/P27/000167.jpg  \n",
            "  inflating: trainset/P27/000168.jpg  \n",
            "  inflating: trainset/P28/000000.jpg  \n",
            "  inflating: trainset/P28/000001.jpg  \n",
            "  inflating: trainset/P28/000002.jpg  \n",
            "  inflating: trainset/P28/000003.jpg  \n",
            "  inflating: trainset/P28/000004.jpg  \n",
            "  inflating: trainset/P28/000005.jpg  \n",
            "  inflating: trainset/P28/000006.jpg  \n",
            "  inflating: trainset/P28/000007.jpg  \n",
            "  inflating: trainset/P28/000008.jpg  \n",
            "  inflating: trainset/P28/000009.jpg  \n",
            "  inflating: trainset/P28/000010.jpg  \n",
            "  inflating: trainset/P28/000011.jpg  \n",
            "  inflating: trainset/P28/000012.jpg  \n",
            "  inflating: trainset/P28/000013.jpg  \n",
            "  inflating: trainset/P28/000014.jpg  \n",
            "  inflating: trainset/P28/000015.jpg  \n",
            "  inflating: trainset/P28/000016.jpg  \n",
            "  inflating: trainset/P28/000017.jpg  \n",
            "  inflating: trainset/P28/000018.jpg  \n",
            "  inflating: trainset/P28/000019.jpg  \n",
            "  inflating: trainset/P29/000000.jpg  \n",
            "  inflating: trainset/P29/000001.jpg  \n",
            "  inflating: trainset/P29/000002.jpg  \n",
            "  inflating: trainset/P29/000003.jpg  \n",
            "  inflating: trainset/P29/000004.jpg  \n",
            "  inflating: trainset/P29/000005.jpg  \n",
            "  inflating: trainset/P29/000006.jpg  \n",
            "  inflating: trainset/P29/000007.jpg  \n",
            "  inflating: trainset/P29/000008.jpg  \n",
            "  inflating: trainset/P29/000009.jpg  \n",
            "  inflating: trainset/P29/000010.jpg  \n",
            "  inflating: trainset/P29/000011.jpg  \n",
            "  inflating: trainset/P29/000012.jpg  \n",
            "  inflating: trainset/P29/000013.jpg  \n",
            "  inflating: trainset/P29/000014.jpg  \n",
            "  inflating: trainset/P29/000015.jpg  \n",
            "  inflating: trainset/P29/000016.jpg  \n",
            "  inflating: trainset/P29/000017.jpg  \n",
            "  inflating: trainset/P29/000018.jpg  \n",
            "  inflating: trainset/P29/000019.jpg  \n",
            "  inflating: trainset/P29/000020.jpg  \n",
            "  inflating: trainset/P29/000021.jpg  \n",
            "  inflating: trainset/P29/000022.jpg  \n",
            "  inflating: trainset/P29/000023.jpg  \n",
            "  inflating: trainset/P29/000024.jpg  \n",
            "  inflating: trainset/P29/000025.jpg  \n",
            "  inflating: trainset/P29/000026.jpg  \n",
            "  inflating: trainset/P29/000027.jpg  \n",
            "  inflating: trainset/P29/000028.jpg  \n",
            "  inflating: trainset/P29/000029.jpg  \n",
            "  inflating: trainset/P29/000030.jpg  \n",
            "  inflating: trainset/P29/000031.jpg  \n",
            "  inflating: trainset/P29/000032.jpg  \n",
            "  inflating: trainset/P29/000033.jpg  \n",
            "  inflating: trainset/P29/000034.jpg  \n",
            "  inflating: trainset/P29/000035.jpg  \n",
            "  inflating: trainset/P29/000036.jpg  \n",
            "  inflating: trainset/P29/000037.jpg  \n",
            "  inflating: trainset/P29/000038.jpg  \n",
            "  inflating: trainset/P29/000039.jpg  \n",
            "  inflating: trainset/P29/000040.jpg  \n",
            "  inflating: trainset/P29/000041.jpg  \n",
            "  inflating: trainset/P29/000042.jpg  \n",
            "  inflating: trainset/P29/000043.jpg  \n",
            "  inflating: trainset/P29/000044.jpg  \n",
            "  inflating: trainset/P29/000045.jpg  \n",
            "  inflating: trainset/P29/000046.jpg  \n",
            "  inflating: trainset/P29/000047.jpg  \n",
            "  inflating: trainset/P29/000048.jpg  \n",
            "  inflating: trainset/P29/000049.jpg  \n",
            "  inflating: trainset/P29/000050.jpg  \n",
            "  inflating: trainset/P29/000051.jpg  \n",
            "  inflating: trainset/P29/000052.jpg  \n",
            "  inflating: trainset/P29/000053.jpg  \n",
            "  inflating: trainset/P3/000000.jpg  \n",
            "  inflating: trainset/P3/000001.jpg  \n",
            "  inflating: trainset/P3/000002.jpg  \n",
            "  inflating: trainset/P3/000003.jpg  \n",
            "  inflating: trainset/P3/000004.jpg  \n",
            "  inflating: trainset/P3/000005.jpg  \n",
            "  inflating: trainset/P3/000006.jpg  \n",
            "  inflating: trainset/P3/000007.jpg  \n",
            "  inflating: trainset/P3/000008.jpg  \n",
            "  inflating: trainset/P3/000009.jpg  \n",
            "  inflating: trainset/P3/000010.jpg  \n",
            "  inflating: trainset/P3/000011.jpg  \n",
            "  inflating: trainset/P3/000012.jpg  \n",
            "  inflating: trainset/P3/000013.jpg  \n",
            "  inflating: trainset/P3/000014.jpg  \n",
            "  inflating: trainset/P3/000015.jpg  \n",
            "  inflating: trainset/P3/000016.jpg  \n",
            "  inflating: trainset/P3/000017.jpg  \n",
            "  inflating: trainset/P3/000018.jpg  \n",
            "  inflating: trainset/P3/000019.jpg  \n",
            "  inflating: trainset/P3/000020.jpg  \n",
            "  inflating: trainset/P3/000021.jpg  \n",
            "  inflating: trainset/P3/000022.jpg  \n",
            "  inflating: trainset/P3/000023.jpg  \n",
            "  inflating: trainset/P3/000024.jpg  \n",
            "  inflating: trainset/P3/000025.jpg  \n",
            "  inflating: trainset/P3/000026.jpg  \n",
            "  inflating: trainset/P3/000027.jpg  \n",
            "  inflating: trainset/P3/000028.jpg  \n",
            "  inflating: trainset/P3/000029.jpg  \n",
            "  inflating: trainset/P3/000030.jpg  \n",
            "  inflating: trainset/P3/000031.jpg  \n",
            "  inflating: trainset/P3/000032.jpg  \n",
            "  inflating: trainset/P3/000033.jpg  \n",
            "  inflating: trainset/P3/000034.jpg  \n",
            "  inflating: trainset/P3/000035.jpg  \n",
            "  inflating: trainset/P3/000036.jpg  \n",
            "  inflating: trainset/P3/000037.jpg  \n",
            "  inflating: trainset/P3/000038.jpg  \n",
            "  inflating: trainset/P3/000039.jpg  \n",
            "  inflating: trainset/P3/000040.jpg  \n",
            "  inflating: trainset/P3/000041.jpg  \n",
            "  inflating: trainset/P3/000042.jpg  \n",
            "  inflating: trainset/P3/000043.jpg  \n",
            "  inflating: trainset/P3/000044.jpg  \n",
            "  inflating: trainset/P3/000045.jpg  \n",
            "  inflating: trainset/P3/000046.jpg  \n",
            "  inflating: trainset/P3/000047.jpg  \n",
            "  inflating: trainset/P3/000048.jpg  \n",
            "  inflating: trainset/P3/000049.jpg  \n",
            "  inflating: trainset/P3/000050.jpg  \n",
            "  inflating: trainset/P3/000051.jpg  \n",
            "  inflating: trainset/P3/000052.jpg  \n",
            "  inflating: trainset/P3/000053.jpg  \n",
            "  inflating: trainset/P3/000054.jpg  \n",
            "  inflating: trainset/P3/000055.jpg  \n",
            "  inflating: trainset/P3/000056.jpg  \n",
            "  inflating: trainset/P3/000057.jpg  \n",
            "  inflating: trainset/P3/000058.jpg  \n",
            "  inflating: trainset/P3/000059.jpg  \n",
            "  inflating: trainset/P3/000060.jpg  \n",
            "  inflating: trainset/P3/000061.jpg  \n",
            "  inflating: trainset/P3/000062.jpg  \n",
            "  inflating: trainset/P3/000063.jpg  \n",
            "  inflating: trainset/P3/000064.jpg  \n",
            "  inflating: trainset/P3/000065.jpg  \n",
            "  inflating: trainset/P30/000000.jpg  \n",
            "  inflating: trainset/P30/000001.jpg  \n",
            "  inflating: trainset/P30/000002.jpg  \n",
            "  inflating: trainset/P30/000003.jpg  \n",
            "  inflating: trainset/P30/000004.jpg  \n",
            "  inflating: trainset/P30/000005.jpg  \n",
            "  inflating: trainset/P30/000006.jpg  \n",
            "  inflating: trainset/P30/000007.jpg  \n",
            "  inflating: trainset/P30/000008.jpg  \n",
            "  inflating: trainset/P30/000009.jpg  \n",
            "  inflating: trainset/P30/000010.jpg  \n",
            "  inflating: trainset/P30/000011.jpg  \n",
            "  inflating: trainset/P30/000012.jpg  \n",
            "  inflating: trainset/P30/000013.jpg  \n",
            "  inflating: trainset/P30/000014.jpg  \n",
            "  inflating: trainset/P30/000015.jpg  \n",
            "  inflating: trainset/P30/000016.jpg  \n",
            "  inflating: trainset/P30/000017.jpg  \n",
            "  inflating: trainset/P30/000018.jpg  \n",
            "  inflating: trainset/P30/000019.jpg  \n",
            "  inflating: trainset/P30/000020.jpg  \n",
            "  inflating: trainset/P30/000021.jpg  \n",
            "  inflating: trainset/P30/000022.jpg  \n",
            "  inflating: trainset/P30/000023.jpg  \n",
            "  inflating: trainset/P30/000024.jpg  \n",
            "  inflating: trainset/P30/000025.jpg  \n",
            "  inflating: trainset/P30/000026.jpg  \n",
            "  inflating: trainset/P30/000027.jpg  \n",
            "  inflating: trainset/P30/000028.jpg  \n",
            "  inflating: trainset/P30/000029.jpg  \n",
            "  inflating: trainset/P30/000030.jpg  \n",
            "  inflating: trainset/P30/000031.jpg  \n",
            "  inflating: trainset/P30/000032.jpg  \n",
            "  inflating: trainset/P30/000033.jpg  \n",
            "  inflating: trainset/P30/000034.jpg  \n",
            "  inflating: trainset/P30/000035.jpg  \n",
            "  inflating: trainset/P30/000036.jpg  \n",
            "  inflating: trainset/P30/000037.jpg  \n",
            "  inflating: trainset/P30/000038.jpg  \n",
            "  inflating: trainset/P30/000039.jpg  \n",
            "  inflating: trainset/P30/000040.jpg  \n",
            "  inflating: trainset/P30/000041.jpg  \n",
            "  inflating: trainset/P30/000042.jpg  \n",
            "  inflating: trainset/P30/000043.jpg  \n",
            "  inflating: trainset/P30/000044.jpg  \n",
            "  inflating: trainset/P30/000045.jpg  \n",
            "  inflating: trainset/P30/000046.jpg  \n",
            "  inflating: trainset/P30/000047.jpg  \n",
            "  inflating: trainset/P30/000048.jpg  \n",
            "  inflating: trainset/P30/000049.jpg  \n",
            "  inflating: trainset/P30/000050.jpg  \n",
            "  inflating: trainset/P30/000051.jpg  \n",
            "  inflating: trainset/P30/000052.jpg  \n",
            "  inflating: trainset/P30/000053.jpg  \n",
            "  inflating: trainset/P30/000054.jpg  \n",
            "  inflating: trainset/P30/000055.jpg  \n",
            "  inflating: trainset/P30/000056.jpg  \n",
            "  inflating: trainset/P30/000057.jpg  \n",
            "  inflating: trainset/P30/000058.jpg  \n",
            "  inflating: trainset/P30/000059.jpg  \n",
            "  inflating: trainset/P30/000060.jpg  \n",
            "  inflating: trainset/P30/000061.jpg  \n",
            "  inflating: trainset/P30/000062.jpg  \n",
            "  inflating: trainset/P30/000063.jpg  \n",
            "  inflating: trainset/P30/000064.jpg  \n",
            "  inflating: trainset/P30/000065.jpg  \n",
            "  inflating: trainset/P30/000066.jpg  \n",
            "  inflating: trainset/P30/000067.jpg  \n",
            "  inflating: trainset/P30/000068.jpg  \n",
            "  inflating: trainset/P30/000069.jpg  \n",
            "  inflating: trainset/P30/000070.jpg  \n",
            "  inflating: trainset/P30/000071.jpg  \n",
            "  inflating: trainset/P30/000072.jpg  \n",
            "  inflating: trainset/P30/000073.jpg  \n",
            "  inflating: trainset/P30/000074.jpg  \n",
            "  inflating: trainset/P30/000075.jpg  \n",
            "  inflating: trainset/P30/000076.jpg  \n",
            "  inflating: trainset/P30/000077.jpg  \n",
            "  inflating: trainset/P30/000078.jpg  \n",
            "  inflating: trainset/P30/000079.jpg  \n",
            "  inflating: trainset/P30/000080.jpg  \n",
            "  inflating: trainset/P30/000081.jpg  \n",
            "  inflating: trainset/P30/000082.jpg  \n",
            "  inflating: trainset/P30/000083.jpg  \n",
            "  inflating: trainset/P30/000084.jpg  \n",
            "  inflating: trainset/P30/000085.jpg  \n",
            "  inflating: trainset/P30/000086.jpg  \n",
            "  inflating: trainset/P30/000087.jpg  \n",
            "  inflating: trainset/P30/000088.jpg  \n",
            "  inflating: trainset/P30/000089.jpg  \n",
            "  inflating: trainset/P30/000090.jpg  \n",
            "  inflating: trainset/P30/000091.jpg  \n",
            "  inflating: trainset/P30/000092.jpg  \n",
            "  inflating: trainset/P30/000093.jpg  \n",
            "  inflating: trainset/P30/000094.jpg  \n",
            "  inflating: trainset/P30/000095.jpg  \n",
            "  inflating: trainset/P30/000096.jpg  \n",
            "  inflating: trainset/P31/000000.jpg  \n",
            "  inflating: trainset/P31/000001.jpg  \n",
            "  inflating: trainset/P31/000002.jpg  \n",
            "  inflating: trainset/P31/000003.jpg  \n",
            "  inflating: trainset/P31/000004.jpg  \n",
            "  inflating: trainset/P31/000005.jpg  \n",
            "  inflating: trainset/P31/000006.jpg  \n",
            "  inflating: trainset/P31/000007.jpg  \n",
            "  inflating: trainset/P31/000008.jpg  \n",
            "  inflating: trainset/P31/000009.jpg  \n",
            "  inflating: trainset/P31/000010.jpg  \n",
            "  inflating: trainset/P31/000011.jpg  \n",
            "  inflating: trainset/P31/000012.jpg  \n",
            "  inflating: trainset/P31/000013.jpg  \n",
            "  inflating: trainset/P31/000014.jpg  \n",
            "  inflating: trainset/P31/000015.jpg  \n",
            "  inflating: trainset/P31/000016.jpg  \n",
            "  inflating: trainset/P31/000017.jpg  \n",
            "  inflating: trainset/P31/000018.jpg  \n",
            "  inflating: trainset/P31/000019.jpg  \n",
            "  inflating: trainset/P31/000020.jpg  \n",
            "  inflating: trainset/P31/000021.jpg  \n",
            "  inflating: trainset/P31/000022.jpg  \n",
            "  inflating: trainset/P31/000023.jpg  \n",
            "  inflating: trainset/P31/000024.jpg  \n",
            "  inflating: trainset/P31/000025.jpg  \n",
            "  inflating: trainset/P31/000026.jpg  \n",
            "  inflating: trainset/P31/000027.jpg  \n",
            "  inflating: trainset/P31/000028.jpg  \n",
            "  inflating: trainset/P31/000029.jpg  \n",
            "  inflating: trainset/P31/000030.jpg  \n",
            "  inflating: trainset/P31/000031.jpg  \n",
            "  inflating: trainset/P31/000032.jpg  \n",
            "  inflating: trainset/P31/000033.jpg  \n",
            "  inflating: trainset/P31/000034.jpg  \n",
            "  inflating: trainset/P31/000035.jpg  \n",
            "  inflating: trainset/P31/000036.jpg  \n",
            "  inflating: trainset/P31/000037.jpg  \n",
            "  inflating: trainset/P31/000038.jpg  \n",
            "  inflating: trainset/P31/000039.jpg  \n",
            "  inflating: trainset/P31/000040.jpg  \n",
            "  inflating: trainset/P31/000041.jpg  \n",
            "  inflating: trainset/P31/000042.jpg  \n",
            "  inflating: trainset/P31/000043.jpg  \n",
            "  inflating: trainset/P31/000044.jpg  \n",
            "  inflating: trainset/P31/000045.jpg  \n",
            "  inflating: trainset/P31/000046.jpg  \n",
            "  inflating: trainset/P31/000047.jpg  \n",
            "  inflating: trainset/P31/000048.jpg  \n",
            "  inflating: trainset/P31/000049.jpg  \n",
            "  inflating: trainset/P31/000050.jpg  \n",
            "  inflating: trainset/P31/000051.jpg  \n",
            "  inflating: trainset/P31/000052.jpg  \n",
            "  inflating: trainset/P31/000053.jpg  \n",
            "  inflating: trainset/P31/000054.jpg  \n",
            "  inflating: trainset/P31/000055.jpg  \n",
            "  inflating: trainset/P31/000056.jpg  \n",
            "  inflating: trainset/P31/000057.jpg  \n",
            "  inflating: trainset/P31/000058.jpg  \n",
            "  inflating: trainset/P31/000059.jpg  \n",
            "  inflating: trainset/P31/000060.jpg  \n",
            "  inflating: trainset/P31/000061.jpg  \n",
            "  inflating: trainset/P31/000062.jpg  \n",
            "  inflating: trainset/P31/000063.jpg  \n",
            "  inflating: trainset/P31/000064.jpg  \n",
            "  inflating: trainset/P31/000065.jpg  \n",
            "  inflating: trainset/P31/000066.jpg  \n",
            "  inflating: trainset/P31/000067.jpg  \n",
            "  inflating: trainset/P31/000068.jpg  \n",
            "  inflating: trainset/P31/000069.jpg  \n",
            "  inflating: trainset/P31/000070.jpg  \n",
            "  inflating: trainset/P31/000071.jpg  \n",
            "  inflating: trainset/P33/000000.jpg  \n",
            "  inflating: trainset/P33/000001.jpg  \n",
            "  inflating: trainset/P33/000002.jpg  \n",
            "  inflating: trainset/P33/000003.jpg  \n",
            "  inflating: trainset/P33/000004.jpg  \n",
            "  inflating: trainset/P33/000005.jpg  \n",
            "  inflating: trainset/P33/000006.jpg  \n",
            "  inflating: trainset/P33/000007.jpg  \n",
            "  inflating: trainset/P33/000008.jpg  \n",
            "  inflating: trainset/P33/000009.jpg  \n",
            "  inflating: trainset/P33/000010.jpg  \n",
            "  inflating: trainset/P33/000011.jpg  \n",
            "  inflating: trainset/P33/000012.jpg  \n",
            "  inflating: trainset/P33/000013.jpg  \n",
            "  inflating: trainset/P33/000014.jpg  \n",
            "  inflating: trainset/P33/000015.jpg  \n",
            "  inflating: trainset/P33/000016.jpg  \n",
            "  inflating: trainset/P33/000017.jpg  \n",
            "  inflating: trainset/P33/000018.jpg  \n",
            "  inflating: trainset/P33/000019.jpg  \n",
            "  inflating: trainset/P33/000020.jpg  \n",
            "  inflating: trainset/P33/000021.jpg  \n",
            "  inflating: trainset/P33/000022.jpg  \n",
            "  inflating: trainset/P33/000023.jpg  \n",
            "  inflating: trainset/P33/000024.jpg  \n",
            "  inflating: trainset/P33/000025.jpg  \n",
            "  inflating: trainset/P33/000026.jpg  \n",
            "  inflating: trainset/P33/000027.jpg  \n",
            "  inflating: trainset/P33/000028.jpg  \n",
            "  inflating: trainset/P33/000029.jpg  \n",
            "  inflating: trainset/P33/000030.jpg  \n",
            "  inflating: trainset/P33/000031.jpg  \n",
            "  inflating: trainset/P33/000032.jpg  \n",
            "  inflating: trainset/P33/000033.jpg  \n",
            "  inflating: trainset/P33/000034.jpg  \n",
            "  inflating: trainset/P33/000035.jpg  \n",
            "  inflating: trainset/P33/000036.jpg  \n",
            "  inflating: trainset/P33/000037.jpg  \n",
            "  inflating: trainset/P33/000038.jpg  \n",
            "  inflating: trainset/P33/000039.jpg  \n",
            "  inflating: trainset/P33/000040.jpg  \n",
            "  inflating: trainset/P33/000041.jpg  \n",
            "  inflating: trainset/P33/000042.jpg  \n",
            "  inflating: trainset/P33/000043.jpg  \n",
            "  inflating: trainset/P33/000044.jpg  \n",
            "  inflating: trainset/P33/000045.jpg  \n",
            "  inflating: trainset/P33/000046.jpg  \n",
            "  inflating: trainset/P33/000047.jpg  \n",
            "  inflating: trainset/P33/000048.jpg  \n",
            "  inflating: trainset/P33/000049.jpg  \n",
            "  inflating: trainset/P33/000050.jpg  \n",
            "  inflating: trainset/P33/000051.jpg  \n",
            "  inflating: trainset/P33/000052.jpg  \n",
            "  inflating: trainset/P33/000053.jpg  \n",
            "  inflating: trainset/P33/000054.jpg  \n",
            "  inflating: trainset/P33/000055.jpg  \n",
            "  inflating: trainset/P33/000056.jpg  \n",
            "  inflating: trainset/P33/000057.jpg  \n",
            "  inflating: trainset/P33/000058.jpg  \n",
            "  inflating: trainset/P33/000059.jpg  \n",
            "  inflating: trainset/P33/000060.jpg  \n",
            "  inflating: trainset/P33/000061.jpg  \n",
            "  inflating: trainset/P33/000062.jpg  \n",
            "  inflating: trainset/P33/000063.jpg  \n",
            "  inflating: trainset/P33/000064.jpg  \n",
            "  inflating: trainset/P33/000065.jpg  \n",
            "  inflating: trainset/P33/000066.jpg  \n",
            "  inflating: trainset/P33/000067.jpg  \n",
            "  inflating: trainset/P33/000068.jpg  \n",
            "  inflating: trainset/P33/000069.jpg  \n",
            "  inflating: trainset/P33/000070.jpg  \n",
            "  inflating: trainset/P33/000071.jpg  \n",
            "  inflating: trainset/P33/000072.jpg  \n",
            "  inflating: trainset/P33/000073.jpg  \n",
            "  inflating: trainset/P33/000074.jpg  \n",
            "  inflating: trainset/P33/000075.jpg  \n",
            "  inflating: trainset/P33/000076.jpg  \n",
            "  inflating: trainset/P33/000077.jpg  \n",
            "  inflating: trainset/P33/000078.jpg  \n",
            "  inflating: trainset/P33/000079.jpg  \n",
            "  inflating: trainset/P33/000080.jpg  \n",
            "  inflating: trainset/P33/000081.jpg  \n",
            "  inflating: trainset/P33/000082.jpg  \n",
            "  inflating: trainset/P33/000083.jpg  \n",
            "  inflating: trainset/P33/000084.jpg  \n",
            "  inflating: trainset/P33/000085.jpg  \n",
            "  inflating: trainset/P33/000086.jpg  \n",
            "  inflating: trainset/P33/000087.jpg  \n",
            "  inflating: trainset/P33/000088.jpg  \n",
            "  inflating: trainset/P33/000089.jpg  \n",
            "  inflating: trainset/P33/000090.jpg  \n",
            "  inflating: trainset/P33/000091.jpg  \n",
            "  inflating: trainset/P33/000092.jpg  \n",
            "  inflating: trainset/P33/000093.jpg  \n",
            "  inflating: trainset/P33/000094.jpg  \n",
            "  inflating: trainset/P33/000095.jpg  \n",
            "  inflating: trainset/P33/000096.jpg  \n",
            "  inflating: trainset/P33/000097.jpg  \n",
            "  inflating: trainset/P33/000098.jpg  \n",
            "  inflating: trainset/P33/000099.jpg  \n",
            "  inflating: trainset/P33/000100.jpg  \n",
            "  inflating: trainset/P33/000101.jpg  \n",
            "  inflating: trainset/P33/000102.jpg  \n",
            "  inflating: trainset/P33/000103.jpg  \n",
            "  inflating: trainset/P33/000104.jpg  \n",
            "  inflating: trainset/P33/000105.jpg  \n",
            "  inflating: trainset/P33/000106.jpg  \n",
            "  inflating: trainset/P33/000107.jpg  \n",
            "  inflating: trainset/P33/000108.jpg  \n",
            "  inflating: trainset/P33/000109.jpg  \n",
            "  inflating: trainset/P33/000110.jpg  \n",
            "  inflating: trainset/P33/000111.jpg  \n",
            "  inflating: trainset/P33/000112.jpg  \n",
            "  inflating: trainset/P33/000113.jpg  \n",
            "  inflating: trainset/P33/000114.jpg  \n",
            "  inflating: trainset/P33/000115.jpg  \n",
            "  inflating: trainset/P33/000116.jpg  \n",
            "  inflating: trainset/P33/000117.jpg  \n",
            "  inflating: trainset/P33/000118.jpg  \n",
            "  inflating: trainset/P33/000119.jpg  \n",
            "  inflating: trainset/P33/000120.jpg  \n",
            "  inflating: trainset/P33/000121.jpg  \n",
            "  inflating: trainset/P33/000122.jpg  \n",
            "  inflating: trainset/P33/000123.jpg  \n",
            "  inflating: trainset/P33/000124.jpg  \n",
            "  inflating: trainset/P33/000125.jpg  \n",
            "  inflating: trainset/P33/000126.jpg  \n",
            "  inflating: trainset/P33/000127.jpg  \n",
            "  inflating: trainset/P33/000128.jpg  \n",
            "  inflating: trainset/P33/000129.jpg  \n",
            "  inflating: trainset/P33/000130.jpg  \n",
            "  inflating: trainset/P33/000131.jpg  \n",
            "  inflating: trainset/P33/000132.jpg  \n",
            "  inflating: trainset/P33/000133.jpg  \n",
            "  inflating: trainset/P33/000134.jpg  \n",
            "  inflating: trainset/P33/000135.jpg  \n",
            "  inflating: trainset/P33/000136.jpg  \n",
            "  inflating: trainset/P33/000137.jpg  \n",
            "  inflating: trainset/P33/000138.jpg  \n",
            "  inflating: trainset/P33/000139.jpg  \n",
            "  inflating: trainset/P33/000140.jpg  \n",
            "  inflating: trainset/P33/000141.jpg  \n",
            "  inflating: trainset/P33/000142.jpg  \n",
            "  inflating: trainset/P33/000143.jpg  \n",
            "  inflating: trainset/P33/000144.jpg  \n",
            "  inflating: trainset/P33/000145.jpg  \n",
            "  inflating: trainset/P33/000146.jpg  \n",
            "  inflating: trainset/P33/000147.jpg  \n",
            "  inflating: trainset/P33/000148.jpg  \n",
            "  inflating: trainset/P33/000149.jpg  \n",
            "  inflating: trainset/P33/000150.jpg  \n",
            "  inflating: trainset/P33/000151.jpg  \n",
            "  inflating: trainset/P33/000152.jpg  \n",
            "  inflating: trainset/P33/000153.jpg  \n",
            "  inflating: trainset/P33/000154.jpg  \n",
            "  inflating: trainset/P33/000155.jpg  \n",
            "  inflating: trainset/P34/000000.jpg  \n",
            "  inflating: trainset/P34/000001.jpg  \n",
            "  inflating: trainset/P34/000002.jpg  \n",
            "  inflating: trainset/P34/000003.jpg  \n",
            "  inflating: trainset/P34/000004.jpg  \n",
            "  inflating: trainset/P34/000005.jpg  \n",
            "  inflating: trainset/P34/000006.jpg  \n",
            "  inflating: trainset/P34/000007.jpg  \n",
            "  inflating: trainset/P34/000008.jpg  \n",
            "  inflating: trainset/P34/000009.jpg  \n",
            "  inflating: trainset/P34/000010.jpg  \n",
            "  inflating: trainset/P34/000011.jpg  \n",
            "  inflating: trainset/P34/000012.jpg  \n",
            "  inflating: trainset/P34/000013.jpg  \n",
            "  inflating: trainset/P34/000014.jpg  \n",
            "  inflating: trainset/P34/000015.jpg  \n",
            "  inflating: trainset/P34/000016.jpg  \n",
            "  inflating: trainset/P34/000017.jpg  \n",
            "  inflating: trainset/P34/000018.jpg  \n",
            "  inflating: trainset/P34/000019.jpg  \n",
            "  inflating: trainset/P34/000020.jpg  \n",
            "  inflating: trainset/P34/000021.jpg  \n",
            "  inflating: trainset/P34/000022.jpg  \n",
            "  inflating: trainset/P34/000023.jpg  \n",
            "  inflating: trainset/P34/000024.jpg  \n",
            "  inflating: trainset/P34/000025.jpg  \n",
            "  inflating: trainset/P34/000026.jpg  \n",
            "  inflating: trainset/P34/000027.jpg  \n",
            "  inflating: trainset/P34/000028.jpg  \n",
            "  inflating: trainset/P34/000029.jpg  \n",
            "  inflating: trainset/P34/000030.jpg  \n",
            "  inflating: trainset/P34/000031.jpg  \n",
            "  inflating: trainset/P34/000032.jpg  \n",
            "  inflating: trainset/P34/000033.jpg  \n",
            "  inflating: trainset/P34/000034.jpg  \n",
            "  inflating: trainset/P34/000035.jpg  \n",
            "  inflating: trainset/P34/000036.jpg  \n",
            "  inflating: trainset/P34/000037.jpg  \n",
            "  inflating: trainset/P34/000038.jpg  \n",
            "  inflating: trainset/P34/000039.jpg  \n",
            "  inflating: trainset/P34/000040.jpg  \n",
            "  inflating: trainset/P34/000041.jpg  \n",
            "  inflating: trainset/P34/000042.jpg  \n",
            "  inflating: trainset/P34/000043.jpg  \n",
            "  inflating: trainset/P34/000044.jpg  \n",
            "  inflating: trainset/P34/000045.jpg  \n",
            "  inflating: trainset/P34/000046.jpg  \n",
            "  inflating: trainset/P34/000047.jpg  \n",
            "  inflating: trainset/P34/000048.jpg  \n",
            "  inflating: trainset/P34/000049.jpg  \n",
            "  inflating: trainset/P35/000000.jpg  \n",
            "  inflating: trainset/P35/000001.jpg  \n",
            "  inflating: trainset/P35/000002.jpg  \n",
            "  inflating: trainset/P35/000003.jpg  \n",
            "  inflating: trainset/P35/000004.jpg  \n",
            "  inflating: trainset/P35/000005.jpg  \n",
            "  inflating: trainset/P35/000006.jpg  \n",
            "  inflating: trainset/P35/000007.jpg  \n",
            "  inflating: trainset/P35/000008.jpg  \n",
            "  inflating: trainset/P35/000009.jpg  \n",
            "  inflating: trainset/P35/000010.jpg  \n",
            "  inflating: trainset/P35/000011.jpg  \n",
            "  inflating: trainset/P35/000012.jpg  \n",
            "  inflating: trainset/P35/000013.jpg  \n",
            "  inflating: trainset/P35/000014.jpg  \n",
            "  inflating: trainset/P35/000015.jpg  \n",
            "  inflating: trainset/P35/000016.jpg  \n",
            "  inflating: trainset/P35/000017.jpg  \n",
            "  inflating: trainset/P35/000018.jpg  \n",
            "  inflating: trainset/P35/000019.jpg  \n",
            "  inflating: trainset/P35/000020.jpg  \n",
            "  inflating: trainset/P35/000021.jpg  \n",
            "  inflating: trainset/P35/000022.jpg  \n",
            "  inflating: trainset/P35/000023.jpg  \n",
            "  inflating: trainset/P35/000024.jpg  \n",
            "  inflating: trainset/P35/000025.jpg  \n",
            "  inflating: trainset/P35/000026.jpg  \n",
            "  inflating: trainset/P35/000027.jpg  \n",
            "  inflating: trainset/P35/000028.jpg  \n",
            "  inflating: trainset/P35/000029.jpg  \n",
            "  inflating: trainset/P35/000030.jpg  \n",
            "  inflating: trainset/P35/000031.jpg  \n",
            "  inflating: trainset/P35/000032.jpg  \n",
            "  inflating: trainset/P35/000033.jpg  \n",
            "  inflating: trainset/P35/000034.jpg  \n",
            "  inflating: trainset/P35/000035.jpg  \n",
            "  inflating: trainset/P35/000036.jpg  \n",
            "  inflating: trainset/P35/000037.jpg  \n",
            "  inflating: trainset/P35/000038.jpg  \n",
            "  inflating: trainset/P35/000039.jpg  \n",
            "  inflating: trainset/P35/000040.jpg  \n",
            "  inflating: trainset/P35/000041.jpg  \n",
            "  inflating: trainset/P35/000042.jpg  \n",
            "  inflating: trainset/P35/000043.jpg  \n",
            "  inflating: trainset/P35/000044.jpg  \n",
            "  inflating: trainset/P35/000045.jpg  \n",
            "  inflating: trainset/P35/000046.jpg  \n",
            "  inflating: trainset/P35/000047.jpg  \n",
            "  inflating: trainset/P35/000048.jpg  \n",
            "  inflating: trainset/P35/000049.jpg  \n",
            "  inflating: trainset/P35/000050.jpg  \n",
            "  inflating: trainset/P35/000051.jpg  \n",
            "  inflating: trainset/P35/000052.jpg  \n",
            "  inflating: trainset/P35/000053.jpg  \n",
            "  inflating: trainset/P35/000054.jpg  \n",
            "  inflating: trainset/P35/000055.jpg  \n",
            "  inflating: trainset/P35/000056.jpg  \n",
            "  inflating: trainset/P35/000057.jpg  \n",
            "  inflating: trainset/P35/000058.jpg  \n",
            "  inflating: trainset/P35/000059.jpg  \n",
            "  inflating: trainset/P35/000060.jpg  \n",
            "  inflating: trainset/P35/000061.jpg  \n",
            "  inflating: trainset/P35/000062.jpg  \n",
            "  inflating: trainset/P35/000063.jpg  \n",
            "  inflating: trainset/P35/000064.jpg  \n",
            "  inflating: trainset/P35/000065.jpg  \n",
            "  inflating: trainset/P35/000066.jpg  \n",
            "  inflating: trainset/P35/000067.jpg  \n",
            "  inflating: trainset/P35/000068.jpg  \n",
            "  inflating: trainset/P35/000069.jpg  \n",
            "  inflating: trainset/P35/000070.jpg  \n",
            "  inflating: trainset/P35/000071.jpg  \n",
            "  inflating: trainset/P35/000072.jpg  \n",
            "  inflating: trainset/P35/000073.jpg  \n",
            "  inflating: trainset/P35/000074.jpg  \n",
            "  inflating: trainset/P35/000075.jpg  \n",
            "  inflating: trainset/P35/000076.jpg  \n",
            "  inflating: trainset/P35/000077.jpg  \n",
            "  inflating: trainset/P35/000078.jpg  \n",
            "  inflating: trainset/P35/000079.jpg  \n",
            "  inflating: trainset/P35/000080.jpg  \n",
            "  inflating: trainset/P35/000081.jpg  \n",
            "  inflating: trainset/P35/000082.jpg  \n",
            "  inflating: trainset/P35/000083.jpg  \n",
            "  inflating: trainset/P35/000084.jpg  \n",
            "  inflating: trainset/P35/000085.jpg  \n",
            "  inflating: trainset/P35/000086.jpg  \n",
            "  inflating: trainset/P35/000087.jpg  \n",
            "  inflating: trainset/P35/000088.jpg  \n",
            "  inflating: trainset/P35/000089.jpg  \n",
            "  inflating: trainset/P35/000090.jpg  \n",
            "  inflating: trainset/P35/000091.jpg  \n",
            "  inflating: trainset/P35/000092.jpg  \n",
            "  inflating: trainset/P35/000093.jpg  \n",
            "  inflating: trainset/P35/000094.jpg  \n",
            "  inflating: trainset/P35/000095.jpg  \n",
            "  inflating: trainset/P35/000096.jpg  \n",
            "  inflating: trainset/P35/000097.jpg  \n",
            "  inflating: trainset/P35/000098.jpg  \n",
            "  inflating: trainset/P35/000099.jpg  \n",
            "  inflating: trainset/P35/000100.jpg  \n",
            "  inflating: trainset/P35/000101.jpg  \n",
            "  inflating: trainset/P35/000102.jpg  \n",
            "  inflating: trainset/P35/000103.jpg  \n",
            "  inflating: trainset/P35/000104.jpg  \n",
            "  inflating: trainset/P35/000105.jpg  \n",
            "  inflating: trainset/P35/000106.jpg  \n",
            "  inflating: trainset/P35/000107.jpg  \n",
            "  inflating: trainset/P35/000108.jpg  \n",
            "  inflating: trainset/P35/000109.jpg  \n",
            "  inflating: trainset/P35/000110.jpg  \n",
            "  inflating: trainset/P35/000111.jpg  \n",
            "  inflating: trainset/P35/000112.jpg  \n",
            "  inflating: trainset/P35/000113.jpg  \n",
            "  inflating: trainset/P35/000114.jpg  \n",
            "  inflating: trainset/P35/000115.jpg  \n",
            "  inflating: trainset/P35/000116.jpg  \n",
            "  inflating: trainset/P35/000117.jpg  \n",
            "  inflating: trainset/P35/000118.jpg  \n",
            "  inflating: trainset/P35/000119.jpg  \n",
            "  inflating: trainset/P35/000120.jpg  \n",
            "  inflating: trainset/P35/000121.jpg  \n",
            "  inflating: trainset/P35/000122.jpg  \n",
            "  inflating: trainset/P35/000123.jpg  \n",
            "  inflating: trainset/P35/000124.jpg  \n",
            "  inflating: trainset/P35/000125.jpg  \n",
            "  inflating: trainset/P35/000126.jpg  \n",
            "  inflating: trainset/P35/000127.jpg  \n",
            "  inflating: trainset/P35/000128.jpg  \n",
            "  inflating: trainset/P35/000129.jpg  \n",
            "  inflating: trainset/P35/000130.jpg  \n",
            "  inflating: trainset/P35/000131.jpg  \n",
            "  inflating: trainset/P35/000132.jpg  \n",
            "  inflating: trainset/P35/000133.jpg  \n",
            "  inflating: trainset/P35/000134.jpg  \n",
            "  inflating: trainset/P35/000135.jpg  \n",
            "  inflating: trainset/P35/000136.jpg  \n",
            "  inflating: trainset/P35/000137.jpg  \n",
            "  inflating: trainset/P35/000138.jpg  \n",
            "  inflating: trainset/P35/000139.jpg  \n",
            "  inflating: trainset/P35/000140.jpg  \n",
            "  inflating: trainset/P35/000141.jpg  \n",
            "  inflating: trainset/P35/000142.jpg  \n",
            "  inflating: trainset/P35/000143.jpg  \n",
            "  inflating: trainset/P35/000144.jpg  \n",
            "  inflating: trainset/P35/000145.jpg  \n",
            "  inflating: trainset/P35/000146.jpg  \n",
            "  inflating: trainset/P35/000147.jpg  \n",
            "  inflating: trainset/P35/000148.jpg  \n",
            "  inflating: trainset/P35/000149.jpg  \n",
            "  inflating: trainset/P35/000150.jpg  \n",
            "  inflating: trainset/P35/000151.jpg  \n",
            "  inflating: trainset/P35/000152.jpg  \n",
            "  inflating: trainset/P35/000153.jpg  \n",
            "  inflating: trainset/P35/000154.jpg  \n",
            "  inflating: trainset/P35/000155.jpg  \n",
            "  inflating: trainset/P35/000156.jpg  \n",
            "  inflating: trainset/P35/000157.jpg  \n",
            "  inflating: trainset/P35/000158.jpg  \n",
            "  inflating: trainset/P35/000159.jpg  \n",
            "  inflating: trainset/P35/000160.jpg  \n",
            "  inflating: trainset/P35/000161.jpg  \n",
            "  inflating: trainset/P35/000162.jpg  \n",
            "  inflating: trainset/P35/000163.jpg  \n",
            "  inflating: trainset/P35/000164.jpg  \n",
            "  inflating: trainset/P35/000165.jpg  \n",
            "  inflating: trainset/P35/000166.jpg  \n",
            "  inflating: trainset/P35/000167.jpg  \n",
            "  inflating: trainset/P35/000168.jpg  \n",
            "  inflating: trainset/P35/000169.jpg  \n",
            "  inflating: trainset/P35/000170.jpg  \n",
            "  inflating: trainset/P35/000171.jpg  \n",
            "  inflating: trainset/P35/000172.jpg  \n",
            "  inflating: trainset/P35/000173.jpg  \n",
            "  inflating: trainset/P35/000174.jpg  \n",
            "  inflating: trainset/P35/000175.jpg  \n",
            "  inflating: trainset/P35/000176.jpg  \n",
            "  inflating: trainset/P35/000177.jpg  \n",
            "  inflating: trainset/P35/000178.jpg  \n",
            "  inflating: trainset/P35/000179.jpg  \n",
            "  inflating: trainset/P35/000180.jpg  \n",
            "  inflating: trainset/P35/000181.jpg  \n",
            "  inflating: trainset/P35/000182.jpg  \n",
            "  inflating: trainset/P35/000183.jpg  \n",
            "  inflating: trainset/P35/000184.jpg  \n",
            "  inflating: trainset/P35/000185.jpg  \n",
            "  inflating: trainset/P35/000186.jpg  \n",
            "  inflating: trainset/P35/000187.jpg  \n",
            "  inflating: trainset/P35/000188.jpg  \n",
            "  inflating: trainset/P35/000189.jpg  \n",
            "  inflating: trainset/P35/000190.jpg  \n",
            "  inflating: trainset/P35/000191.jpg  \n",
            "  inflating: trainset/P35/000192.jpg  \n",
            "  inflating: trainset/P35/000193.jpg  \n",
            "  inflating: trainset/P35/000194.jpg  \n",
            "  inflating: trainset/P35/000195.jpg  \n",
            "  inflating: trainset/P35/000196.jpg  \n",
            "  inflating: trainset/P35/000197.jpg  \n",
            "  inflating: trainset/P36/000000.jpg  \n",
            "  inflating: trainset/P36/000001.jpg  \n",
            "  inflating: trainset/P36/000002.jpg  \n",
            "  inflating: trainset/P36/000003.jpg  \n",
            "  inflating: trainset/P36/000004.jpg  \n",
            "  inflating: trainset/P36/000005.jpg  \n",
            "  inflating: trainset/P36/000006.jpg  \n",
            "  inflating: trainset/P36/000007.jpg  \n",
            "  inflating: trainset/P36/000008.jpg  \n",
            "  inflating: trainset/P36/000009.jpg  \n",
            "  inflating: trainset/P36/000010.jpg  \n",
            "  inflating: trainset/P36/000011.jpg  \n",
            "  inflating: trainset/P36/000012.jpg  \n",
            "  inflating: trainset/P36/000013.jpg  \n",
            "  inflating: trainset/P36/000014.jpg  \n",
            "  inflating: trainset/P36/000015.jpg  \n",
            "  inflating: trainset/P36/000016.jpg  \n",
            "  inflating: trainset/P36/000017.jpg  \n",
            "  inflating: trainset/P36/000018.jpg  \n",
            "  inflating: trainset/P36/000019.jpg  \n",
            "  inflating: trainset/P36/000020.jpg  \n",
            "  inflating: trainset/P36/000021.jpg  \n",
            "  inflating: trainset/P36/000022.jpg  \n",
            "  inflating: trainset/P36/000023.jpg  \n",
            "  inflating: trainset/P36/000024.jpg  \n",
            "  inflating: trainset/P36/000025.jpg  \n",
            "  inflating: trainset/P36/000026.jpg  \n",
            "  inflating: trainset/P36/000027.jpg  \n",
            "  inflating: trainset/P36/000028.jpg  \n",
            "  inflating: trainset/P36/000029.jpg  \n",
            "  inflating: trainset/P36/000030.jpg  \n",
            "  inflating: trainset/P36/000031.jpg  \n",
            "  inflating: trainset/P36/000032.jpg  \n",
            "  inflating: trainset/P36/000033.jpg  \n",
            "  inflating: trainset/P36/000034.jpg  \n",
            "  inflating: trainset/P36/000035.jpg  \n",
            "  inflating: trainset/P36/000036.jpg  \n",
            "  inflating: trainset/P36/000037.jpg  \n",
            "  inflating: trainset/P36/000038.jpg  \n",
            "  inflating: trainset/P36/000039.jpg  \n",
            "  inflating: trainset/P36/000040.jpg  \n",
            "  inflating: trainset/P36/000041.jpg  \n",
            "  inflating: trainset/P36/000042.jpg  \n",
            "  inflating: trainset/P36/000043.jpg  \n",
            "  inflating: trainset/P36/000044.jpg  \n",
            "  inflating: trainset/P36/000045.jpg  \n",
            "  inflating: trainset/P36/000046.jpg  \n",
            "  inflating: trainset/P36/000047.jpg  \n",
            "  inflating: trainset/P36/000048.jpg  \n",
            "  inflating: trainset/P37/000000.jpg  \n",
            "  inflating: trainset/P37/000001.jpg  \n",
            "  inflating: trainset/P37/000002.jpg  \n",
            "  inflating: trainset/P37/000003.jpg  \n",
            "  inflating: trainset/P37/000004.jpg  \n",
            "  inflating: trainset/P37/000005.jpg  \n",
            "  inflating: trainset/P37/000006.jpg  \n",
            "  inflating: trainset/P37/000007.jpg  \n",
            "  inflating: trainset/P37/000008.jpg  \n",
            "  inflating: trainset/P37/000009.jpg  \n",
            "  inflating: trainset/P37/000010.jpg  \n",
            "  inflating: trainset/P37/000011.jpg  \n",
            "  inflating: trainset/P37/000012.jpg  \n",
            "  inflating: trainset/P37/000013.jpg  \n",
            "  inflating: trainset/P37/000014.jpg  \n",
            "  inflating: trainset/P37/000015.jpg  \n",
            "  inflating: trainset/P37/000016.jpg  \n",
            "  inflating: trainset/P37/000017.jpg  \n",
            "  inflating: trainset/P37/000018.jpg  \n",
            "  inflating: trainset/P37/000019.jpg  \n",
            "  inflating: trainset/P37/000020.jpg  \n",
            "  inflating: trainset/P37/000021.jpg  \n",
            "  inflating: trainset/P37/000022.jpg  \n",
            "  inflating: trainset/P37/000023.jpg  \n",
            "  inflating: trainset/P37/000024.jpg  \n",
            "  inflating: trainset/P37/000025.jpg  \n",
            "  inflating: trainset/P37/000026.jpg  \n",
            "  inflating: trainset/P37/000027.jpg  \n",
            "  inflating: trainset/P37/000028.jpg  \n",
            "  inflating: trainset/P37/000029.jpg  \n",
            "  inflating: trainset/P37/000030.jpg  \n",
            "  inflating: trainset/P37/000031.jpg  \n",
            "  inflating: trainset/P37/000032.jpg  \n",
            "  inflating: trainset/P37/000033.jpg  \n",
            "  inflating: trainset/P37/000034.jpg  \n",
            "  inflating: trainset/P37/000035.jpg  \n",
            "  inflating: trainset/P37/000036.jpg  \n",
            "  inflating: trainset/P37/000037.jpg  \n",
            "  inflating: trainset/P37/000038.jpg  \n",
            "  inflating: trainset/P37/000039.jpg  \n",
            "  inflating: trainset/P37/000040.jpg  \n",
            "  inflating: trainset/P37/000041.jpg  \n",
            "  inflating: trainset/P37/000042.jpg  \n",
            "  inflating: trainset/P37/000043.jpg  \n",
            "  inflating: trainset/P37/000044.jpg  \n",
            "  inflating: trainset/P37/000045.jpg  \n",
            "  inflating: trainset/P37/000046.jpg  \n",
            "  inflating: trainset/P37/000047.jpg  \n",
            "  inflating: trainset/P37/000048.jpg  \n",
            "  inflating: trainset/P37/000049.jpg  \n",
            "  inflating: trainset/P37/000050.jpg  \n",
            "  inflating: trainset/P37/000051.jpg  \n",
            "  inflating: trainset/P37/000052.jpg  \n",
            "  inflating: trainset/P37/000053.jpg  \n",
            "  inflating: trainset/P37/000054.jpg  \n",
            "  inflating: trainset/P37/000055.jpg  \n",
            "  inflating: trainset/P37/000056.jpg  \n",
            "  inflating: trainset/P37/000057.jpg  \n",
            "  inflating: trainset/P37/000058.jpg  \n",
            "  inflating: trainset/P37/000059.jpg  \n",
            "  inflating: trainset/P37/000060.jpg  \n",
            "  inflating: trainset/P37/000061.jpg  \n",
            "  inflating: trainset/P37/000062.jpg  \n",
            "  inflating: trainset/P37/000063.jpg  \n",
            "  inflating: trainset/P37/000064.jpg  \n",
            "  inflating: trainset/P37/000065.jpg  \n",
            "  inflating: trainset/P37/000066.jpg  \n",
            "  inflating: trainset/P37/000067.jpg  \n",
            "  inflating: trainset/P37/000068.jpg  \n",
            "  inflating: trainset/P37/000069.jpg  \n",
            "  inflating: trainset/P37/000070.jpg  \n",
            "  inflating: trainset/P37/000071.jpg  \n",
            "  inflating: trainset/P37/000072.jpg  \n",
            "  inflating: trainset/P37/000073.jpg  \n",
            "  inflating: trainset/P37/000074.jpg  \n",
            "  inflating: trainset/P37/000075.jpg  \n",
            "  inflating: trainset/P37/000076.jpg  \n",
            "  inflating: trainset/P37/000077.jpg  \n",
            "  inflating: trainset/P37/000078.jpg  \n",
            "  inflating: trainset/P37/000079.jpg  \n",
            "  inflating: trainset/P37/000080.jpg  \n",
            "  inflating: trainset/P37/000081.jpg  \n",
            "  inflating: trainset/P37/000082.jpg  \n",
            "  inflating: trainset/P37/000083.jpg  \n",
            "  inflating: trainset/P37/000084.jpg  \n",
            "  inflating: trainset/P37/000085.jpg  \n",
            "  inflating: trainset/P37/000086.jpg  \n",
            "  inflating: trainset/P37/000087.jpg  \n",
            "  inflating: trainset/P37/000088.jpg  \n",
            "  inflating: trainset/P37/000089.jpg  \n",
            "  inflating: trainset/P37/000090.jpg  \n",
            "  inflating: trainset/P37/000091.jpg  \n",
            "  inflating: trainset/P37/000092.jpg  \n",
            "  inflating: trainset/P37/000093.jpg  \n",
            "  inflating: trainset/P37/000094.jpg  \n",
            "  inflating: trainset/P37/000095.jpg  \n",
            "  inflating: trainset/P37/000096.jpg  \n",
            "  inflating: trainset/P37/000097.jpg  \n",
            "  inflating: trainset/P37/000098.jpg  \n",
            "  inflating: trainset/P37/000099.jpg  \n",
            "  inflating: trainset/P37/000100.jpg  \n",
            "  inflating: trainset/P37/000101.jpg  \n",
            "  inflating: trainset/P37/000102.jpg  \n",
            "  inflating: trainset/P37/000103.jpg  \n",
            "  inflating: trainset/P37/000104.jpg  \n",
            "  inflating: trainset/P37/000105.jpg  \n",
            "  inflating: trainset/P37/000106.jpg  \n",
            "  inflating: trainset/P37/000107.jpg  \n",
            "  inflating: trainset/P37/000108.jpg  \n",
            "  inflating: trainset/P37/000109.jpg  \n",
            "  inflating: trainset/P37/000110.jpg  \n",
            "  inflating: trainset/P37/000111.jpg  \n",
            "  inflating: trainset/P37/000112.jpg  \n",
            "  inflating: trainset/P37/000113.jpg  \n",
            "  inflating: trainset/P37/000114.jpg  \n",
            "  inflating: trainset/P37/000115.jpg  \n",
            "  inflating: trainset/P37/000116.jpg  \n",
            "  inflating: trainset/P37/000117.jpg  \n",
            "  inflating: trainset/P37/000118.jpg  \n",
            "  inflating: trainset/P37/000119.jpg  \n",
            "  inflating: trainset/P37/000120.jpg  \n",
            "  inflating: trainset/P37/000121.jpg  \n",
            "  inflating: trainset/P37/000122.jpg  \n",
            "  inflating: trainset/P37/000123.jpg  \n",
            "  inflating: trainset/P37/000124.jpg  \n",
            "  inflating: trainset/P37/000125.jpg  \n",
            "  inflating: trainset/P37/000126.jpg  \n",
            "  inflating: trainset/P37/000127.jpg  \n",
            "  inflating: trainset/P37/000128.jpg  \n",
            "  inflating: trainset/P37/000129.jpg  \n",
            "  inflating: trainset/P37/000130.jpg  \n",
            "  inflating: trainset/P37/000131.jpg  \n",
            "  inflating: trainset/P37/000132.jpg  \n",
            "  inflating: trainset/P37/000133.jpg  \n",
            "  inflating: trainset/P37/000134.jpg  \n",
            "  inflating: trainset/P37/000135.jpg  \n",
            "  inflating: trainset/P37/000136.jpg  \n",
            "  inflating: trainset/P37/000137.jpg  \n",
            "  inflating: trainset/P37/000138.jpg  \n",
            "  inflating: trainset/P37/000139.jpg  \n",
            "  inflating: trainset/P37/000140.jpg  \n",
            "  inflating: trainset/P37/000141.jpg  \n",
            "  inflating: trainset/P37/000142.jpg  \n",
            "  inflating: trainset/P37/000143.jpg  \n",
            "  inflating: trainset/P37/000144.jpg  \n",
            "  inflating: trainset/P37/000145.jpg  \n",
            "  inflating: trainset/P37/000146.jpg  \n",
            "  inflating: trainset/P37/000147.jpg  \n",
            "  inflating: trainset/P37/000148.jpg  \n",
            "  inflating: trainset/P37/000149.jpg  \n",
            "  inflating: trainset/P37/000150.jpg  \n",
            "  inflating: trainset/P37/000151.jpg  \n",
            "  inflating: trainset/P37/000152.jpg  \n",
            "  inflating: trainset/P37/000153.jpg  \n",
            "  inflating: trainset/P37/000154.jpg  \n",
            "  inflating: trainset/P37/000155.jpg  \n",
            "  inflating: trainset/P37/000156.jpg  \n",
            "  inflating: trainset/P37/000157.jpg  \n",
            "  inflating: trainset/P37/000158.jpg  \n",
            "  inflating: trainset/P37/000159.jpg  \n",
            "  inflating: trainset/P37/000160.jpg  \n",
            "  inflating: trainset/P37/000161.jpg  \n",
            "  inflating: trainset/P37/000162.jpg  \n",
            "  inflating: trainset/P37/000163.jpg  \n",
            "  inflating: trainset/P37/000164.jpg  \n",
            "  inflating: trainset/P37/000165.jpg  \n",
            "  inflating: trainset/P37/000166.jpg  \n",
            "  inflating: trainset/P37/000167.jpg  \n",
            "  inflating: trainset/P37/000168.jpg  \n",
            "  inflating: trainset/P37/000169.jpg  \n",
            "  inflating: trainset/P38/000000.jpg  \n",
            "  inflating: trainset/P38/000001.jpg  \n",
            "  inflating: trainset/P38/000002.jpg  \n",
            "  inflating: trainset/P38/000003.jpg  \n",
            "  inflating: trainset/P38/000004.jpg  \n",
            "  inflating: trainset/P38/000005.jpg  \n",
            "  inflating: trainset/P38/000006.jpg  \n",
            "  inflating: trainset/P38/000007.jpg  \n",
            "  inflating: trainset/P38/000008.jpg  \n",
            "  inflating: trainset/P38/000009.jpg  \n",
            "  inflating: trainset/P38/000010.jpg  \n",
            "  inflating: trainset/P38/000011.jpg  \n",
            "  inflating: trainset/P38/000012.jpg  \n",
            "  inflating: trainset/P38/000013.jpg  \n",
            "  inflating: trainset/P38/000014.jpg  \n",
            "  inflating: trainset/P38/000015.jpg  \n",
            "  inflating: trainset/P38/000016.jpg  \n",
            "  inflating: trainset/P38/000017.jpg  \n",
            "  inflating: trainset/P38/000018.jpg  \n",
            "  inflating: trainset/P38/000019.jpg  \n",
            "  inflating: trainset/P38/000020.jpg  \n",
            "  inflating: trainset/P38/000021.jpg  \n",
            "  inflating: trainset/P38/000022.jpg  \n",
            "  inflating: trainset/P38/000023.jpg  \n",
            "  inflating: trainset/P38/000024.jpg  \n",
            "  inflating: trainset/P38/000025.jpg  \n",
            "  inflating: trainset/P38/000026.jpg  \n",
            "  inflating: trainset/P38/000027.jpg  \n",
            "  inflating: trainset/P38/000028.jpg  \n",
            "  inflating: trainset/P38/000029.jpg  \n",
            "  inflating: trainset/P38/000030.jpg  \n",
            "  inflating: trainset/P38/000031.jpg  \n",
            "  inflating: trainset/P38/000032.jpg  \n",
            "  inflating: trainset/P38/000033.jpg  \n",
            "  inflating: trainset/P38/000034.jpg  \n",
            "  inflating: trainset/P38/000035.jpg  \n",
            "  inflating: trainset/P38/000036.jpg  \n",
            "  inflating: trainset/P38/000037.jpg  \n",
            "  inflating: trainset/P38/000038.jpg  \n",
            "  inflating: trainset/P38/000039.jpg  \n",
            "  inflating: trainset/P38/000040.jpg  \n",
            "  inflating: trainset/P38/000041.jpg  \n",
            "  inflating: trainset/P38/000042.jpg  \n",
            "  inflating: trainset/P38/000043.jpg  \n",
            "  inflating: trainset/P38/000044.jpg  \n",
            "  inflating: trainset/P39/000000.jpg  \n",
            "  inflating: trainset/P39/000001.jpg  \n",
            "  inflating: trainset/P39/000002.jpg  \n",
            "  inflating: trainset/P39/000003.jpg  \n",
            "  inflating: trainset/P39/000004.jpg  \n",
            "  inflating: trainset/P39/000005.jpg  \n",
            "  inflating: trainset/P39/000006.jpg  \n",
            "  inflating: trainset/P39/000007.jpg  \n",
            "  inflating: trainset/P39/000008.jpg  \n",
            "  inflating: trainset/P39/000009.jpg  \n",
            "  inflating: trainset/P39/000010.jpg  \n",
            "  inflating: trainset/P39/000011.jpg  \n",
            "  inflating: trainset/P39/000012.jpg  \n",
            "  inflating: trainset/P39/000013.jpg  \n",
            "  inflating: trainset/P39/000014.jpg  \n",
            "  inflating: trainset/P39/000015.jpg  \n",
            "  inflating: trainset/P39/000016.jpg  \n",
            "  inflating: trainset/P39/000017.jpg  \n",
            "  inflating: trainset/P39/000018.jpg  \n",
            "  inflating: trainset/P39/000019.jpg  \n",
            "  inflating: trainset/P39/000020.jpg  \n",
            "  inflating: trainset/P39/000021.jpg  \n",
            "  inflating: trainset/P39/000022.jpg  \n",
            "  inflating: trainset/P39/000023.jpg  \n",
            "  inflating: trainset/P39/000024.jpg  \n",
            "  inflating: trainset/P39/000025.jpg  \n",
            "  inflating: trainset/P39/000026.jpg  \n",
            "  inflating: trainset/P39/000027.jpg  \n",
            "  inflating: trainset/P39/000028.jpg  \n",
            "  inflating: trainset/P39/000029.jpg  \n",
            "  inflating: trainset/P39/000030.jpg  \n",
            "  inflating: trainset/P39/000031.jpg  \n",
            "  inflating: trainset/P39/000032.jpg  \n",
            "  inflating: trainset/P39/000033.jpg  \n",
            "  inflating: trainset/P39/000034.jpg  \n",
            "  inflating: trainset/P39/000035.jpg  \n",
            "  inflating: trainset/P40/000000.jpg  \n",
            "  inflating: trainset/P40/000001.jpg  \n",
            "  inflating: trainset/P40/000002.jpg  \n",
            "  inflating: trainset/P40/000003.jpg  \n",
            "  inflating: trainset/P40/000004.jpg  \n",
            "  inflating: trainset/P40/000005.jpg  \n",
            "  inflating: trainset/P40/000006.jpg  \n",
            "  inflating: trainset/P40/000007.jpg  \n",
            "  inflating: trainset/P40/000008.jpg  \n",
            "  inflating: trainset/P40/000009.jpg  \n",
            "  inflating: trainset/P40/000010.jpg  \n",
            "  inflating: trainset/P40/000011.jpg  \n",
            "  inflating: trainset/P40/000012.jpg  \n",
            "  inflating: trainset/P40/000013.jpg  \n",
            "  inflating: trainset/P40/000014.jpg  \n",
            "  inflating: trainset/P40/000015.jpg  \n",
            "  inflating: trainset/P40/000016.jpg  \n",
            "  inflating: trainset/P40/000017.jpg  \n",
            "  inflating: trainset/P40/000018.jpg  \n",
            "  inflating: trainset/P40/000019.jpg  \n",
            "  inflating: trainset/P40/000020.jpg  \n",
            "  inflating: trainset/P40/000021.jpg  \n",
            "  inflating: trainset/P40/000022.jpg  \n",
            "  inflating: trainset/P40/000023.jpg  \n",
            "  inflating: trainset/P40/000024.jpg  \n",
            "  inflating: trainset/P40/000025.jpg  \n",
            "  inflating: trainset/P40/000026.jpg  \n",
            "  inflating: trainset/P40/000027.jpg  \n",
            "  inflating: trainset/P40/000028.jpg  \n",
            "  inflating: trainset/P40/000029.jpg  \n",
            "  inflating: trainset/P40/000030.jpg  \n",
            "  inflating: trainset/P40/000031.jpg  \n",
            "  inflating: trainset/P40/000032.jpg  \n",
            "  inflating: trainset/P40/000033.jpg  \n",
            "  inflating: trainset/P40/000034.jpg  \n",
            "  inflating: trainset/P40/000035.jpg  \n",
            "  inflating: trainset/P40/000036.jpg  \n",
            "  inflating: trainset/P40/000037.jpg  \n",
            "  inflating: trainset/P40/000038.jpg  \n",
            "  inflating: trainset/P40/000039.jpg  \n",
            "  inflating: trainset/P40/000040.jpg  \n",
            "  inflating: trainset/P40/000041.jpg  \n",
            "  inflating: trainset/P40/000042.jpg  \n",
            "  inflating: trainset/P40/000043.jpg  \n",
            "  inflating: trainset/P40/000044.jpg  \n",
            "  inflating: trainset/P40/000045.jpg  \n",
            "  inflating: trainset/P40/000046.jpg  \n",
            "  inflating: trainset/P40/000047.jpg  \n",
            "  inflating: trainset/P40/000048.jpg  \n",
            "  inflating: trainset/P40/000049.jpg  \n",
            "  inflating: trainset/P40/000050.jpg  \n",
            "  inflating: trainset/P40/000051.jpg  \n",
            "  inflating: trainset/P40/000052.jpg  \n",
            "  inflating: trainset/P40/000053.jpg  \n",
            "  inflating: trainset/P40/000054.jpg  \n",
            "  inflating: trainset/P40/000055.jpg  \n",
            "  inflating: trainset/P40/000056.jpg  \n",
            "  inflating: trainset/P40/000057.jpg  \n",
            "  inflating: trainset/P40/000058.jpg  \n",
            "  inflating: trainset/P40/000059.jpg  \n",
            "  inflating: trainset/P40/000060.jpg  \n",
            "  inflating: trainset/P40/000061.jpg  \n",
            "  inflating: trainset/P40/000062.jpg  \n",
            "  inflating: trainset/P40/000063.jpg  \n",
            "  inflating: trainset/P40/000064.jpg  \n",
            "  inflating: trainset/P40/000065.jpg  \n",
            "  inflating: trainset/P40/000066.jpg  \n",
            "  inflating: trainset/P40/000067.jpg  \n",
            "  inflating: trainset/P40/000068.jpg  \n",
            "  inflating: trainset/P40/000069.jpg  \n",
            "  inflating: trainset/P40/000070.jpg  \n",
            "  inflating: trainset/P40/000071.jpg  \n",
            "  inflating: trainset/P40/000072.jpg  \n",
            "  inflating: trainset/P40/000073.jpg  \n",
            "  inflating: trainset/P40/000074.jpg  \n",
            "  inflating: trainset/P40/000075.jpg  \n",
            "  inflating: trainset/P40/000076.jpg  \n",
            "  inflating: trainset/P40/000077.jpg  \n",
            "  inflating: trainset/P40/000078.jpg  \n",
            "  inflating: trainset/P40/000079.jpg  \n",
            "  inflating: trainset/P40/000080.jpg  \n",
            "  inflating: trainset/P40/000081.jpg  \n",
            "  inflating: trainset/P40/000082.jpg  \n",
            "  inflating: trainset/P40/000083.jpg  \n",
            "  inflating: trainset/P40/000084.jpg  \n",
            "  inflating: trainset/P40/000085.jpg  \n",
            "  inflating: trainset/P40/000086.jpg  \n",
            "  inflating: trainset/P40/000087.jpg  \n",
            "  inflating: trainset/P40/000088.jpg  \n",
            "  inflating: trainset/P41/000000.jpg  \n",
            "  inflating: trainset/P41/000001.jpg  \n",
            "  inflating: trainset/P41/000002.jpg  \n",
            "  inflating: trainset/P41/000003.jpg  \n",
            "  inflating: trainset/P41/000004.jpg  \n",
            "  inflating: trainset/P41/000005.jpg  \n",
            "  inflating: trainset/P41/000006.jpg  \n",
            "  inflating: trainset/P41/000007.jpg  \n",
            "  inflating: trainset/P41/000008.jpg  \n",
            "  inflating: trainset/P41/000009.jpg  \n",
            "  inflating: trainset/P41/000010.jpg  \n",
            "  inflating: trainset/P41/000011.jpg  \n",
            "  inflating: trainset/P41/000012.jpg  \n",
            "  inflating: trainset/P41/000013.jpg  \n",
            "  inflating: trainset/P41/000014.jpg  \n",
            "  inflating: trainset/P41/000015.jpg  \n",
            "  inflating: trainset/P41/000016.jpg  \n",
            "  inflating: trainset/P41/000017.jpg  \n",
            "  inflating: trainset/P41/000018.jpg  \n",
            "  inflating: trainset/P41/000019.jpg  \n",
            "  inflating: trainset/P41/000020.jpg  \n",
            "  inflating: trainset/P41/000021.jpg  \n",
            "  inflating: trainset/P41/000022.jpg  \n",
            "  inflating: trainset/P41/000023.jpg  \n",
            "  inflating: trainset/P41/000024.jpg  \n",
            "  inflating: trainset/P41/000025.jpg  \n",
            "  inflating: trainset/P41/000026.jpg  \n",
            "  inflating: trainset/P41/000027.jpg  \n",
            "  inflating: trainset/P41/000028.jpg  \n",
            "  inflating: trainset/P41/000029.jpg  \n",
            "  inflating: trainset/P41/000030.jpg  \n",
            "  inflating: trainset/P41/000031.jpg  \n",
            "  inflating: trainset/P41/000032.jpg  \n",
            "  inflating: trainset/P41/000033.jpg  \n",
            "  inflating: trainset/P41/000034.jpg  \n",
            "  inflating: trainset/P41/000035.jpg  \n",
            "  inflating: trainset/P41/000036.jpg  \n",
            "  inflating: trainset/P41/000037.jpg  \n",
            "  inflating: trainset/P41/000038.jpg  \n",
            "  inflating: trainset/P41/000039.jpg  \n",
            "  inflating: trainset/P41/000040.jpg  \n",
            "  inflating: trainset/P41/000041.jpg  \n",
            "  inflating: trainset/P41/000042.jpg  \n",
            "  inflating: trainset/P41/000043.jpg  \n",
            "  inflating: trainset/P41/000044.jpg  \n",
            "  inflating: trainset/P41/000045.jpg  \n",
            "  inflating: trainset/P41/000046.jpg  \n",
            "  inflating: trainset/P41/000047.jpg  \n",
            "  inflating: trainset/P41/000048.jpg  \n",
            "  inflating: trainset/P41/000049.jpg  \n",
            "  inflating: trainset/P41/000050.jpg  \n",
            "  inflating: trainset/P41/000051.jpg  \n",
            "  inflating: trainset/P41/000052.jpg  \n",
            "  inflating: trainset/P42/000000.jpg  \n",
            "  inflating: trainset/P42/000001.jpg  \n",
            "  inflating: trainset/P42/000002.jpg  \n",
            "  inflating: trainset/P42/000003.jpg  \n",
            "  inflating: trainset/P42/000004.jpg  \n",
            "  inflating: trainset/P42/000005.jpg  \n",
            "  inflating: trainset/P42/000006.jpg  \n",
            "  inflating: trainset/P42/000007.jpg  \n",
            "  inflating: trainset/P42/000008.jpg  \n",
            "  inflating: trainset/P42/000009.jpg  \n",
            "  inflating: trainset/P42/000010.jpg  \n",
            "  inflating: trainset/P42/000011.jpg  \n",
            "  inflating: trainset/P42/000012.jpg  \n",
            "  inflating: trainset/P42/000013.jpg  \n",
            "  inflating: trainset/P42/000014.jpg  \n",
            "  inflating: trainset/P42/000015.jpg  \n",
            "  inflating: trainset/P42/000016.jpg  \n",
            "  inflating: trainset/P42/000017.jpg  \n",
            "  inflating: trainset/P42/000018.jpg  \n",
            "  inflating: trainset/P42/000019.jpg  \n",
            "  inflating: trainset/P42/000020.jpg  \n",
            "  inflating: trainset/P42/000021.jpg  \n",
            "  inflating: trainset/P42/000022.jpg  \n",
            "  inflating: trainset/P42/000023.jpg  \n",
            "  inflating: trainset/P42/000024.jpg  \n",
            "  inflating: trainset/P42/000025.jpg  \n",
            "  inflating: trainset/P42/000026.jpg  \n",
            "  inflating: trainset/P42/000027.jpg  \n",
            "  inflating: trainset/P42/000028.jpg  \n",
            "  inflating: trainset/P42/000029.jpg  \n",
            "  inflating: trainset/P42/000030.jpg  \n",
            "  inflating: trainset/P42/000031.jpg  \n",
            "  inflating: trainset/P42/000032.jpg  \n",
            "  inflating: trainset/P42/000033.jpg  \n",
            "  inflating: trainset/P42/000034.jpg  \n",
            "  inflating: trainset/P42/000035.jpg  \n",
            "  inflating: trainset/P42/000036.jpg  \n",
            "  inflating: trainset/P42/000037.jpg  \n",
            "  inflating: trainset/P42/000038.jpg  \n",
            "  inflating: trainset/P42/000039.jpg  \n",
            "  inflating: trainset/P42/000040.jpg  \n",
            "  inflating: trainset/P42/000041.jpg  \n",
            "  inflating: trainset/P42/000042.jpg  \n",
            "  inflating: trainset/P42/000043.jpg  \n",
            "  inflating: trainset/P42/000044.jpg  \n",
            "  inflating: trainset/P42/000045.jpg  \n",
            "  inflating: trainset/P42/000046.jpg  \n",
            "  inflating: trainset/P42/000047.jpg  \n",
            "  inflating: trainset/P42/000048.jpg  \n",
            "  inflating: trainset/P42/000049.jpg  \n",
            "  inflating: trainset/P42/000050.jpg  \n",
            "  inflating: trainset/P42/000051.jpg  \n",
            "  inflating: trainset/P42/000052.jpg  \n",
            "  inflating: trainset/P42/000053.jpg  \n",
            "  inflating: trainset/P42/000054.jpg  \n",
            "  inflating: trainset/P42/000055.jpg  \n",
            "  inflating: trainset/P42/000056.jpg  \n",
            "  inflating: trainset/P42/000057.jpg  \n",
            "  inflating: trainset/P42/000058.jpg  \n",
            "  inflating: trainset/P42/000059.jpg  \n",
            "  inflating: trainset/P42/000060.jpg  \n",
            "  inflating: trainset/P42/000061.jpg  \n",
            "  inflating: trainset/P42/000062.jpg  \n",
            "  inflating: trainset/P42/000063.jpg  \n",
            "  inflating: trainset/P42/000064.jpg  \n",
            "  inflating: trainset/P42/000065.jpg  \n",
            "  inflating: trainset/P42/000066.jpg  \n",
            "  inflating: trainset/P42/000067.jpg  \n",
            "  inflating: trainset/P42/000068.jpg  \n",
            "  inflating: trainset/P42/000069.jpg  \n",
            "  inflating: trainset/P42/000070.jpg  \n",
            "  inflating: trainset/P42/000071.jpg  \n",
            "  inflating: trainset/P42/000072.jpg  \n",
            "  inflating: trainset/P42/000073.jpg  \n",
            "  inflating: trainset/P42/000074.jpg  \n",
            "  inflating: trainset/P42/000075.jpg  \n",
            "  inflating: trainset/P42/000076.jpg  \n",
            "  inflating: trainset/P42/000077.jpg  \n",
            "  inflating: trainset/P42/000078.jpg  \n",
            "  inflating: trainset/P42/000079.jpg  \n",
            "  inflating: trainset/P42/000080.jpg  \n",
            "  inflating: trainset/P42/000081.jpg  \n",
            "  inflating: trainset/P42/000082.jpg  \n",
            "  inflating: trainset/P42/000083.jpg  \n",
            "  inflating: trainset/P42/000084.jpg  \n",
            "  inflating: trainset/P42/000085.jpg  \n",
            "  inflating: trainset/P42/000086.jpg  \n",
            "  inflating: trainset/P42/000087.jpg  \n",
            "  inflating: trainset/P42/000088.jpg  \n",
            "  inflating: trainset/P42/000089.jpg  \n",
            "  inflating: trainset/P42/000090.jpg  \n",
            "  inflating: trainset/P42/000091.jpg  \n",
            "  inflating: trainset/P42/000092.jpg  \n",
            "  inflating: trainset/P42/000093.jpg  \n",
            "  inflating: trainset/P42/000094.jpg  \n",
            "  inflating: trainset/P42/000095.jpg  \n",
            "  inflating: trainset/P42/000096.jpg  \n",
            "  inflating: trainset/P42/000097.jpg  \n",
            "  inflating: trainset/P42/000098.jpg  \n",
            "  inflating: trainset/P42/000099.jpg  \n",
            "  inflating: trainset/P42/000100.jpg  \n",
            "  inflating: trainset/P42/000101.jpg  \n",
            "  inflating: trainset/P42/000102.jpg  \n",
            "  inflating: trainset/P42/000103.jpg  \n",
            "  inflating: trainset/P42/000104.jpg  \n",
            "  inflating: trainset/P42/000105.jpg  \n",
            "  inflating: trainset/P42/000106.jpg  \n",
            "  inflating: trainset/P42/000107.jpg  \n",
            "  inflating: trainset/P42/000108.jpg  \n",
            "  inflating: trainset/P42/000109.jpg  \n",
            "  inflating: trainset/P42/000110.jpg  \n",
            "  inflating: trainset/P42/000111.jpg  \n",
            "  inflating: trainset/P42/000112.jpg  \n",
            "  inflating: trainset/P42/000113.jpg  \n",
            "  inflating: trainset/P42/000114.jpg  \n",
            "  inflating: trainset/P42/000115.jpg  \n",
            "  inflating: trainset/P42/000116.jpg  \n",
            "  inflating: trainset/P42/000117.jpg  \n",
            "  inflating: trainset/P42/000118.jpg  \n",
            "  inflating: trainset/P42/000119.jpg  \n",
            "  inflating: trainset/P42/000120.jpg  \n",
            "  inflating: trainset/P42/000121.jpg  \n",
            "  inflating: trainset/P42/000122.jpg  \n",
            "  inflating: trainset/P42/000123.jpg  \n",
            "  inflating: trainset/P42/000124.jpg  \n",
            "  inflating: trainset/P42/000125.jpg  \n",
            "  inflating: trainset/P42/000126.jpg  \n",
            "  inflating: trainset/P42/000127.jpg  \n",
            "  inflating: trainset/P42/000128.jpg  \n",
            "  inflating: trainset/P42/000129.jpg  \n",
            "  inflating: trainset/P42/000130.jpg  \n",
            "  inflating: trainset/P42/000131.jpg  \n",
            "  inflating: trainset/P42/000132.jpg  \n",
            "  inflating: trainset/P42/000133.jpg  \n",
            "  inflating: trainset/P42/000134.jpg  \n",
            "  inflating: trainset/P42/000135.jpg  \n",
            "  inflating: trainset/P42/000136.jpg  \n",
            "  inflating: trainset/P42/000137.jpg  \n",
            "  inflating: trainset/P42/000138.jpg  \n",
            "  inflating: trainset/P42/000139.jpg  \n",
            "  inflating: trainset/P42/000140.jpg  \n",
            "  inflating: trainset/P42/000141.jpg  \n",
            "  inflating: trainset/P42/000142.jpg  \n",
            "  inflating: trainset/P42/000143.jpg  \n",
            "  inflating: trainset/P42/000144.jpg  \n",
            "  inflating: trainset/P42/000145.jpg  \n",
            "  inflating: trainset/P42/000146.jpg  \n",
            "  inflating: trainset/P42/000147.jpg  \n",
            "  inflating: trainset/P42/000148.jpg  \n",
            "  inflating: trainset/P42/000149.jpg  \n",
            "  inflating: trainset/P42/000150.jpg  \n",
            "  inflating: trainset/P42/000151.jpg  \n",
            "  inflating: trainset/P42/000152.jpg  \n",
            "  inflating: trainset/P42/000153.jpg  \n",
            "  inflating: trainset/P42/000154.jpg  \n",
            "  inflating: trainset/P42/000155.jpg  \n",
            "  inflating: trainset/P42/000156.jpg  \n",
            "  inflating: trainset/P42/000157.jpg  \n",
            "  inflating: trainset/P42/000158.jpg  \n",
            "  inflating: trainset/P42/000159.jpg  \n",
            "  inflating: trainset/P42/000160.jpg  \n",
            "  inflating: trainset/P42/000161.jpg  \n",
            "  inflating: trainset/P42/000162.jpg  \n",
            "  inflating: trainset/P42/000163.jpg  \n",
            "  inflating: trainset/P42/000164.jpg  \n",
            "  inflating: trainset/P42/000165.jpg  \n",
            "  inflating: trainset/P42/000166.jpg  \n",
            "  inflating: trainset/P42/000167.jpg  \n",
            "  inflating: trainset/P42/000168.jpg  \n",
            "  inflating: trainset/P42/000169.jpg  \n",
            "  inflating: trainset/P42/000170.jpg  \n",
            "  inflating: trainset/P43/000000.jpg  \n",
            "  inflating: trainset/P43/000001.jpg  \n",
            "  inflating: trainset/P43/000002.jpg  \n",
            "  inflating: trainset/P43/000003.jpg  \n",
            "  inflating: trainset/P43/000004.jpg  \n",
            "  inflating: trainset/P43/000005.jpg  \n",
            "  inflating: trainset/P43/000006.jpg  \n",
            "  inflating: trainset/P43/000007.jpg  \n",
            "  inflating: trainset/P43/000008.jpg  \n",
            "  inflating: trainset/P43/000009.jpg  \n",
            "  inflating: trainset/P43/000010.jpg  \n",
            "  inflating: trainset/P43/000011.jpg  \n",
            "  inflating: trainset/P43/000012.jpg  \n",
            "  inflating: trainset/P43/000013.jpg  \n",
            "  inflating: trainset/P43/000014.jpg  \n",
            "  inflating: trainset/P43/000015.jpg  \n",
            "  inflating: trainset/P43/000016.jpg  \n",
            "  inflating: trainset/P43/000017.jpg  \n",
            "  inflating: trainset/P43/000018.jpg  \n",
            "  inflating: trainset/P43/000019.jpg  \n",
            "  inflating: trainset/P43/000020.jpg  \n",
            "  inflating: trainset/P43/000021.jpg  \n",
            "  inflating: trainset/P43/000022.jpg  \n",
            "  inflating: trainset/P43/000023.jpg  \n",
            "  inflating: trainset/P43/000024.jpg  \n",
            "  inflating: trainset/P43/000025.jpg  \n",
            "  inflating: trainset/P43/000026.jpg  \n",
            "  inflating: trainset/P43/000027.jpg  \n",
            "  inflating: trainset/P43/000028.jpg  \n",
            "  inflating: trainset/P43/000029.jpg  \n",
            "  inflating: trainset/P43/000030.jpg  \n",
            "  inflating: trainset/P43/000031.jpg  \n",
            "  inflating: trainset/P43/000032.jpg  \n",
            "  inflating: trainset/P43/000033.jpg  \n",
            "  inflating: trainset/P43/000034.jpg  \n",
            "  inflating: trainset/P43/000035.jpg  \n",
            "  inflating: trainset/P43/000036.jpg  \n",
            "  inflating: trainset/P43/000037.jpg  \n",
            "  inflating: trainset/P43/000038.jpg  \n",
            "  inflating: trainset/P43/000039.jpg  \n",
            "  inflating: trainset/P43/000040.jpg  \n",
            "  inflating: trainset/P43/000041.jpg  \n",
            "  inflating: trainset/P43/000042.jpg  \n",
            "  inflating: trainset/P43/000043.jpg  \n",
            "  inflating: trainset/P43/000044.jpg  \n",
            "  inflating: trainset/P43/000045.jpg  \n",
            "  inflating: trainset/P43/000046.jpg  \n",
            "  inflating: trainset/P43/000047.jpg  \n",
            "  inflating: trainset/P43/000048.jpg  \n",
            "  inflating: trainset/P43/000049.jpg  \n",
            "  inflating: trainset/P43/000050.jpg  \n",
            "  inflating: trainset/P43/000051.jpg  \n",
            "  inflating: trainset/P43/000052.jpg  \n",
            "  inflating: trainset/P43/000053.jpg  \n",
            "  inflating: trainset/P43/000054.jpg  \n",
            "  inflating: trainset/P43/000055.jpg  \n",
            "  inflating: trainset/P43/000056.jpg  \n",
            "  inflating: trainset/P43/000057.jpg  \n",
            "  inflating: trainset/P43/000058.jpg  \n",
            "  inflating: trainset/P43/000059.jpg  \n",
            "  inflating: trainset/P43/000060.jpg  \n",
            "  inflating: trainset/P43/000061.jpg  \n",
            "  inflating: trainset/P43/000062.jpg  \n",
            "  inflating: trainset/P43/000063.jpg  \n",
            "  inflating: trainset/P44/000000.jpg  \n",
            "  inflating: trainset/P44/000001.jpg  \n",
            "  inflating: trainset/P44/000002.jpg  \n",
            "  inflating: trainset/P44/000003.jpg  \n",
            "  inflating: trainset/P44/000004.jpg  \n",
            "  inflating: trainset/P44/000005.jpg  \n",
            "  inflating: trainset/P44/000006.jpg  \n",
            "  inflating: trainset/P44/000007.jpg  \n",
            "  inflating: trainset/P44/000008.jpg  \n",
            "  inflating: trainset/P44/000009.jpg  \n",
            "  inflating: trainset/P44/000010.jpg  \n",
            "  inflating: trainset/P44/000011.jpg  \n",
            "  inflating: trainset/P44/000012.jpg  \n",
            "  inflating: trainset/P44/000013.jpg  \n",
            "  inflating: trainset/P44/000014.jpg  \n",
            "  inflating: trainset/P44/000015.jpg  \n",
            "  inflating: trainset/P44/000016.jpg  \n",
            "  inflating: trainset/P44/000017.jpg  \n",
            "  inflating: trainset/P44/000018.jpg  \n",
            "  inflating: trainset/P44/000019.jpg  \n",
            "  inflating: trainset/P44/000020.jpg  \n",
            "  inflating: trainset/P44/000021.jpg  \n",
            "  inflating: trainset/P44/000022.jpg  \n",
            "  inflating: trainset/P44/000023.jpg  \n",
            "  inflating: trainset/P44/000024.jpg  \n",
            "  inflating: trainset/P44/000025.jpg  \n",
            "  inflating: trainset/P44/000026.jpg  \n",
            "  inflating: trainset/P44/000027.jpg  \n",
            "  inflating: trainset/P44/000028.jpg  \n",
            "  inflating: trainset/P44/000029.jpg  \n",
            "  inflating: trainset/P44/000030.jpg  \n",
            "  inflating: trainset/P44/000031.jpg  \n",
            "  inflating: trainset/P44/000032.jpg  \n",
            "  inflating: trainset/P44/000033.jpg  \n",
            "  inflating: trainset/P44/000034.jpg  \n",
            "  inflating: trainset/P44/000035.jpg  \n",
            "  inflating: trainset/P44/000036.jpg  \n",
            "  inflating: trainset/P44/000037.jpg  \n",
            "  inflating: trainset/P44/000038.jpg  \n",
            "  inflating: trainset/P44/000039.jpg  \n",
            "  inflating: trainset/P44/000040.jpg  \n",
            "  inflating: trainset/P44/000041.jpg  \n",
            "  inflating: trainset/P44/000042.jpg  \n",
            "  inflating: trainset/P44/000043.jpg  \n",
            "  inflating: trainset/P44/000044.jpg  \n",
            "  inflating: trainset/P44/000045.jpg  \n",
            "  inflating: trainset/P44/000046.jpg  \n",
            "  inflating: trainset/P44/000047.jpg  \n",
            "  inflating: trainset/P44/000048.jpg  \n",
            "  inflating: trainset/P44/000049.jpg  \n",
            "  inflating: trainset/P44/000050.jpg  \n",
            "  inflating: trainset/P44/000051.jpg  \n",
            "  inflating: trainset/P44/000052.jpg  \n",
            "  inflating: trainset/P44/000053.jpg  \n",
            "  inflating: trainset/P44/000054.jpg  \n",
            "  inflating: trainset/P44/000055.jpg  \n",
            "  inflating: trainset/P44/000056.jpg  \n",
            "  inflating: trainset/P44/000057.jpg  \n",
            "  inflating: trainset/P44/000058.jpg  \n",
            "  inflating: trainset/P44/000059.jpg  \n",
            "  inflating: trainset/P44/000060.jpg  \n",
            "  inflating: trainset/P44/000061.jpg  \n",
            "  inflating: trainset/P44/000062.jpg  \n",
            "  inflating: trainset/P45/000000.jpg  \n",
            "  inflating: trainset/P45/000001.jpg  \n",
            "  inflating: trainset/P45/000002.jpg  \n",
            "  inflating: trainset/P45/000003.jpg  \n",
            "  inflating: trainset/P45/000004.jpg  \n",
            "  inflating: trainset/P45/000005.jpg  \n",
            "  inflating: trainset/P45/000006.jpg  \n",
            "  inflating: trainset/P45/000007.jpg  \n",
            "  inflating: trainset/P45/000008.jpg  \n",
            "  inflating: trainset/P45/000009.jpg  \n",
            "  inflating: trainset/P45/000010.jpg  \n",
            "  inflating: trainset/P45/000011.jpg  \n",
            "  inflating: trainset/P45/000012.jpg  \n",
            "  inflating: trainset/P45/000013.jpg  \n",
            "  inflating: trainset/P45/000014.jpg  \n",
            "  inflating: trainset/P45/000015.jpg  \n",
            "  inflating: trainset/P45/000016.jpg  \n",
            "  inflating: trainset/P45/000017.jpg  \n",
            "  inflating: trainset/P45/000018.jpg  \n",
            "  inflating: trainset/P45/000019.jpg  \n",
            "  inflating: trainset/P45/000020.jpg  \n",
            "  inflating: trainset/P45/000021.jpg  \n",
            "  inflating: trainset/P45/000022.jpg  \n",
            "  inflating: trainset/P45/000023.jpg  \n",
            "  inflating: trainset/P45/000024.jpg  \n",
            "  inflating: trainset/P45/000025.jpg  \n",
            "  inflating: trainset/P45/000026.jpg  \n",
            "  inflating: trainset/P45/000027.jpg  \n",
            "  inflating: trainset/P45/000028.jpg  \n",
            "  inflating: trainset/P45/000029.jpg  \n",
            "  inflating: trainset/P45/000030.jpg  \n",
            "  inflating: trainset/P45/000031.jpg  \n",
            "  inflating: trainset/P45/000032.jpg  \n",
            "  inflating: trainset/P45/000033.jpg  \n",
            "  inflating: trainset/P45/000034.jpg  \n",
            "  inflating: trainset/P45/000035.jpg  \n",
            "  inflating: trainset/P45/000036.jpg  \n",
            "  inflating: trainset/P45/000037.jpg  \n",
            "  inflating: trainset/P45/000038.jpg  \n",
            "  inflating: trainset/P45/000039.jpg  \n",
            "  inflating: trainset/P45/000040.jpg  \n",
            "  inflating: trainset/P45/000041.jpg  \n",
            "  inflating: trainset/P45/000042.jpg  \n",
            "  inflating: trainset/P45/000043.jpg  \n",
            "  inflating: trainset/P46/000000.jpg  \n",
            "  inflating: trainset/P46/000001.jpg  \n",
            "  inflating: trainset/P46/000002.jpg  \n",
            "  inflating: trainset/P46/000003.jpg  \n",
            "  inflating: trainset/P46/000004.jpg  \n",
            "  inflating: trainset/P46/000005.jpg  \n",
            "  inflating: trainset/P46/000006.jpg  \n",
            "  inflating: trainset/P46/000007.jpg  \n",
            "  inflating: trainset/P46/000008.jpg  \n",
            "  inflating: trainset/P46/000009.jpg  \n",
            "  inflating: trainset/P46/000010.jpg  \n",
            "  inflating: trainset/P46/000011.jpg  \n",
            "  inflating: trainset/P46/000012.jpg  \n",
            "  inflating: trainset/P46/000013.jpg  \n",
            "  inflating: trainset/P46/000014.jpg  \n",
            "  inflating: trainset/P46/000015.jpg  \n",
            "  inflating: trainset/P46/000016.jpg  \n",
            "  inflating: trainset/P46/000017.jpg  \n",
            "  inflating: trainset/P46/000018.jpg  \n",
            "  inflating: trainset/P46/000019.jpg  \n",
            "  inflating: trainset/P46/000020.jpg  \n",
            "  inflating: trainset/P46/000021.jpg  \n",
            "  inflating: trainset/P46/000022.jpg  \n",
            "  inflating: trainset/P46/000023.jpg  \n",
            "  inflating: trainset/P46/000024.jpg  \n",
            "  inflating: trainset/P46/000025.jpg  \n",
            "  inflating: trainset/P46/000026.jpg  \n",
            "  inflating: trainset/P46/000027.jpg  \n",
            "  inflating: trainset/P46/000028.jpg  \n",
            "  inflating: trainset/P46/000029.jpg  \n",
            "  inflating: trainset/P46/000030.jpg  \n",
            "  inflating: trainset/P46/000031.jpg  \n",
            "  inflating: trainset/P46/000032.jpg  \n",
            "  inflating: trainset/P46/000033.jpg  \n",
            "  inflating: trainset/P46/000034.jpg  \n",
            "  inflating: trainset/P46/000035.jpg  \n",
            "  inflating: trainset/P46/000036.jpg  \n",
            "  inflating: trainset/P46/000037.jpg  \n",
            "  inflating: trainset/P46/000038.jpg  \n",
            "  inflating: trainset/P46/000039.jpg  \n",
            "  inflating: trainset/P46/000040.jpg  \n",
            "  inflating: trainset/P46/000041.jpg  \n",
            "  inflating: trainset/P46/000042.jpg  \n",
            "  inflating: trainset/P46/000043.jpg  \n",
            "  inflating: trainset/P46/000044.jpg  \n",
            "  inflating: trainset/P46/000045.jpg  \n",
            "  inflating: trainset/P46/000046.jpg  \n",
            "  inflating: trainset/P46/000047.jpg  \n",
            "  inflating: trainset/P46/000048.jpg  \n",
            "  inflating: trainset/P46/000049.jpg  \n",
            "  inflating: trainset/P46/000050.jpg  \n",
            "  inflating: trainset/P46/000051.jpg  \n",
            "  inflating: trainset/P46/000052.jpg  \n",
            "  inflating: trainset/P46/000053.jpg  \n",
            "  inflating: trainset/P46/000054.jpg  \n",
            "  inflating: trainset/P46/000055.jpg  \n",
            "  inflating: trainset/P46/000056.jpg  \n",
            "  inflating: trainset/P46/000057.jpg  \n",
            "  inflating: trainset/P46/000058.jpg  \n",
            "  inflating: trainset/P46/000059.jpg  \n",
            "  inflating: trainset/P46/000060.jpg  \n",
            "  inflating: trainset/P46/000061.jpg  \n",
            "  inflating: trainset/P46/000062.jpg  \n",
            "  inflating: trainset/P46/000063.jpg  \n",
            "  inflating: trainset/P46/000064.jpg  \n",
            "  inflating: trainset/P46/000065.jpg  \n",
            "  inflating: trainset/P46/000066.jpg  \n",
            "  inflating: trainset/P46/000067.jpg  \n",
            "  inflating: trainset/P46/000068.jpg  \n",
            "  inflating: trainset/P46/000069.jpg  \n",
            "  inflating: trainset/P46/000070.jpg  \n",
            "  inflating: trainset/P46/000071.jpg  \n",
            "  inflating: trainset/P46/000072.jpg  \n",
            "  inflating: trainset/P46/000073.jpg  \n",
            "  inflating: trainset/P46/000074.jpg  \n",
            "  inflating: trainset/P46/000075.jpg  \n",
            "  inflating: trainset/P46/000076.jpg  \n",
            "  inflating: trainset/P46/000077.jpg  \n",
            "  inflating: trainset/P46/000078.jpg  \n",
            "  inflating: trainset/P46/000079.jpg  \n",
            "  inflating: trainset/P46/000080.jpg  \n",
            "  inflating: trainset/P46/000081.jpg  \n",
            "  inflating: trainset/P46/000082.jpg  \n",
            "  inflating: trainset/P46/000083.jpg  \n",
            "  inflating: trainset/P46/000084.jpg  \n",
            "  inflating: trainset/P46/000085.jpg  \n",
            "  inflating: trainset/P46/000086.jpg  \n",
            "  inflating: trainset/P46/000087.jpg  \n",
            "  inflating: trainset/P46/000088.jpg  \n",
            "  inflating: trainset/P46/000089.jpg  \n",
            "  inflating: trainset/P46/000090.jpg  \n",
            "  inflating: trainset/P46/000091.jpg  \n",
            "  inflating: trainset/P46/000092.jpg  \n",
            "  inflating: trainset/P46/000093.jpg  \n",
            "  inflating: trainset/P46/000094.jpg  \n",
            "  inflating: trainset/P46/000095.jpg  \n",
            "  inflating: trainset/P46/000096.jpg  \n",
            "  inflating: trainset/P46/000097.jpg  \n",
            "  inflating: trainset/P46/000098.jpg  \n",
            "  inflating: trainset/P46/000099.jpg  \n",
            "  inflating: trainset/P46/000100.jpg  \n",
            "  inflating: trainset/P46/000101.jpg  \n",
            "  inflating: trainset/P46/000102.jpg  \n",
            "  inflating: trainset/P46/000103.jpg  \n",
            "  inflating: trainset/P46/000104.jpg  \n",
            "  inflating: trainset/P46/000105.jpg  \n",
            "  inflating: trainset/P46/000106.jpg  \n",
            "  inflating: trainset/P46/000107.jpg  \n",
            "  inflating: trainset/P46/000108.jpg  \n",
            "  inflating: trainset/P46/000109.jpg  \n",
            "  inflating: trainset/P46/000110.jpg  \n",
            "  inflating: trainset/P46/000111.jpg  \n",
            "  inflating: trainset/P46/000112.jpg  \n",
            "  inflating: trainset/P46/000113.jpg  \n",
            "  inflating: trainset/P46/000114.jpg  \n",
            "  inflating: trainset/P46/000115.jpg  \n",
            "  inflating: trainset/P46/000116.jpg  \n",
            "  inflating: trainset/P46/000117.jpg  \n",
            "  inflating: trainset/P46/000118.jpg  \n",
            "  inflating: trainset/P46/000119.jpg  \n",
            "  inflating: trainset/P46/000120.jpg  \n",
            "  inflating: trainset/P46/000121.jpg  \n",
            "  inflating: trainset/P46/000122.jpg  \n",
            "  inflating: trainset/P46/000123.jpg  \n",
            "  inflating: trainset/P46/000124.jpg  \n",
            "  inflating: trainset/P46/000125.jpg  \n",
            "  inflating: trainset/P46/000126.jpg  \n",
            "  inflating: trainset/P46/000127.jpg  \n",
            "  inflating: trainset/P46/000128.jpg  \n",
            "  inflating: trainset/P46/000129.jpg  \n",
            "  inflating: trainset/P46/000130.jpg  \n",
            "  inflating: trainset/P46/000131.jpg  \n",
            "  inflating: trainset/P46/000132.jpg  \n",
            "  inflating: trainset/P46/000133.jpg  \n",
            "  inflating: trainset/P46/000134.jpg  \n",
            "  inflating: trainset/P46/000135.jpg  \n",
            "  inflating: trainset/P46/000136.jpg  \n",
            "  inflating: trainset/P46/000137.jpg  \n",
            "  inflating: trainset/P46/000138.jpg  \n",
            "  inflating: trainset/P46/000139.jpg  \n",
            "  inflating: trainset/P46/000140.jpg  \n",
            "  inflating: trainset/P46/000141.jpg  \n",
            "  inflating: trainset/P46/000142.jpg  \n",
            "  inflating: trainset/P46/000143.jpg  \n",
            "  inflating: trainset/P46/000144.jpg  \n",
            "  inflating: trainset/P46/000145.jpg  \n",
            "  inflating: trainset/P46/000146.jpg  \n",
            "  inflating: trainset/P46/000147.jpg  \n",
            "  inflating: trainset/P46/000148.jpg  \n",
            "  inflating: trainset/P46/000149.jpg  \n",
            "  inflating: trainset/P46/000150.jpg  \n",
            "  inflating: trainset/P46/000151.jpg  \n",
            "  inflating: trainset/P46/000152.jpg  \n",
            "  inflating: trainset/P46/000153.jpg  \n",
            "  inflating: trainset/P46/000154.jpg  \n",
            "  inflating: trainset/P46/000155.jpg  \n",
            "  inflating: trainset/P46/000156.jpg  \n",
            "  inflating: trainset/P46/000157.jpg  \n",
            "  inflating: trainset/P46/000158.jpg  \n",
            "  inflating: trainset/P46/000159.jpg  \n",
            "  inflating: trainset/P46/000160.jpg  \n",
            "  inflating: trainset/P46/000161.jpg  \n",
            "  inflating: trainset/P46/000162.jpg  \n",
            "  inflating: trainset/P46/000163.jpg  \n",
            "  inflating: trainset/P46/000164.jpg  \n",
            "  inflating: trainset/P46/000165.jpg  \n",
            "  inflating: trainset/P46/000166.jpg  \n",
            "  inflating: trainset/P46/000167.jpg  \n",
            "  inflating: trainset/P46/000168.jpg  \n",
            "  inflating: trainset/P46/000169.jpg  \n",
            "  inflating: trainset/P46/000170.jpg  \n",
            "  inflating: trainset/P46/000171.jpg  \n",
            "  inflating: trainset/P46/000172.jpg  \n",
            "  inflating: trainset/P46/000173.jpg  \n",
            "  inflating: trainset/P46/000174.jpg  \n",
            "  inflating: trainset/P46/000175.jpg  \n",
            "  inflating: trainset/P46/000176.jpg  \n",
            "  inflating: trainset/P46/000177.jpg  \n",
            "  inflating: trainset/P46/000178.jpg  \n",
            "  inflating: trainset/P46/000179.jpg  \n",
            "  inflating: trainset/P46/000180.jpg  \n",
            "  inflating: trainset/P46/000181.jpg  \n",
            "  inflating: trainset/P46/000182.jpg  \n",
            "  inflating: trainset/P46/000183.jpg  \n",
            "  inflating: trainset/P46/000184.jpg  \n",
            "  inflating: trainset/P46/000185.jpg  \n",
            "  inflating: trainset/P46/000186.jpg  \n",
            "  inflating: trainset/P47/000000.jpg  \n",
            "  inflating: trainset/P47/000001.jpg  \n",
            "  inflating: trainset/P47/000002.jpg  \n",
            "  inflating: trainset/P47/000003.jpg  \n",
            "  inflating: trainset/P47/000004.jpg  \n",
            "  inflating: trainset/P47/000005.jpg  \n",
            "  inflating: trainset/P47/000006.jpg  \n",
            "  inflating: trainset/P47/000007.jpg  \n",
            "  inflating: trainset/P47/000008.jpg  \n",
            "  inflating: trainset/P47/000009.jpg  \n",
            "  inflating: trainset/P47/000010.jpg  \n",
            "  inflating: trainset/P47/000011.jpg  \n",
            "  inflating: trainset/P47/000012.jpg  \n",
            "  inflating: trainset/P47/000013.jpg  \n",
            "  inflating: trainset/P47/000014.jpg  \n",
            "  inflating: trainset/P47/000015.jpg  \n",
            "  inflating: trainset/P47/000016.jpg  \n",
            "  inflating: trainset/P47/000017.jpg  \n",
            "  inflating: trainset/P47/000018.jpg  \n",
            "  inflating: trainset/P47/000019.jpg  \n",
            "  inflating: trainset/P47/000020.jpg  \n",
            "  inflating: trainset/P47/000021.jpg  \n",
            "  inflating: trainset/P47/000022.jpg  \n",
            "  inflating: trainset/P47/000023.jpg  \n",
            "  inflating: trainset/P47/000024.jpg  \n",
            "  inflating: trainset/P47/000025.jpg  \n",
            "  inflating: trainset/P47/000026.jpg  \n",
            "  inflating: trainset/P47/000027.jpg  \n",
            "  inflating: trainset/P48/000000.jpg  \n",
            "  inflating: trainset/P48/000001.jpg  \n",
            "  inflating: trainset/P48/000002.jpg  \n",
            "  inflating: trainset/P48/000003.jpg  \n",
            "  inflating: trainset/P48/000004.jpg  \n",
            "  inflating: trainset/P48/000005.jpg  \n",
            "  inflating: trainset/P48/000006.jpg  \n",
            "  inflating: trainset/P48/000007.jpg  \n",
            "  inflating: trainset/P48/000008.jpg  \n",
            "  inflating: trainset/P48/000009.jpg  \n",
            "  inflating: trainset/P48/000010.jpg  \n",
            "  inflating: trainset/P48/000011.jpg  \n",
            "  inflating: trainset/P48/000012.jpg  \n",
            "  inflating: trainset/P48/000013.jpg  \n",
            "  inflating: trainset/P48/000014.jpg  \n",
            "  inflating: trainset/P48/000015.jpg  \n",
            "  inflating: trainset/P48/000016.jpg  \n",
            "  inflating: trainset/P48/000017.jpg  \n",
            "  inflating: trainset/P48/000018.jpg  \n",
            "  inflating: trainset/P48/000019.jpg  \n",
            "  inflating: trainset/P48/000020.jpg  \n",
            "  inflating: trainset/P48/000021.jpg  \n",
            "  inflating: trainset/P48/000022.jpg  \n",
            "  inflating: trainset/P48/000023.jpg  \n",
            "  inflating: trainset/P48/000024.jpg  \n",
            "  inflating: trainset/P48/000025.jpg  \n",
            "  inflating: trainset/P48/000026.jpg  \n",
            "  inflating: trainset/P48/000027.jpg  \n",
            "  inflating: trainset/P48/000028.jpg  \n",
            "  inflating: trainset/P48/000029.jpg  \n",
            "  inflating: trainset/P48/000030.jpg  \n",
            "  inflating: trainset/P48/000031.jpg  \n",
            "  inflating: trainset/P48/000032.jpg  \n",
            "  inflating: trainset/P48/000033.jpg  \n",
            "  inflating: trainset/P48/000034.jpg  \n",
            "  inflating: trainset/P48/000035.jpg  \n",
            "  inflating: trainset/P48/000036.jpg  \n",
            "  inflating: trainset/P48/000037.jpg  \n",
            "  inflating: trainset/P48/000038.jpg  \n",
            "  inflating: trainset/P48/000039.jpg  \n",
            "  inflating: trainset/P48/000040.jpg  \n",
            "  inflating: trainset/P48/000041.jpg  \n",
            "  inflating: trainset/P48/000042.jpg  \n",
            "  inflating: trainset/P48/000043.jpg  \n",
            "  inflating: trainset/P48/000044.jpg  \n",
            "  inflating: trainset/P48/000045.jpg  \n",
            "  inflating: trainset/P48/000046.jpg  \n",
            "  inflating: trainset/P48/000047.jpg  \n",
            "  inflating: trainset/P48/000048.jpg  \n",
            "  inflating: trainset/P48/000049.jpg  \n",
            "  inflating: trainset/P48/000050.jpg  \n",
            "  inflating: trainset/P48/000051.jpg  \n",
            "  inflating: trainset/P48/000052.jpg  \n",
            "  inflating: trainset/P48/000053.jpg  \n",
            "  inflating: trainset/P48/000054.jpg  \n",
            "  inflating: trainset/P48/000055.jpg  \n",
            "  inflating: trainset/P48/000056.jpg  \n",
            "  inflating: trainset/P48/000057.jpg  \n",
            "  inflating: trainset/P48/000058.jpg  \n",
            "  inflating: trainset/P48/000059.jpg  \n",
            "  inflating: trainset/P48/000060.jpg  \n",
            "  inflating: trainset/P48/000061.jpg  \n",
            "  inflating: trainset/P48/000062.jpg  \n",
            "  inflating: trainset/P48/000063.jpg  \n",
            "  inflating: trainset/P48/000064.jpg  \n",
            "  inflating: trainset/P48/000065.jpg  \n",
            "  inflating: trainset/P48/000066.jpg  \n",
            "  inflating: trainset/P48/000067.jpg  \n",
            "  inflating: trainset/P48/000068.jpg  \n",
            "  inflating: trainset/P48/000069.jpg  \n",
            "  inflating: trainset/P48/000070.jpg  \n",
            "  inflating: trainset/P48/000071.jpg  \n",
            "  inflating: trainset/P48/000072.jpg  \n",
            "  inflating: trainset/P48/000073.jpg  \n",
            "  inflating: trainset/P48/000074.jpg  \n",
            "  inflating: trainset/P48/000075.jpg  \n",
            "  inflating: trainset/P48/000076.jpg  \n",
            "  inflating: trainset/P48/000077.jpg  \n",
            "  inflating: trainset/P48/000078.jpg  \n",
            "  inflating: trainset/P48/000079.jpg  \n",
            "  inflating: trainset/P48/000080.jpg  \n",
            "  inflating: trainset/P48/000081.jpg  \n",
            "  inflating: trainset/P48/000082.jpg  \n",
            "  inflating: trainset/P48/000083.jpg  \n",
            "  inflating: trainset/P48/000084.jpg  \n",
            "  inflating: trainset/P48/000085.jpg  \n",
            "  inflating: trainset/P48/000086.jpg  \n",
            "  inflating: trainset/P48/000087.jpg  \n",
            "  inflating: trainset/P48/000088.jpg  \n",
            "  inflating: trainset/P48/000089.jpg  \n",
            "  inflating: trainset/P48/000090.jpg  \n",
            "  inflating: trainset/P48/000091.jpg  \n",
            "  inflating: trainset/P48/000092.jpg  \n",
            "  inflating: trainset/P48/000093.jpg  \n",
            "  inflating: trainset/P48/000094.jpg  \n",
            "  inflating: trainset/P48/000095.jpg  \n",
            "  inflating: trainset/P48/000096.jpg  \n",
            "  inflating: trainset/P48/000097.jpg  \n",
            "  inflating: trainset/P48/000098.jpg  \n",
            "  inflating: trainset/P48/000099.jpg  \n",
            "  inflating: trainset/P48/000100.jpg  \n",
            "  inflating: trainset/P48/000101.jpg  \n",
            "  inflating: trainset/P48/000102.jpg  \n",
            "  inflating: trainset/P48/000103.jpg  \n",
            "  inflating: trainset/P48/000104.jpg  \n",
            "  inflating: trainset/P48/000105.jpg  \n",
            "  inflating: trainset/P48/000106.jpg  \n",
            "  inflating: trainset/P48/000107.jpg  \n",
            "  inflating: trainset/P48/000108.jpg  \n",
            "  inflating: trainset/P48/000109.jpg  \n",
            "  inflating: trainset/P48/000110.jpg  \n",
            "  inflating: trainset/P48/000111.jpg  \n",
            "  inflating: trainset/P48/000112.jpg  \n",
            "  inflating: trainset/P48/000113.jpg  \n",
            "  inflating: trainset/P48/000114.jpg  \n",
            "  inflating: trainset/P48/000115.jpg  \n",
            "  inflating: trainset/P48/000116.jpg  \n",
            "  inflating: trainset/P48/000117.jpg  \n",
            "  inflating: trainset/P48/000118.jpg  \n",
            "  inflating: trainset/P48/000119.jpg  \n",
            "  inflating: trainset/P48/000120.jpg  \n",
            "  inflating: trainset/P48/000121.jpg  \n",
            "  inflating: trainset/P48/000122.jpg  \n",
            "  inflating: trainset/P48/000123.jpg  \n",
            "  inflating: trainset/P48/000124.jpg  \n",
            "  inflating: trainset/P48/000125.jpg  \n",
            "  inflating: trainset/P48/000126.jpg  \n",
            "  inflating: trainset/P48/000127.jpg  \n",
            "  inflating: trainset/P48/000128.jpg  \n",
            "  inflating: trainset/P48/000129.jpg  \n",
            "  inflating: trainset/P48/000130.jpg  \n",
            "  inflating: trainset/P48/000131.jpg  \n",
            "  inflating: trainset/P48/000132.jpg  \n",
            "  inflating: trainset/P48/000133.jpg  \n",
            "  inflating: trainset/P48/000134.jpg  \n",
            "  inflating: trainset/P48/000135.jpg  \n",
            "  inflating: trainset/P48/000136.jpg  \n",
            "  inflating: trainset/P48/000137.jpg  \n",
            "  inflating: trainset/P48/000138.jpg  \n",
            "  inflating: trainset/P48/000139.jpg  \n",
            "  inflating: trainset/P48/000140.jpg  \n",
            "  inflating: trainset/P48/000141.jpg  \n",
            "  inflating: trainset/P48/000142.jpg  \n",
            "  inflating: trainset/P48/000143.jpg  \n",
            "  inflating: trainset/P48/000144.jpg  \n",
            "  inflating: trainset/P48/000145.jpg  \n",
            "  inflating: trainset/P48/000146.jpg  \n",
            "  inflating: trainset/P48/000147.jpg  \n",
            "  inflating: trainset/P48/000148.jpg  \n",
            "  inflating: trainset/P48/000149.jpg  \n",
            "  inflating: trainset/P48/000150.jpg  \n",
            "  inflating: trainset/P48/000151.jpg  \n",
            "  inflating: trainset/P48/000152.jpg  \n",
            "  inflating: trainset/P48/000153.jpg  \n",
            "  inflating: trainset/P48/000154.jpg  \n",
            "  inflating: trainset/P48/000155.jpg  \n",
            "  inflating: trainset/P48/000156.jpg  \n",
            "  inflating: trainset/P48/000157.jpg  \n",
            "  inflating: trainset/P48/000158.jpg  \n",
            "  inflating: trainset/P48/000159.jpg  \n",
            "  inflating: trainset/P48/000160.jpg  \n",
            "  inflating: trainset/P48/000161.jpg  \n",
            "  inflating: trainset/P48/000162.jpg  \n",
            "  inflating: trainset/P48/000163.jpg  \n",
            "  inflating: trainset/P48/000164.jpg  \n",
            "  inflating: trainset/P5/000000.jpg  \n",
            "  inflating: trainset/P5/000001.jpg  \n",
            "  inflating: trainset/P5/000002.jpg  \n",
            "  inflating: trainset/P5/000003.jpg  \n",
            "  inflating: trainset/P5/000004.jpg  \n",
            "  inflating: trainset/P5/000005.jpg  \n",
            "  inflating: trainset/P5/000006.jpg  \n",
            "  inflating: trainset/P5/000007.jpg  \n",
            "  inflating: trainset/P5/000008.jpg  \n",
            "  inflating: trainset/P5/000009.jpg  \n",
            "  inflating: trainset/P5/000010.jpg  \n",
            "  inflating: trainset/P5/000011.jpg  \n",
            "  inflating: trainset/P5/000012.jpg  \n",
            "  inflating: trainset/P5/000013.jpg  \n",
            "  inflating: trainset/P5/000014.jpg  \n",
            "  inflating: trainset/P5/000015.jpg  \n",
            "  inflating: trainset/P5/000016.jpg  \n",
            "  inflating: trainset/P5/000017.jpg  \n",
            "  inflating: trainset/P5/000018.jpg  \n",
            "  inflating: trainset/P5/000019.jpg  \n",
            "  inflating: trainset/P5/000020.jpg  \n",
            "  inflating: trainset/P5/000021.jpg  \n",
            "  inflating: trainset/P5/000022.jpg  \n",
            "  inflating: trainset/P5/000023.jpg  \n",
            "  inflating: trainset/P5/000024.jpg  \n",
            "  inflating: trainset/P5/000025.jpg  \n",
            "  inflating: trainset/P5/000026.jpg  \n",
            "  inflating: trainset/P5/000027.jpg  \n",
            "  inflating: trainset/P5/000028.jpg  \n",
            "  inflating: trainset/P5/000029.jpg  \n",
            "  inflating: trainset/P5/000030.jpg  \n",
            "  inflating: trainset/P5/000031.jpg  \n",
            "  inflating: trainset/P5/000032.jpg  \n",
            "  inflating: trainset/P5/000033.jpg  \n",
            "  inflating: trainset/P5/000034.jpg  \n",
            "  inflating: trainset/P5/000035.jpg  \n",
            "  inflating: trainset/P5/000036.jpg  \n",
            "  inflating: trainset/P5/000037.jpg  \n",
            "  inflating: trainset/P5/000038.jpg  \n",
            "  inflating: trainset/P5/000039.jpg  \n",
            "  inflating: trainset/P5/000040.jpg  \n",
            "  inflating: trainset/P5/000041.jpg  \n",
            "  inflating: trainset/P5/000042.jpg  \n",
            "  inflating: trainset/P5/000043.jpg  \n",
            "  inflating: trainset/P5/000044.jpg  \n",
            "  inflating: trainset/P5/000045.jpg  \n",
            "  inflating: trainset/P5/000046.jpg  \n",
            "  inflating: trainset/P5/000047.jpg  \n",
            "  inflating: trainset/P5/000048.jpg  \n",
            "  inflating: trainset/P5/000049.jpg  \n",
            "  inflating: trainset/P5/000050.jpg  \n",
            "  inflating: trainset/P5/000051.jpg  \n",
            "  inflating: trainset/P5/000052.jpg  \n",
            "  inflating: trainset/P5/000053.jpg  \n",
            "  inflating: trainset/P5/000054.jpg  \n",
            "  inflating: trainset/P5/000055.jpg  \n",
            "  inflating: trainset/P5/000056.jpg  \n",
            "  inflating: trainset/P5/000057.jpg  \n",
            "  inflating: trainset/P5/000058.jpg  \n",
            "  inflating: trainset/P5/000059.jpg  \n",
            "  inflating: trainset/P5/000060.jpg  \n",
            "  inflating: trainset/P5/000061.jpg  \n",
            "  inflating: trainset/P5/000062.jpg  \n",
            "  inflating: trainset/P5/000063.jpg  \n",
            "  inflating: trainset/P5/000064.jpg  \n",
            "  inflating: trainset/P5/000065.jpg  \n",
            "  inflating: trainset/P5/000066.jpg  \n",
            "  inflating: trainset/P5/000067.jpg  \n",
            "  inflating: trainset/P5/000068.jpg  \n",
            "  inflating: trainset/P5/000069.jpg  \n",
            "  inflating: trainset/P5/000070.jpg  \n",
            "  inflating: trainset/P5/000071.jpg  \n",
            "  inflating: trainset/P5/000072.jpg  \n",
            "  inflating: trainset/P5/000073.jpg  \n",
            "  inflating: trainset/P5/000074.jpg  \n",
            "  inflating: trainset/P5/000075.jpg  \n",
            "  inflating: trainset/P5/000076.jpg  \n",
            "  inflating: trainset/P5/000077.jpg  \n",
            "  inflating: trainset/P5/000078.jpg  \n",
            "  inflating: trainset/P5/000079.jpg  \n",
            "  inflating: trainset/P5/000080.jpg  \n",
            "  inflating: trainset/P5/000081.jpg  \n",
            "  inflating: trainset/P5/000082.jpg  \n",
            "  inflating: trainset/P5/000083.jpg  \n",
            "  inflating: trainset/P5/000084.jpg  \n",
            "  inflating: trainset/P5/000085.jpg  \n",
            "  inflating: trainset/P5/000086.jpg  \n",
            "  inflating: trainset/P5/000087.jpg  \n",
            "  inflating: trainset/P5/000088.jpg  \n",
            "  inflating: trainset/P5/000089.jpg  \n",
            "  inflating: trainset/P5/000090.jpg  \n",
            "  inflating: trainset/P5/000091.jpg  \n",
            "  inflating: trainset/P5/000092.jpg  \n",
            "  inflating: trainset/P5/000093.jpg  \n",
            "  inflating: trainset/P5/000094.jpg  \n",
            "  inflating: trainset/P5/000095.jpg  \n",
            "  inflating: trainset/P5/000096.jpg  \n",
            "  inflating: trainset/P5/000097.jpg  \n",
            "  inflating: trainset/P5/000098.jpg  \n",
            "  inflating: trainset/P5/000099.jpg  \n",
            "  inflating: trainset/P5/000100.jpg  \n",
            "  inflating: trainset/P5/000101.jpg  \n",
            "  inflating: trainset/P5/000102.jpg  \n",
            "  inflating: trainset/P5/000103.jpg  \n",
            "  inflating: trainset/P5/000104.jpg  \n",
            "  inflating: trainset/P5/000105.jpg  \n",
            "  inflating: trainset/P5/000106.jpg  \n",
            "  inflating: trainset/P5/000107.jpg  \n",
            "  inflating: trainset/P5/000108.jpg  \n",
            "  inflating: trainset/P5/000109.jpg  \n",
            "  inflating: trainset/P5/000110.jpg  \n",
            "  inflating: trainset/P5/000111.jpg  \n",
            "  inflating: trainset/P5/000112.jpg  \n",
            "  inflating: trainset/P5/000113.jpg  \n",
            "  inflating: trainset/P5/000114.jpg  \n",
            "  inflating: trainset/P5/000115.jpg  \n",
            "  inflating: trainset/P5/000116.jpg  \n",
            "  inflating: trainset/P5/000117.jpg  \n",
            "  inflating: trainset/P5/000118.jpg  \n",
            "  inflating: trainset/P5/000119.jpg  \n",
            "  inflating: trainset/P50/000000.jpg  \n",
            "  inflating: trainset/P50/000001.jpg  \n",
            "  inflating: trainset/P50/000002.jpg  \n",
            "  inflating: trainset/P50/000003.jpg  \n",
            "  inflating: trainset/P50/000004.jpg  \n",
            "  inflating: trainset/P50/000005.jpg  \n",
            "  inflating: trainset/P50/000006.jpg  \n",
            "  inflating: trainset/P50/000007.jpg  \n",
            "  inflating: trainset/P50/000008.jpg  \n",
            "  inflating: trainset/P50/000009.jpg  \n",
            "  inflating: trainset/P50/000010.jpg  \n",
            "  inflating: trainset/P50/000011.jpg  \n",
            "  inflating: trainset/P50/000012.jpg  \n",
            "  inflating: trainset/P50/000013.jpg  \n",
            "  inflating: trainset/P50/000014.jpg  \n",
            "  inflating: trainset/P50/000015.jpg  \n",
            "  inflating: trainset/P50/000016.jpg  \n",
            "  inflating: trainset/P50/000017.jpg  \n",
            "  inflating: trainset/P50/000018.jpg  \n",
            "  inflating: trainset/P50/000019.jpg  \n",
            "  inflating: trainset/P50/000020.jpg  \n",
            "  inflating: trainset/P50/000021.jpg  \n",
            "  inflating: trainset/P50/000022.jpg  \n",
            "  inflating: trainset/P50/000023.jpg  \n",
            "  inflating: trainset/P50/000024.jpg  \n",
            "  inflating: trainset/P50/000025.jpg  \n",
            "  inflating: trainset/P50/000026.jpg  \n",
            "  inflating: trainset/P50/000027.jpg  \n",
            "  inflating: trainset/P50/000028.jpg  \n",
            "  inflating: trainset/P50/000029.jpg  \n",
            "  inflating: trainset/P50/000030.jpg  \n",
            "  inflating: trainset/P50/000031.jpg  \n",
            "  inflating: trainset/P50/000032.jpg  \n",
            "  inflating: trainset/P50/000033.jpg  \n",
            "  inflating: trainset/P50/000034.jpg  \n",
            "  inflating: trainset/P50/000035.jpg  \n",
            "  inflating: trainset/P50/000036.jpg  \n",
            "  inflating: trainset/P50/000037.jpg  \n",
            "  inflating: trainset/P50/000038.jpg  \n",
            "  inflating: trainset/P50/000039.jpg  \n",
            "  inflating: trainset/P50/000040.jpg  \n",
            "  inflating: trainset/P50/000041.jpg  \n",
            "  inflating: trainset/P50/000042.jpg  \n",
            "  inflating: trainset/P51/000000.jpg  \n",
            "  inflating: trainset/P51/000001.jpg  \n",
            "  inflating: trainset/P51/000002.jpg  \n",
            "  inflating: trainset/P51/000003.jpg  \n",
            "  inflating: trainset/P51/000004.jpg  \n",
            "  inflating: trainset/P51/000005.jpg  \n",
            "  inflating: trainset/P51/000006.jpg  \n",
            "  inflating: trainset/P51/000007.jpg  \n",
            "  inflating: trainset/P51/000008.jpg  \n",
            "  inflating: trainset/P51/000009.jpg  \n",
            "  inflating: trainset/P51/000010.jpg  \n",
            "  inflating: trainset/P51/000011.jpg  \n",
            "  inflating: trainset/P51/000012.jpg  \n",
            "  inflating: trainset/P51/000013.jpg  \n",
            "  inflating: trainset/P51/000014.jpg  \n",
            "  inflating: trainset/P51/000015.jpg  \n",
            "  inflating: trainset/P51/000016.jpg  \n",
            "  inflating: trainset/P51/000017.jpg  \n",
            "  inflating: trainset/P51/000018.jpg  \n",
            "  inflating: trainset/P51/000019.jpg  \n",
            "  inflating: trainset/P51/000020.jpg  \n",
            "  inflating: trainset/P51/000021.jpg  \n",
            "  inflating: trainset/P51/000022.jpg  \n",
            "  inflating: trainset/P51/000023.jpg  \n",
            "  inflating: trainset/P51/000024.jpg  \n",
            "  inflating: trainset/P51/000025.jpg  \n",
            "  inflating: trainset/P51/000026.jpg  \n",
            "  inflating: trainset/P51/000027.jpg  \n",
            "  inflating: trainset/P51/000028.jpg  \n",
            "  inflating: trainset/P51/000029.jpg  \n",
            "  inflating: trainset/P51/000030.jpg  \n",
            "  inflating: trainset/P51/000031.jpg  \n",
            "  inflating: trainset/P51/000032.jpg  \n",
            "  inflating: trainset/P51/000033.jpg  \n",
            "  inflating: trainset/P51/000034.jpg  \n",
            "  inflating: trainset/P51/000035.jpg  \n",
            "  inflating: trainset/P51/000036.jpg  \n",
            "  inflating: trainset/P51/000037.jpg  \n",
            "  inflating: trainset/P51/000038.jpg  \n",
            "  inflating: trainset/P51/000039.jpg  \n",
            "  inflating: trainset/P51/000040.jpg  \n",
            "  inflating: trainset/P51/000041.jpg  \n",
            "  inflating: trainset/P51/000042.jpg  \n",
            "  inflating: trainset/P51/000043.jpg  \n",
            "  inflating: trainset/P51/000044.jpg  \n",
            "  inflating: trainset/P52/000000.jpg  \n",
            "  inflating: trainset/P52/000001.jpg  \n",
            "  inflating: trainset/P52/000002.jpg  \n",
            "  inflating: trainset/P52/000003.jpg  \n",
            "  inflating: trainset/P52/000004.jpg  \n",
            "  inflating: trainset/P52/000005.jpg  \n",
            "  inflating: trainset/P52/000006.jpg  \n",
            "  inflating: trainset/P52/000007.jpg  \n",
            "  inflating: trainset/P52/000008.jpg  \n",
            "  inflating: trainset/P52/000009.jpg  \n",
            "  inflating: trainset/P52/000010.jpg  \n",
            "  inflating: trainset/P52/000011.jpg  \n",
            "  inflating: trainset/P52/000012.jpg  \n",
            "  inflating: trainset/P52/000013.jpg  \n",
            "  inflating: trainset/P52/000014.jpg  \n",
            "  inflating: trainset/P52/000015.jpg  \n",
            "  inflating: trainset/P52/000016.jpg  \n",
            "  inflating: trainset/P52/000017.jpg  \n",
            "  inflating: trainset/P52/000018.jpg  \n",
            "  inflating: trainset/P52/000019.jpg  \n",
            "  inflating: trainset/P52/000020.jpg  \n",
            "  inflating: trainset/P52/000021.jpg  \n",
            "  inflating: trainset/P52/000022.jpg  \n",
            "  inflating: trainset/P52/000023.jpg  \n",
            "  inflating: trainset/P52/000024.jpg  \n",
            "  inflating: trainset/P52/000025.jpg  \n",
            "  inflating: trainset/P52/000026.jpg  \n",
            "  inflating: trainset/P52/000027.jpg  \n",
            "  inflating: trainset/P52/000028.jpg  \n",
            "  inflating: trainset/P52/000029.jpg  \n",
            "  inflating: trainset/P52/000030.jpg  \n",
            "  inflating: trainset/P52/000031.jpg  \n",
            "  inflating: trainset/P52/000032.jpg  \n",
            "  inflating: trainset/P52/000033.jpg  \n",
            "  inflating: trainset/P52/000034.jpg  \n",
            "  inflating: trainset/P52/000035.jpg  \n",
            "  inflating: trainset/P52/000036.jpg  \n",
            "  inflating: trainset/P52/000037.jpg  \n",
            "  inflating: trainset/P52/000038.jpg  \n",
            "  inflating: trainset/P52/000039.jpg  \n",
            "  inflating: trainset/P52/000040.jpg  \n",
            "  inflating: trainset/P52/000041.jpg  \n",
            "  inflating: trainset/P52/000042.jpg  \n",
            "  inflating: trainset/P52/000043.jpg  \n",
            "  inflating: trainset/P52/000044.jpg  \n",
            "  inflating: trainset/P52/000045.jpg  \n",
            "  inflating: trainset/P52/000046.jpg  \n",
            "  inflating: trainset/P53/000000.jpg  \n",
            "  inflating: trainset/P53/000001.jpg  \n",
            "  inflating: trainset/P53/000002.jpg  \n",
            "  inflating: trainset/P53/000003.jpg  \n",
            "  inflating: trainset/P53/000004.jpg  \n",
            "  inflating: trainset/P53/000005.jpg  \n",
            "  inflating: trainset/P53/000006.jpg  \n",
            "  inflating: trainset/P53/000007.jpg  \n",
            "  inflating: trainset/P53/000008.jpg  \n",
            "  inflating: trainset/P53/000009.jpg  \n",
            "  inflating: trainset/P53/000010.jpg  \n",
            "  inflating: trainset/P53/000011.jpg  \n",
            "  inflating: trainset/P53/000012.jpg  \n",
            "  inflating: trainset/P53/000013.jpg  \n",
            "  inflating: trainset/P53/000014.jpg  \n",
            "  inflating: trainset/P53/000015.jpg  \n",
            "  inflating: trainset/P53/000016.jpg  \n",
            "  inflating: trainset/P53/000017.jpg  \n",
            "  inflating: trainset/P53/000018.jpg  \n",
            "  inflating: trainset/P53/000019.jpg  \n",
            "  inflating: trainset/P53/000020.jpg  \n",
            "  inflating: trainset/P53/000021.jpg  \n",
            "  inflating: trainset/P53/000022.jpg  \n",
            "  inflating: trainset/P53/000023.jpg  \n",
            "  inflating: trainset/P53/000024.jpg  \n",
            "  inflating: trainset/P53/000025.jpg  \n",
            "  inflating: trainset/P53/000026.jpg  \n",
            "  inflating: trainset/P53/000027.jpg  \n",
            "  inflating: trainset/P53/000028.jpg  \n",
            "  inflating: trainset/P53/000029.jpg  \n",
            "  inflating: trainset/P53/000030.jpg  \n",
            "  inflating: trainset/P53/000031.jpg  \n",
            "  inflating: trainset/P53/000032.jpg  \n",
            "  inflating: trainset/P53/000033.jpg  \n",
            "  inflating: trainset/P53/000034.jpg  \n",
            "  inflating: trainset/P53/000035.jpg  \n",
            "  inflating: trainset/P53/000036.jpg  \n",
            "  inflating: trainset/P53/000037.jpg  \n",
            "  inflating: trainset/P53/000038.jpg  \n",
            "  inflating: trainset/P53/000039.jpg  \n",
            "  inflating: trainset/P53/000040.jpg  \n",
            "  inflating: trainset/P53/000041.jpg  \n",
            "  inflating: trainset/P53/000042.jpg  \n",
            "  inflating: trainset/P53/000043.jpg  \n",
            "  inflating: trainset/P53/000044.jpg  \n",
            "  inflating: trainset/P53/000045.jpg  \n",
            "  inflating: trainset/P53/000046.jpg  \n",
            "  inflating: trainset/P53/000047.jpg  \n",
            "  inflating: trainset/P53/000048.jpg  \n",
            "  inflating: trainset/P53/000049.jpg  \n",
            "  inflating: trainset/P53/000050.jpg  \n",
            "  inflating: trainset/P53/000051.jpg  \n",
            "  inflating: trainset/P53/000052.jpg  \n",
            "  inflating: trainset/P53/000053.jpg  \n",
            "  inflating: trainset/P53/000054.jpg  \n",
            "  inflating: trainset/P53/000055.jpg  \n",
            "  inflating: trainset/P53/000056.jpg  \n",
            "  inflating: trainset/P53/000057.jpg  \n",
            "  inflating: trainset/P53/000058.jpg  \n",
            "  inflating: trainset/P53/000059.jpg  \n",
            "  inflating: trainset/P53/000060.jpg  \n",
            "  inflating: trainset/P53/000061.jpg  \n",
            "  inflating: trainset/P53/000062.jpg  \n",
            "  inflating: trainset/P53/000063.jpg  \n",
            "  inflating: trainset/P53/000064.jpg  \n",
            "  inflating: trainset/P53/000065.jpg  \n",
            "  inflating: trainset/P53/000066.jpg  \n",
            "  inflating: trainset/P53/000067.jpg  \n",
            "  inflating: trainset/P53/000068.jpg  \n",
            "  inflating: trainset/P53/000069.jpg  \n",
            "  inflating: trainset/P53/000070.jpg  \n",
            "  inflating: trainset/P53/000071.jpg  \n",
            "  inflating: trainset/P53/000072.jpg  \n",
            "  inflating: trainset/P53/000073.jpg  \n",
            "  inflating: trainset/P53/000074.jpg  \n",
            "  inflating: trainset/P53/000075.jpg  \n",
            "  inflating: trainset/P53/000076.jpg  \n",
            "  inflating: trainset/P53/000077.jpg  \n",
            "  inflating: trainset/P53/000078.jpg  \n",
            "  inflating: trainset/P53/000079.jpg  \n",
            "  inflating: trainset/P53/000080.jpg  \n",
            "  inflating: trainset/P54/000000.jpg  \n",
            "  inflating: trainset/P54/000001.jpg  \n",
            "  inflating: trainset/P54/000002.jpg  \n",
            "  inflating: trainset/P54/000003.jpg  \n",
            "  inflating: trainset/P54/000004.jpg  \n",
            "  inflating: trainset/P54/000005.jpg  \n",
            "  inflating: trainset/P54/000006.jpg  \n",
            "  inflating: trainset/P54/000007.jpg  \n",
            "  inflating: trainset/P54/000008.jpg  \n",
            "  inflating: trainset/P54/000009.jpg  \n",
            "  inflating: trainset/P54/000010.jpg  \n",
            "  inflating: trainset/P54/000011.jpg  \n",
            "  inflating: trainset/P54/000012.jpg  \n",
            "  inflating: trainset/P54/000013.jpg  \n",
            "  inflating: trainset/P54/000014.jpg  \n",
            "  inflating: trainset/P54/000015.jpg  \n",
            "  inflating: trainset/P54/000016.jpg  \n",
            "  inflating: trainset/P54/000017.jpg  \n",
            "  inflating: trainset/P54/000018.jpg  \n",
            "  inflating: trainset/P54/000019.jpg  \n",
            "  inflating: trainset/P54/000020.jpg  \n",
            "  inflating: trainset/P54/000021.jpg  \n",
            "  inflating: trainset/P54/000022.jpg  \n",
            "  inflating: trainset/P54/000023.jpg  \n",
            "  inflating: trainset/P54/000024.jpg  \n",
            "  inflating: trainset/P54/000025.jpg  \n",
            "  inflating: trainset/P54/000026.jpg  \n",
            "  inflating: trainset/P54/000027.jpg  \n",
            "  inflating: trainset/P54/000028.jpg  \n",
            "  inflating: trainset/P54/000029.jpg  \n",
            "  inflating: trainset/P54/000030.jpg  \n",
            "  inflating: trainset/P54/000031.jpg  \n",
            "  inflating: trainset/P54/000032.jpg  \n",
            "  inflating: trainset/P54/000033.jpg  \n",
            "  inflating: trainset/P54/000034.jpg  \n",
            "  inflating: trainset/P54/000035.jpg  \n",
            "  inflating: trainset/P54/000036.jpg  \n",
            "  inflating: trainset/P54/000037.jpg  \n",
            "  inflating: trainset/P54/000038.jpg  \n",
            "  inflating: trainset/P54/000039.jpg  \n",
            "  inflating: trainset/P55/000000.jpg  \n",
            "  inflating: trainset/P55/000001.jpg  \n",
            "  inflating: trainset/P55/000002.jpg  \n",
            "  inflating: trainset/P55/000003.jpg  \n",
            "  inflating: trainset/P55/000004.jpg  \n",
            "  inflating: trainset/P55/000005.jpg  \n",
            "  inflating: trainset/P55/000006.jpg  \n",
            "  inflating: trainset/P55/000007.jpg  \n",
            "  inflating: trainset/P55/000008.jpg  \n",
            "  inflating: trainset/P55/000009.jpg  \n",
            "  inflating: trainset/P55/000010.jpg  \n",
            "  inflating: trainset/P55/000011.jpg  \n",
            "  inflating: trainset/P55/000012.jpg  \n",
            "  inflating: trainset/P55/000013.jpg  \n",
            "  inflating: trainset/P55/000014.jpg  \n",
            "  inflating: trainset/P55/000015.jpg  \n",
            "  inflating: trainset/P55/000016.jpg  \n",
            "  inflating: trainset/P55/000017.jpg  \n",
            "  inflating: trainset/P55/000018.jpg  \n",
            "  inflating: trainset/P55/000019.jpg  \n",
            "  inflating: trainset/P55/000020.jpg  \n",
            "  inflating: trainset/P55/000021.jpg  \n",
            "  inflating: trainset/P55/000022.jpg  \n",
            "  inflating: trainset/P55/000023.jpg  \n",
            "  inflating: trainset/P55/000024.jpg  \n",
            "  inflating: trainset/P55/000025.jpg  \n",
            "  inflating: trainset/P55/000026.jpg  \n",
            "  inflating: trainset/P55/000027.jpg  \n",
            "  inflating: trainset/P55/000028.jpg  \n",
            "  inflating: trainset/P59/000000.jpg  \n",
            "  inflating: trainset/P59/000001.jpg  \n",
            "  inflating: trainset/P59/000002.jpg  \n",
            "  inflating: trainset/P59/000003.jpg  \n",
            "  inflating: trainset/P59/000004.jpg  \n",
            "  inflating: trainset/P59/000005.jpg  \n",
            "  inflating: trainset/P59/000006.jpg  \n",
            "  inflating: trainset/P59/000007.jpg  \n",
            "  inflating: trainset/P59/000008.jpg  \n",
            "  inflating: trainset/P59/000009.jpg  \n",
            "  inflating: trainset/P59/000010.jpg  \n",
            "  inflating: trainset/P59/000011.jpg  \n",
            "  inflating: trainset/P59/000012.jpg  \n",
            "  inflating: trainset/P59/000013.jpg  \n",
            "  inflating: trainset/P59/000014.jpg  \n",
            "  inflating: trainset/P59/000015.jpg  \n",
            "  inflating: trainset/P59/000016.jpg  \n",
            "  inflating: trainset/P59/000017.jpg  \n",
            "  inflating: trainset/P59/000018.jpg  \n",
            "  inflating: trainset/P59/000019.jpg  \n",
            "  inflating: trainset/P59/000020.jpg  \n",
            "  inflating: trainset/P59/000021.jpg  \n",
            "  inflating: trainset/P59/000022.jpg  \n",
            "  inflating: trainset/P59/000023.jpg  \n",
            "  inflating: trainset/P59/000024.jpg  \n",
            "  inflating: trainset/P59/000025.jpg  \n",
            "  inflating: trainset/P59/000026.jpg  \n",
            "  inflating: trainset/P59/000027.jpg  \n",
            "  inflating: trainset/P59/000028.jpg  \n",
            "  inflating: trainset/P59/000029.jpg  \n",
            "  inflating: trainset/P59/000030.jpg  \n",
            "  inflating: trainset/P59/000031.jpg  \n",
            "  inflating: trainset/P59/000032.jpg  \n",
            "  inflating: trainset/P59/000033.jpg  \n",
            "  inflating: trainset/P59/000034.jpg  \n",
            "  inflating: trainset/P59/000035.jpg  \n",
            "  inflating: trainset/P59/000036.jpg  \n",
            "  inflating: trainset/P59/000037.jpg  \n",
            "  inflating: trainset/P59/000038.jpg  \n",
            "  inflating: trainset/P59/000039.jpg  \n",
            "  inflating: trainset/P59/000040.jpg  \n",
            "  inflating: trainset/P59/000041.jpg  \n",
            "  inflating: trainset/P59/000042.jpg  \n",
            "  inflating: trainset/P59/000043.jpg  \n",
            "  inflating: trainset/P59/000044.jpg  \n",
            "  inflating: trainset/P59/000045.jpg  \n",
            "  inflating: trainset/P59/000046.jpg  \n",
            "  inflating: trainset/P59/000047.jpg  \n",
            "  inflating: trainset/P59/000048.jpg  \n",
            "  inflating: trainset/P59/000049.jpg  \n",
            "  inflating: trainset/P59/000050.jpg  \n",
            "  inflating: trainset/P59/000051.jpg  \n",
            "  inflating: trainset/P59/000052.jpg  \n",
            "  inflating: trainset/P59/000053.jpg  \n",
            "  inflating: trainset/P59/000054.jpg  \n",
            "  inflating: trainset/P59/000055.jpg  \n",
            "  inflating: trainset/P59/000056.jpg  \n",
            "  inflating: trainset/P59/000057.jpg  \n",
            "  inflating: trainset/P59/000058.jpg  \n",
            "  inflating: trainset/P59/000059.jpg  \n",
            "  inflating: trainset/P59/000060.jpg  \n",
            "  inflating: trainset/P59/000061.jpg  \n",
            "  inflating: trainset/P59/000062.jpg  \n",
            "  inflating: trainset/P59/000063.jpg  \n",
            "  inflating: trainset/P59/000064.jpg  \n",
            "  inflating: trainset/P59/000065.jpg  \n",
            "  inflating: trainset/P59/000066.jpg  \n",
            "  inflating: trainset/P59/000067.jpg  \n",
            "  inflating: trainset/P59/000068.jpg  \n",
            "  inflating: trainset/P59/000069.jpg  \n",
            "  inflating: trainset/P59/000070.jpg  \n",
            "  inflating: trainset/P59/000071.jpg  \n",
            "  inflating: trainset/P59/000072.jpg  \n",
            "  inflating: trainset/P59/000073.jpg  \n",
            "  inflating: trainset/P59/000074.jpg  \n",
            "  inflating: trainset/P59/000075.jpg  \n",
            "  inflating: trainset/P59/000076.jpg  \n",
            "  inflating: trainset/P59/000077.jpg  \n",
            "  inflating: trainset/P59/000078.jpg  \n",
            "  inflating: trainset/P59/000079.jpg  \n",
            "  inflating: trainset/P59/000080.jpg  \n",
            "  inflating: trainset/P59/000081.jpg  \n",
            "  inflating: trainset/P59/000082.jpg  \n",
            "  inflating: trainset/P59/000083.jpg  \n",
            "  inflating: trainset/P59/000084.jpg  \n",
            "  inflating: trainset/P59/000085.jpg  \n",
            "  inflating: trainset/P59/000086.jpg  \n",
            "  inflating: trainset/P59/000087.jpg  \n",
            "  inflating: trainset/P59/000088.jpg  \n",
            "  inflating: trainset/P59/000089.jpg  \n",
            "  inflating: trainset/P59/000090.jpg  \n",
            "  inflating: trainset/P59/000091.jpg  \n",
            "  inflating: trainset/P59/000092.jpg  \n",
            "  inflating: trainset/P59/000093.jpg  \n",
            "  inflating: trainset/P59/000094.jpg  \n",
            "  inflating: trainset/P59/000095.jpg  \n",
            "  inflating: trainset/P59/000096.jpg  \n",
            "  inflating: trainset/P59/000097.jpg  \n",
            "  inflating: trainset/P59/000098.jpg  \n",
            "  inflating: trainset/P59/000099.jpg  \n",
            "  inflating: trainset/P59/000100.jpg  \n",
            "  inflating: trainset/P59/000101.jpg  \n",
            "  inflating: trainset/P59/000102.jpg  \n",
            "  inflating: trainset/P59/000103.jpg  \n",
            "  inflating: trainset/P59/000104.jpg  \n",
            "  inflating: trainset/P59/000105.jpg  \n",
            "  inflating: trainset/P59/000106.jpg  \n",
            "  inflating: trainset/P59/000107.jpg  \n",
            "  inflating: trainset/P59/000108.jpg  \n",
            "  inflating: trainset/P59/000109.jpg  \n",
            "  inflating: trainset/P59/000110.jpg  \n",
            "  inflating: trainset/P59/000111.jpg  \n",
            "  inflating: trainset/P59/000112.jpg  \n",
            "  inflating: trainset/P59/000113.jpg  \n",
            "  inflating: trainset/P59/000114.jpg  \n",
            "  inflating: trainset/P59/000115.jpg  \n",
            "  inflating: trainset/P59/000116.jpg  \n",
            "  inflating: trainset/P59/000117.jpg  \n",
            "  inflating: trainset/P59/000118.jpg  \n",
            "  inflating: trainset/P59/000119.jpg  \n",
            "  inflating: trainset/P59/000120.jpg  \n",
            "  inflating: trainset/P59/000121.jpg  \n",
            "  inflating: trainset/P59/000122.jpg  \n",
            "  inflating: trainset/P59/000123.jpg  \n",
            "  inflating: trainset/P59/000124.jpg  \n",
            "  inflating: trainset/P59/000125.jpg  \n",
            "  inflating: trainset/P59/000126.jpg  \n",
            "  inflating: trainset/P59/000127.jpg  \n",
            "  inflating: trainset/P59/000128.jpg  \n",
            "  inflating: trainset/P59/000129.jpg  \n",
            "  inflating: trainset/P59/000130.jpg  \n",
            "  inflating: trainset/P59/000131.jpg  \n",
            "  inflating: trainset/P59/000132.jpg  \n",
            "  inflating: trainset/P59/000133.jpg  \n",
            "  inflating: trainset/P59/000134.jpg  \n",
            "  inflating: trainset/P59/000135.jpg  \n",
            "  inflating: trainset/P59/000136.jpg  \n",
            "  inflating: trainset/P59/000137.jpg  \n",
            "  inflating: trainset/P59/000138.jpg  \n",
            "  inflating: trainset/P59/000139.jpg  \n",
            "  inflating: trainset/P59/000140.jpg  \n",
            "  inflating: trainset/P59/000141.jpg  \n",
            "  inflating: trainset/P59/000142.jpg  \n",
            "  inflating: trainset/P59/000143.jpg  \n",
            "  inflating: trainset/P59/000144.jpg  \n",
            "  inflating: trainset/P59/000145.jpg  \n",
            "  inflating: trainset/P59/000146.jpg  \n",
            "  inflating: trainset/P59/000147.jpg  \n",
            "  inflating: trainset/P59/000148.jpg  \n",
            "  inflating: trainset/P59/000149.jpg  \n",
            "  inflating: trainset/P59/000150.jpg  \n",
            "  inflating: trainset/P59/000151.jpg  \n",
            "  inflating: trainset/P59/000152.jpg  \n",
            "  inflating: trainset/P59/000153.jpg  \n",
            "  inflating: trainset/P59/000154.jpg  \n",
            "  inflating: trainset/P59/000155.jpg  \n",
            "  inflating: trainset/P59/000156.jpg  \n",
            "  inflating: trainset/P59/000157.jpg  \n",
            "  inflating: trainset/P59/000158.jpg  \n",
            "  inflating: trainset/P59/000159.jpg  \n",
            "  inflating: trainset/P59/000160.jpg  \n",
            "  inflating: trainset/P59/000161.jpg  \n",
            "  inflating: trainset/P6/000000.jpg  \n",
            "  inflating: trainset/P6/000001.jpg  \n",
            "  inflating: trainset/P6/000002.jpg  \n",
            "  inflating: trainset/P6/000003.jpg  \n",
            "  inflating: trainset/P6/000004.jpg  \n",
            "  inflating: trainset/P6/000005.jpg  \n",
            "  inflating: trainset/P6/000006.jpg  \n",
            "  inflating: trainset/P6/000007.jpg  \n",
            "  inflating: trainset/P6/000008.jpg  \n",
            "  inflating: trainset/P6/000009.jpg  \n",
            "  inflating: trainset/P6/000010.jpg  \n",
            "  inflating: trainset/P6/000011.jpg  \n",
            "  inflating: trainset/P6/000012.jpg  \n",
            "  inflating: trainset/P6/000013.jpg  \n",
            "  inflating: trainset/P6/000014.jpg  \n",
            "  inflating: trainset/P6/000015.jpg  \n",
            "  inflating: trainset/P6/000016.jpg  \n",
            "  inflating: trainset/P6/000017.jpg  \n",
            "  inflating: trainset/P6/000018.jpg  \n",
            "  inflating: trainset/P6/000019.jpg  \n",
            "  inflating: trainset/P6/000020.jpg  \n",
            "  inflating: trainset/P6/000021.jpg  \n",
            "  inflating: trainset/P6/000022.jpg  \n",
            "  inflating: trainset/P6/000023.jpg  \n",
            "  inflating: trainset/P6/000024.jpg  \n",
            "  inflating: trainset/P6/000025.jpg  \n",
            "  inflating: trainset/P6/000026.jpg  \n",
            "  inflating: trainset/P6/000027.jpg  \n",
            "  inflating: trainset/P6/000028.jpg  \n",
            "  inflating: trainset/P6/000029.jpg  \n",
            "  inflating: trainset/P6/000030.jpg  \n",
            "  inflating: trainset/P6/000031.jpg  \n",
            "  inflating: trainset/P6/000032.jpg  \n",
            "  inflating: trainset/P6/000033.jpg  \n",
            "  inflating: trainset/P6/000034.jpg  \n",
            "  inflating: trainset/P6/000035.jpg  \n",
            "  inflating: trainset/P6/000036.jpg  \n",
            "  inflating: trainset/P6/000037.jpg  \n",
            "  inflating: trainset/P6/000038.jpg  \n",
            "  inflating: trainset/P6/000039.jpg  \n",
            "  inflating: trainset/P6/000040.jpg  \n",
            "  inflating: trainset/P6/000041.jpg  \n",
            "  inflating: trainset/P6/000042.jpg  \n",
            "  inflating: trainset/P6/000043.jpg  \n",
            "  inflating: trainset/P6/000044.jpg  \n",
            "  inflating: trainset/P6/000045.jpg  \n",
            "  inflating: trainset/P6/000046.jpg  \n",
            "  inflating: trainset/P6/000047.jpg  \n",
            "  inflating: trainset/P6/000048.jpg  \n",
            "  inflating: trainset/P6/000049.jpg  \n",
            "  inflating: trainset/P6/000050.jpg  \n",
            "  inflating: trainset/P6/000051.jpg  \n",
            "  inflating: trainset/P6/000052.jpg  \n",
            "  inflating: trainset/P6/000053.jpg  \n",
            "  inflating: trainset/P6/000054.jpg  \n",
            "  inflating: trainset/P6/000055.jpg  \n",
            "  inflating: trainset/P6/000056.jpg  \n",
            "  inflating: trainset/P6/000057.jpg  \n",
            "  inflating: trainset/P6/000058.jpg  \n",
            "  inflating: trainset/P6/000059.jpg  \n",
            "  inflating: trainset/P6/000060.jpg  \n",
            "  inflating: trainset/P6/000061.jpg  \n",
            "  inflating: trainset/P6/000062.jpg  \n",
            "  inflating: trainset/P6/000063.jpg  \n",
            "  inflating: trainset/P6/000064.jpg  \n",
            "  inflating: trainset/P6/000065.jpg  \n",
            "  inflating: trainset/P6/000066.jpg  \n",
            "  inflating: trainset/P6/000067.jpg  \n",
            "  inflating: trainset/P60/000000.jpg  \n",
            "  inflating: trainset/P60/000001.jpg  \n",
            "  inflating: trainset/P60/000002.jpg  \n",
            "  inflating: trainset/P60/000003.jpg  \n",
            "  inflating: trainset/P60/000004.jpg  \n",
            "  inflating: trainset/P60/000005.jpg  \n",
            "  inflating: trainset/P60/000006.jpg  \n",
            "  inflating: trainset/P60/000007.jpg  \n",
            "  inflating: trainset/P60/000008.jpg  \n",
            "  inflating: trainset/P60/000009.jpg  \n",
            "  inflating: trainset/P60/000010.jpg  \n",
            "  inflating: trainset/P60/000011.jpg  \n",
            "  inflating: trainset/P60/000012.jpg  \n",
            "  inflating: trainset/P60/000013.jpg  \n",
            "  inflating: trainset/P60/000014.jpg  \n",
            "  inflating: trainset/P60/000015.jpg  \n",
            "  inflating: trainset/P60/000016.jpg  \n",
            "  inflating: trainset/P60/000017.jpg  \n",
            "  inflating: trainset/P60/000018.jpg  \n",
            "  inflating: trainset/P60/000019.jpg  \n",
            "  inflating: trainset/P60/000020.jpg  \n",
            "  inflating: trainset/P60/000021.jpg  \n",
            "  inflating: trainset/P60/000022.jpg  \n",
            "  inflating: trainset/P60/000023.jpg  \n",
            "  inflating: trainset/P60/000024.jpg  \n",
            "  inflating: trainset/P60/000025.jpg  \n",
            "  inflating: trainset/P60/000026.jpg  \n",
            "  inflating: trainset/P60/000027.jpg  \n",
            "  inflating: trainset/P60/000028.jpg  \n",
            "  inflating: trainset/P60/000029.jpg  \n",
            "  inflating: trainset/P60/000030.jpg  \n",
            "  inflating: trainset/P60/000031.jpg  \n",
            "  inflating: trainset/P60/000032.jpg  \n",
            "  inflating: trainset/P60/000033.jpg  \n",
            "  inflating: trainset/P60/000034.jpg  \n",
            "  inflating: trainset/P60/000035.jpg  \n",
            "  inflating: trainset/P60/000036.jpg  \n",
            "  inflating: trainset/P60/000037.jpg  \n",
            "  inflating: trainset/P60/000038.jpg  \n",
            "  inflating: trainset/P60/000039.jpg  \n",
            "  inflating: trainset/P60/000040.jpg  \n",
            "  inflating: trainset/P60/000041.jpg  \n",
            "  inflating: trainset/P60/000042.jpg  \n",
            "  inflating: trainset/P60/000043.jpg  \n",
            "  inflating: trainset/P60/000044.jpg  \n",
            "  inflating: trainset/P60/000045.jpg  \n",
            "  inflating: trainset/P60/000046.jpg  \n",
            "  inflating: trainset/P60/000047.jpg  \n",
            "  inflating: trainset/P60/000048.jpg  \n",
            "  inflating: trainset/P60/000049.jpg  \n",
            "  inflating: trainset/P60/000050.jpg  \n",
            "  inflating: trainset/P60/000051.jpg  \n",
            "  inflating: trainset/P60/000052.jpg  \n",
            "  inflating: trainset/P60/000053.jpg  \n",
            "  inflating: trainset/P60/000054.jpg  \n",
            "  inflating: trainset/P60/000055.jpg  \n",
            "  inflating: trainset/P60/000056.jpg  \n",
            "  inflating: trainset/P60/000057.jpg  \n",
            "  inflating: trainset/P60/000058.jpg  \n",
            "  inflating: trainset/P60/000059.jpg  \n",
            "  inflating: trainset/P60/000060.jpg  \n",
            "  inflating: trainset/P60/000061.jpg  \n",
            "  inflating: trainset/P60/000062.jpg  \n",
            "  inflating: trainset/P60/000063.jpg  \n",
            "  inflating: trainset/P60/000064.jpg  \n",
            "  inflating: trainset/P60/000065.jpg  \n",
            "  inflating: trainset/P61/000000.jpg  \n",
            "  inflating: trainset/P61/000001.jpg  \n",
            "  inflating: trainset/P61/000002.jpg  \n",
            "  inflating: trainset/P61/000003.jpg  \n",
            "  inflating: trainset/P61/000004.jpg  \n",
            "  inflating: trainset/P61/000005.jpg  \n",
            "  inflating: trainset/P61/000006.jpg  \n",
            "  inflating: trainset/P61/000007.jpg  \n",
            "  inflating: trainset/P61/000008.jpg  \n",
            "  inflating: trainset/P61/000009.jpg  \n",
            "  inflating: trainset/P61/000010.jpg  \n",
            "  inflating: trainset/P61/000011.jpg  \n",
            "  inflating: trainset/P61/000012.jpg  \n",
            "  inflating: trainset/P61/000013.jpg  \n",
            "  inflating: trainset/P61/000014.jpg  \n",
            "  inflating: trainset/P61/000015.jpg  \n",
            "  inflating: trainset/P61/000016.jpg  \n",
            "  inflating: trainset/P61/000017.jpg  \n",
            "  inflating: trainset/P61/000018.jpg  \n",
            "  inflating: trainset/P61/000019.jpg  \n",
            "  inflating: trainset/P61/000020.jpg  \n",
            "  inflating: trainset/P61/000021.jpg  \n",
            "  inflating: trainset/P61/000022.jpg  \n",
            "  inflating: trainset/P61/000023.jpg  \n",
            "  inflating: trainset/P61/000024.jpg  \n",
            "  inflating: trainset/P61/000025.jpg  \n",
            "  inflating: trainset/P61/000026.jpg  \n",
            "  inflating: trainset/P61/000027.jpg  \n",
            "  inflating: trainset/P61/000028.jpg  \n",
            "  inflating: trainset/P61/000029.jpg  \n",
            "  inflating: trainset/P61/000030.jpg  \n",
            "  inflating: trainset/P61/000031.jpg  \n",
            "  inflating: trainset/P61/000032.jpg  \n",
            "  inflating: trainset/P61/000033.jpg  \n",
            "  inflating: trainset/P61/000034.jpg  \n",
            "  inflating: trainset/P61/000035.jpg  \n",
            "  inflating: trainset/P61/000036.jpg  \n",
            "  inflating: trainset/P61/000037.jpg  \n",
            "  inflating: trainset/P61/000038.jpg  \n",
            "  inflating: trainset/P61/000039.jpg  \n",
            "  inflating: trainset/P61/000040.jpg  \n",
            "  inflating: trainset/P61/000041.jpg  \n",
            "  inflating: trainset/P61/000042.jpg  \n",
            "  inflating: trainset/P61/000043.jpg  \n",
            "  inflating: trainset/P61/000044.jpg  \n",
            "  inflating: trainset/P61/000045.jpg  \n",
            "  inflating: trainset/P61/000046.jpg  \n",
            "  inflating: trainset/P61/000047.jpg  \n",
            "  inflating: trainset/P61/000048.jpg  \n",
            "  inflating: trainset/P61/000049.jpg  \n",
            "  inflating: trainset/P61/000050.jpg  \n",
            "  inflating: trainset/P61/000051.jpg  \n",
            "  inflating: trainset/P61/000052.jpg  \n",
            "  inflating: trainset/P61/000053.jpg  \n",
            "  inflating: trainset/P61/000054.jpg  \n",
            "  inflating: trainset/P61/000055.jpg  \n",
            "  inflating: trainset/P62/000000.jpg  \n",
            "  inflating: trainset/P62/000001.jpg  \n",
            "  inflating: trainset/P62/000002.jpg  \n",
            "  inflating: trainset/P62/000003.jpg  \n",
            "  inflating: trainset/P62/000004.jpg  \n",
            "  inflating: trainset/P62/000005.jpg  \n",
            "  inflating: trainset/P62/000006.jpg  \n",
            "  inflating: trainset/P62/000007.jpg  \n",
            "  inflating: trainset/P62/000008.jpg  \n",
            "  inflating: trainset/P62/000009.jpg  \n",
            "  inflating: trainset/P62/000010.jpg  \n",
            "  inflating: trainset/P62/000011.jpg  \n",
            "  inflating: trainset/P62/000012.jpg  \n",
            "  inflating: trainset/P62/000013.jpg  \n",
            "  inflating: trainset/P62/000014.jpg  \n",
            "  inflating: trainset/P62/000015.jpg  \n",
            "  inflating: trainset/P63/000000.jpg  \n",
            "  inflating: trainset/P63/000001.jpg  \n",
            "  inflating: trainset/P63/000002.jpg  \n",
            "  inflating: trainset/P63/000003.jpg  \n",
            "  inflating: trainset/P63/000004.jpg  \n",
            "  inflating: trainset/P63/000005.jpg  \n",
            "  inflating: trainset/P63/000006.jpg  \n",
            "  inflating: trainset/P63/000007.jpg  \n",
            "  inflating: trainset/P63/000008.jpg  \n",
            "  inflating: trainset/P63/000009.jpg  \n",
            "  inflating: trainset/P63/000010.jpg  \n",
            "  inflating: trainset/P63/000011.jpg  \n",
            "  inflating: trainset/P63/000012.jpg  \n",
            "  inflating: trainset/P63/000013.jpg  \n",
            "  inflating: trainset/P63/000014.jpg  \n",
            "  inflating: trainset/P63/000015.jpg  \n",
            "  inflating: trainset/P63/000016.jpg  \n",
            "  inflating: trainset/P63/000017.jpg  \n",
            "  inflating: trainset/P63/000018.jpg  \n",
            "  inflating: trainset/P63/000019.jpg  \n",
            "  inflating: trainset/P63/000020.jpg  \n",
            "  inflating: trainset/P63/000021.jpg  \n",
            "  inflating: trainset/P63/000022.jpg  \n",
            "  inflating: trainset/P63/000023.jpg  \n",
            "  inflating: trainset/P63/000024.jpg  \n",
            "  inflating: trainset/P63/000025.jpg  \n",
            "  inflating: trainset/P63/000026.jpg  \n",
            "  inflating: trainset/P63/000027.jpg  \n",
            "  inflating: trainset/P63/000028.jpg  \n",
            "  inflating: trainset/P63/000029.jpg  \n",
            "  inflating: trainset/P63/000030.jpg  \n",
            "  inflating: trainset/P63/000031.jpg  \n",
            "  inflating: trainset/P63/000032.jpg  \n",
            "  inflating: trainset/P63/000033.jpg  \n",
            "  inflating: trainset/P63/000034.jpg  \n",
            "  inflating: trainset/P63/000035.jpg  \n",
            "  inflating: trainset/P63/000036.jpg  \n",
            "  inflating: trainset/P63/000037.jpg  \n",
            "  inflating: trainset/P63/000038.jpg  \n",
            "  inflating: trainset/P63/000039.jpg  \n",
            "  inflating: trainset/P63/000040.jpg  \n",
            "  inflating: trainset/P63/000041.jpg  \n",
            "  inflating: trainset/P63/000042.jpg  \n",
            "  inflating: trainset/P63/000043.jpg  \n",
            "  inflating: trainset/P63/000044.jpg  \n",
            "  inflating: trainset/P63/000045.jpg  \n",
            "  inflating: trainset/P64/000000.jpg  \n",
            "  inflating: trainset/P64/000001.jpg  \n",
            "  inflating: trainset/P64/000002.jpg  \n",
            "  inflating: trainset/P64/000003.jpg  \n",
            "  inflating: trainset/P64/000004.jpg  \n",
            "  inflating: trainset/P64/000005.jpg  \n",
            "  inflating: trainset/P64/000006.jpg  \n",
            "  inflating: trainset/P64/000007.jpg  \n",
            "  inflating: trainset/P64/000008.jpg  \n",
            "  inflating: trainset/P64/000009.jpg  \n",
            "  inflating: trainset/P64/000010.jpg  \n",
            "  inflating: trainset/P64/000011.jpg  \n",
            "  inflating: trainset/P64/000012.jpg  \n",
            "  inflating: trainset/P64/000013.jpg  \n",
            "  inflating: trainset/P64/000014.jpg  \n",
            "  inflating: trainset/P64/000015.jpg  \n",
            "  inflating: trainset/P64/000016.jpg  \n",
            "  inflating: trainset/P64/000017.jpg  \n",
            "  inflating: trainset/P64/000018.jpg  \n",
            "  inflating: trainset/P64/000019.jpg  \n",
            "  inflating: trainset/P64/000020.jpg  \n",
            "  inflating: trainset/P64/000021.jpg  \n",
            "  inflating: trainset/P64/000022.jpg  \n",
            "  inflating: trainset/P64/000023.jpg  \n",
            "  inflating: trainset/P64/000024.jpg  \n",
            "  inflating: trainset/P64/000025.jpg  \n",
            "  inflating: trainset/P64/000026.jpg  \n",
            "  inflating: trainset/P64/000027.jpg  \n",
            "  inflating: trainset/P64/000028.jpg  \n",
            "  inflating: trainset/P64/000029.jpg  \n",
            "  inflating: trainset/P64/000030.jpg  \n",
            "  inflating: trainset/P64/000031.jpg  \n",
            "  inflating: trainset/P64/000032.jpg  \n",
            "  inflating: trainset/P64/000033.jpg  \n",
            "  inflating: trainset/P64/000034.jpg  \n",
            "  inflating: trainset/P64/000035.jpg  \n",
            "  inflating: trainset/P64/000036.jpg  \n",
            "  inflating: trainset/P64/000037.jpg  \n",
            "  inflating: trainset/P64/000038.jpg  \n",
            "  inflating: trainset/P64/000039.jpg  \n",
            "  inflating: trainset/P64/000040.jpg  \n",
            "  inflating: trainset/P64/000041.jpg  \n",
            "  inflating: trainset/P65/000000.jpg  \n",
            "  inflating: trainset/P65/000001.jpg  \n",
            "  inflating: trainset/P65/000002.jpg  \n",
            "  inflating: trainset/P65/000003.jpg  \n",
            "  inflating: trainset/P65/000004.jpg  \n",
            "  inflating: trainset/P65/000005.jpg  \n",
            "  inflating: trainset/P65/000006.jpg  \n",
            "  inflating: trainset/P65/000007.jpg  \n",
            "  inflating: trainset/P65/000008.jpg  \n",
            "  inflating: trainset/P65/000009.jpg  \n",
            "  inflating: trainset/P65/000010.jpg  \n",
            "  inflating: trainset/P65/000011.jpg  \n",
            "  inflating: trainset/P65/000012.jpg  \n",
            "  inflating: trainset/P65/000013.jpg  \n",
            "  inflating: trainset/P65/000014.jpg  \n",
            "  inflating: trainset/P65/000015.jpg  \n",
            "  inflating: trainset/P65/000016.jpg  \n",
            "  inflating: trainset/P65/000017.jpg  \n",
            "  inflating: trainset/P65/000018.jpg  \n",
            "  inflating: trainset/P65/000019.jpg  \n",
            "  inflating: trainset/P65/000020.jpg  \n",
            "  inflating: trainset/P65/000021.jpg  \n",
            "  inflating: trainset/P65/000022.jpg  \n",
            "  inflating: trainset/P65/000023.jpg  \n",
            "  inflating: trainset/P65/000024.jpg  \n",
            "  inflating: trainset/P65/000025.jpg  \n",
            "  inflating: trainset/P65/000026.jpg  \n",
            "  inflating: trainset/P65/000027.jpg  \n",
            "  inflating: trainset/P65/000028.jpg  \n",
            "  inflating: trainset/P65/000029.jpg  \n",
            "  inflating: trainset/P65/000030.jpg  \n",
            "  inflating: trainset/P65/000031.jpg  \n",
            "  inflating: trainset/P65/000032.jpg  \n",
            "  inflating: trainset/P65/000033.jpg  \n",
            "  inflating: trainset/P65/000034.jpg  \n",
            "  inflating: trainset/P65/000035.jpg  \n",
            "  inflating: trainset/P65/000036.jpg  \n",
            "  inflating: trainset/P65/000037.jpg  \n",
            "  inflating: trainset/P65/000038.jpg  \n",
            "  inflating: trainset/P65/000039.jpg  \n",
            "  inflating: trainset/P65/000040.jpg  \n",
            "  inflating: trainset/P65/000041.jpg  \n",
            "  inflating: trainset/P65/000042.jpg  \n",
            "  inflating: trainset/P65/000043.jpg  \n",
            "  inflating: trainset/P65/000044.jpg  \n",
            "  inflating: trainset/P65/000045.jpg  \n",
            "  inflating: trainset/P65/000046.jpg  \n",
            "  inflating: trainset/P65/000047.jpg  \n",
            "  inflating: trainset/P65/000048.jpg  \n",
            "  inflating: trainset/P65/000049.jpg  \n",
            "  inflating: trainset/P65/000050.jpg  \n",
            "  inflating: trainset/P65/000051.jpg  \n",
            "  inflating: trainset/P65/000052.jpg  \n",
            "  inflating: trainset/P65/000053.jpg  \n",
            "  inflating: trainset/P65/000054.jpg  \n",
            "  inflating: trainset/P65/000055.jpg  \n",
            "  inflating: trainset/P65/000056.jpg  \n",
            "  inflating: trainset/P65/000057.jpg  \n",
            "  inflating: trainset/P65/000058.jpg  \n",
            "  inflating: trainset/P65/000059.jpg  \n",
            "  inflating: trainset/P65/000060.jpg  \n",
            "  inflating: trainset/P65/000061.jpg  \n",
            "  inflating: trainset/P65/000062.jpg  \n",
            "  inflating: trainset/P65/000063.jpg  \n",
            "  inflating: trainset/P65/000064.jpg  \n",
            "  inflating: trainset/P65/000065.jpg  \n",
            "  inflating: trainset/P65/000066.jpg  \n",
            "  inflating: trainset/P65/000067.jpg  \n",
            "  inflating: trainset/P65/000068.jpg  \n",
            "  inflating: trainset/P65/000069.jpg  \n",
            "  inflating: trainset/P65/000070.jpg  \n",
            "  inflating: trainset/P65/000071.jpg  \n",
            "  inflating: trainset/P65/000072.jpg  \n",
            "  inflating: trainset/P65/000073.jpg  \n",
            "  inflating: trainset/P65/000074.jpg  \n",
            "  inflating: trainset/P65/000075.jpg  \n",
            "  inflating: trainset/P65/000076.jpg  \n",
            "  inflating: trainset/P65/000077.jpg  \n",
            "  inflating: trainset/P65/000078.jpg  \n",
            "  inflating: trainset/P65/000079.jpg  \n",
            "  inflating: trainset/P65/000080.jpg  \n",
            "  inflating: trainset/P65/000081.jpg  \n",
            "  inflating: trainset/P65/000082.jpg  \n",
            "  inflating: trainset/P65/000083.jpg  \n",
            "  inflating: trainset/P65/000084.jpg  \n",
            "  inflating: trainset/P65/000085.jpg  \n",
            "  inflating: trainset/P65/000086.jpg  \n",
            "  inflating: trainset/P65/000087.jpg  \n",
            "  inflating: trainset/P65/000088.jpg  \n",
            "  inflating: trainset/P65/000089.jpg  \n",
            "  inflating: trainset/P65/000090.jpg  \n",
            "  inflating: trainset/P65/000091.jpg  \n",
            "  inflating: trainset/P65/000092.jpg  \n",
            "  inflating: trainset/P65/000093.jpg  \n",
            "  inflating: trainset/P65/000094.jpg  \n",
            "  inflating: trainset/P65/000095.jpg  \n",
            "  inflating: trainset/P65/000096.jpg  \n",
            "  inflating: trainset/P65/000097.jpg  \n",
            "  inflating: trainset/P65/000098.jpg  \n",
            "  inflating: trainset/P66/000000.jpg  \n",
            "  inflating: trainset/P66/000001.jpg  \n",
            "  inflating: trainset/P66/000002.jpg  \n",
            "  inflating: trainset/P66/000003.jpg  \n",
            "  inflating: trainset/P66/000004.jpg  \n",
            "  inflating: trainset/P66/000005.jpg  \n",
            "  inflating: trainset/P66/000006.jpg  \n",
            "  inflating: trainset/P66/000007.jpg  \n",
            "  inflating: trainset/P66/000008.jpg  \n",
            "  inflating: trainset/P66/000009.jpg  \n",
            "  inflating: trainset/P66/000010.jpg  \n",
            "  inflating: trainset/P66/000011.jpg  \n",
            "  inflating: trainset/P66/000012.jpg  \n",
            "  inflating: trainset/P66/000013.jpg  \n",
            "  inflating: trainset/P66/000014.jpg  \n",
            "  inflating: trainset/P66/000015.jpg  \n",
            "  inflating: trainset/P66/000016.jpg  \n",
            "  inflating: trainset/P66/000017.jpg  \n",
            "  inflating: trainset/P66/000018.jpg  \n",
            "  inflating: trainset/P66/000019.jpg  \n",
            "  inflating: trainset/P66/000020.jpg  \n",
            "  inflating: trainset/P66/000021.jpg  \n",
            "  inflating: trainset/P66/000022.jpg  \n",
            "  inflating: trainset/P66/000023.jpg  \n",
            "  inflating: trainset/P66/000024.jpg  \n",
            "  inflating: trainset/P66/000025.jpg  \n",
            "  inflating: trainset/P66/000026.jpg  \n",
            "  inflating: trainset/P66/000027.jpg  \n",
            "  inflating: trainset/P66/000028.jpg  \n",
            "  inflating: trainset/P66/000029.jpg  \n",
            "  inflating: trainset/P66/000030.jpg  \n",
            "  inflating: trainset/P66/000031.jpg  \n",
            "  inflating: trainset/P66/000032.jpg  \n",
            "  inflating: trainset/P66/000033.jpg  \n",
            "  inflating: trainset/P66/000034.jpg  \n",
            "  inflating: trainset/P66/000035.jpg  \n",
            "  inflating: trainset/P66/000036.jpg  \n",
            "  inflating: trainset/P66/000037.jpg  \n",
            "  inflating: trainset/P66/000038.jpg  \n",
            "  inflating: trainset/P66/000039.jpg  \n",
            "  inflating: trainset/P66/000040.jpg  \n",
            "  inflating: trainset/P66/000041.jpg  \n",
            "  inflating: trainset/P66/000042.jpg  \n",
            "  inflating: trainset/P66/000043.jpg  \n",
            "  inflating: trainset/P66/000044.jpg  \n",
            "  inflating: trainset/P66/000045.jpg  \n",
            "  inflating: trainset/P66/000046.jpg  \n",
            "  inflating: trainset/P66/000047.jpg  \n",
            "  inflating: trainset/P66/000048.jpg  \n",
            "  inflating: trainset/P66/000049.jpg  \n",
            "  inflating: trainset/P66/000050.jpg  \n",
            "  inflating: trainset/P66/000051.jpg  \n",
            "  inflating: trainset/P66/000052.jpg  \n",
            "  inflating: trainset/P66/000053.jpg  \n",
            "  inflating: trainset/P66/000054.jpg  \n",
            "  inflating: trainset/P66/000055.jpg  \n",
            "  inflating: trainset/P66/000056.jpg  \n",
            "  inflating: trainset/P66/000057.jpg  \n",
            "  inflating: trainset/P66/000058.jpg  \n",
            "  inflating: trainset/P66/000059.jpg  \n",
            "  inflating: trainset/P66/000060.jpg  \n",
            "  inflating: trainset/P66/000061.jpg  \n",
            "  inflating: trainset/P66/000062.jpg  \n",
            "  inflating: trainset/P67/000000.jpg  \n",
            "  inflating: trainset/P67/000001.jpg  \n",
            "  inflating: trainset/P67/000002.jpg  \n",
            "  inflating: trainset/P67/000003.jpg  \n",
            "  inflating: trainset/P67/000004.jpg  \n",
            "  inflating: trainset/P67/000005.jpg  \n",
            "  inflating: trainset/P67/000006.jpg  \n",
            "  inflating: trainset/P67/000007.jpg  \n",
            "  inflating: trainset/P67/000008.jpg  \n",
            "  inflating: trainset/P67/000009.jpg  \n",
            "  inflating: trainset/P67/000010.jpg  \n",
            "  inflating: trainset/P67/000011.jpg  \n",
            "  inflating: trainset/P67/000012.jpg  \n",
            "  inflating: trainset/P67/000013.jpg  \n",
            "  inflating: trainset/P67/000014.jpg  \n",
            "  inflating: trainset/P67/000015.jpg  \n",
            "  inflating: trainset/P67/000016.jpg  \n",
            "  inflating: trainset/P67/000017.jpg  \n",
            "  inflating: trainset/P67/000018.jpg  \n",
            "  inflating: trainset/P67/000019.jpg  \n",
            "  inflating: trainset/P67/000020.jpg  \n",
            "  inflating: trainset/P67/000021.jpg  \n",
            "  inflating: trainset/P67/000022.jpg  \n",
            "  inflating: trainset/P67/000023.jpg  \n",
            "  inflating: trainset/P67/000024.jpg  \n",
            "  inflating: trainset/P67/000025.jpg  \n",
            "  inflating: trainset/P67/000026.jpg  \n",
            "  inflating: trainset/P67/000027.jpg  \n",
            "  inflating: trainset/P67/000028.jpg  \n",
            "  inflating: trainset/P67/000029.jpg  \n",
            "  inflating: trainset/P67/000030.jpg  \n",
            "  inflating: trainset/P67/000031.jpg  \n",
            "  inflating: trainset/P67/000032.jpg  \n",
            "  inflating: trainset/P67/000033.jpg  \n",
            "  inflating: trainset/P67/000034.jpg  \n",
            "  inflating: trainset/P67/000035.jpg  \n",
            "  inflating: trainset/P67/000036.jpg  \n",
            "  inflating: trainset/P67/000037.jpg  \n",
            "  inflating: trainset/P67/000038.jpg  \n",
            "  inflating: trainset/P67/000039.jpg  \n",
            "  inflating: trainset/P67/000040.jpg  \n",
            "  inflating: trainset/P67/000041.jpg  \n",
            "  inflating: trainset/P67/000042.jpg  \n",
            "  inflating: trainset/P67/000043.jpg  \n",
            "  inflating: trainset/P67/000044.jpg  \n",
            "  inflating: trainset/P67/000045.jpg  \n",
            "  inflating: trainset/P67/000046.jpg  \n",
            "  inflating: trainset/P67/000047.jpg  \n",
            "  inflating: trainset/P67/000048.jpg  \n",
            "  inflating: trainset/P67/000049.jpg  \n",
            "  inflating: trainset/P67/000050.jpg  \n",
            "  inflating: trainset/P67/000051.jpg  \n",
            "  inflating: trainset/P67/000052.jpg  \n",
            "  inflating: trainset/P67/000053.jpg  \n",
            "  inflating: trainset/P67/000054.jpg  \n",
            "  inflating: trainset/P67/000055.jpg  \n",
            "  inflating: trainset/P67/000056.jpg  \n",
            "  inflating: trainset/P67/000057.jpg  \n",
            "  inflating: trainset/P67/000058.jpg  \n",
            "  inflating: trainset/P67/000059.jpg  \n",
            "  inflating: trainset/P67/000060.jpg  \n",
            "  inflating: trainset/P67/000061.jpg  \n",
            "  inflating: trainset/P67/000062.jpg  \n",
            "  inflating: trainset/P67/000063.jpg  \n",
            "  inflating: trainset/P67/000064.jpg  \n",
            "  inflating: trainset/P67/000065.jpg  \n",
            "  inflating: trainset/P67/000066.jpg  \n",
            "  inflating: trainset/P67/000067.jpg  \n",
            "  inflating: trainset/P67/000068.jpg  \n",
            "  inflating: trainset/P67/000069.jpg  \n",
            "  inflating: trainset/P67/000070.jpg  \n",
            "  inflating: trainset/P67/000071.jpg  \n",
            "  inflating: trainset/P67/000072.jpg  \n",
            "  inflating: trainset/P67/000073.jpg  \n",
            "  inflating: trainset/P67/000074.jpg  \n",
            "  inflating: trainset/P67/000075.jpg  \n",
            "  inflating: trainset/P67/000076.jpg  \n",
            "  inflating: trainset/P67/000077.jpg  \n",
            "  inflating: trainset/P67/000078.jpg  \n",
            "  inflating: trainset/P67/000079.jpg  \n",
            "  inflating: trainset/P67/000080.jpg  \n",
            "  inflating: trainset/P67/000081.jpg  \n",
            "  inflating: trainset/P67/000082.jpg  \n",
            "  inflating: trainset/P67/000083.jpg  \n",
            "  inflating: trainset/P67/000084.jpg  \n",
            "  inflating: trainset/P67/000085.jpg  \n",
            "  inflating: trainset/P67/000086.jpg  \n",
            "  inflating: trainset/P67/000087.jpg  \n",
            "  inflating: trainset/P67/000088.jpg  \n",
            "  inflating: trainset/P67/000089.jpg  \n",
            "  inflating: trainset/P67/000090.jpg  \n",
            "  inflating: trainset/P67/000091.jpg  \n",
            "  inflating: trainset/P67/000092.jpg  \n",
            "  inflating: trainset/P67/000093.jpg  \n",
            "  inflating: trainset/P67/000094.jpg  \n",
            "  inflating: trainset/P67/000095.jpg  \n",
            "  inflating: trainset/P67/000096.jpg  \n",
            "  inflating: trainset/P67/000097.jpg  \n",
            "  inflating: trainset/P67/000098.jpg  \n",
            "  inflating: trainset/P67/000099.jpg  \n",
            "  inflating: trainset/P67/000100.jpg  \n",
            "  inflating: trainset/P67/000101.jpg  \n",
            "  inflating: trainset/P67/000102.jpg  \n",
            "  inflating: trainset/P67/000103.jpg  \n",
            "  inflating: trainset/P70/000000.jpg  \n",
            "  inflating: trainset/P70/000001.jpg  \n",
            "  inflating: trainset/P70/000002.jpg  \n",
            "  inflating: trainset/P70/000003.jpg  \n",
            "  inflating: trainset/P70/000004.jpg  \n",
            "  inflating: trainset/P70/000005.jpg  \n",
            "  inflating: trainset/P70/000006.jpg  \n",
            "  inflating: trainset/P70/000007.jpg  \n",
            "  inflating: trainset/P70/000008.jpg  \n",
            "  inflating: trainset/P70/000009.jpg  \n",
            "  inflating: trainset/P70/000010.jpg  \n",
            "  inflating: trainset/P70/000011.jpg  \n",
            "  inflating: trainset/P70/000012.jpg  \n",
            "  inflating: trainset/P70/000013.jpg  \n",
            "  inflating: trainset/P70/000014.jpg  \n",
            "  inflating: trainset/P70/000015.jpg  \n",
            "  inflating: trainset/P70/000016.jpg  \n",
            "  inflating: trainset/P70/000017.jpg  \n",
            "  inflating: trainset/P70/000018.jpg  \n",
            "  inflating: trainset/P70/000019.jpg  \n",
            "  inflating: trainset/P70/000020.jpg  \n",
            "  inflating: trainset/P70/000021.jpg  \n",
            "  inflating: trainset/P70/000022.jpg  \n",
            "  inflating: trainset/P70/000023.jpg  \n",
            "  inflating: trainset/P70/000024.jpg  \n",
            "  inflating: trainset/P70/000025.jpg  \n",
            "  inflating: trainset/P70/000026.jpg  \n",
            "  inflating: trainset/P70/000027.jpg  \n",
            "  inflating: trainset/P70/000028.jpg  \n",
            "  inflating: trainset/P70/000029.jpg  \n",
            "  inflating: trainset/P70/000030.jpg  \n",
            "  inflating: trainset/P70/000031.jpg  \n",
            "  inflating: trainset/P70/000032.jpg  \n",
            "  inflating: trainset/P70/000033.jpg  \n",
            "  inflating: trainset/P70/000034.jpg  \n",
            "  inflating: trainset/P70/000035.jpg  \n",
            "  inflating: trainset/P70/000036.jpg  \n",
            "  inflating: trainset/P70/000037.jpg  \n",
            "  inflating: trainset/P70/000038.jpg  \n",
            "  inflating: trainset/P70/000039.jpg  \n",
            "  inflating: trainset/P70/000040.jpg  \n",
            "  inflating: trainset/P70/000041.jpg  \n",
            "  inflating: trainset/P70/000042.jpg  \n",
            "  inflating: trainset/P70/000043.jpg  \n",
            "  inflating: trainset/P70/000044.jpg  \n",
            "  inflating: trainset/P70/000045.jpg  \n",
            "  inflating: trainset/P70/000046.jpg  \n",
            "  inflating: trainset/P70/000047.jpg  \n",
            "  inflating: trainset/P70/000048.jpg  \n",
            "  inflating: trainset/P70/000049.jpg  \n",
            "  inflating: trainset/P70/000050.jpg  \n",
            "  inflating: trainset/P70/000051.jpg  \n",
            "  inflating: trainset/P70/000052.jpg  \n",
            "  inflating: trainset/P72/000000.jpg  \n",
            "  inflating: trainset/P72/000001.jpg  \n",
            "  inflating: trainset/P72/000002.jpg  \n",
            "  inflating: trainset/P72/000003.jpg  \n",
            "  inflating: trainset/P72/000004.jpg  \n",
            "  inflating: trainset/P72/000005.jpg  \n",
            "  inflating: trainset/P72/000006.jpg  \n",
            "  inflating: trainset/P72/000007.jpg  \n",
            "  inflating: trainset/P72/000008.jpg  \n",
            "  inflating: trainset/P72/000009.jpg  \n",
            "  inflating: trainset/P72/000010.jpg  \n",
            "  inflating: trainset/P72/000011.jpg  \n",
            "  inflating: trainset/P72/000012.jpg  \n",
            "  inflating: trainset/P72/000013.jpg  \n",
            "  inflating: trainset/P72/000014.jpg  \n",
            "  inflating: trainset/P72/000015.jpg  \n",
            "  inflating: trainset/P72/000016.jpg  \n",
            "  inflating: trainset/P72/000017.jpg  \n",
            "  inflating: trainset/P72/000018.jpg  \n",
            "  inflating: trainset/P72/000019.jpg  \n",
            "  inflating: trainset/P72/000020.jpg  \n",
            "  inflating: trainset/P72/000021.jpg  \n",
            "  inflating: trainset/P72/000022.jpg  \n",
            "  inflating: trainset/P72/000023.jpg  \n",
            "  inflating: trainset/P72/000024.jpg  \n",
            "  inflating: trainset/P72/000025.jpg  \n",
            "  inflating: trainset/P72/000026.jpg  \n",
            "  inflating: trainset/P72/000027.jpg  \n",
            "  inflating: trainset/P72/000028.jpg  \n",
            "  inflating: trainset/P72/000029.jpg  \n",
            "  inflating: trainset/P72/000030.jpg  \n",
            "  inflating: trainset/P72/000031.jpg  \n",
            "  inflating: trainset/P72/000032.jpg  \n",
            "  inflating: trainset/P72/000033.jpg  \n",
            "  inflating: trainset/P72/000034.jpg  \n",
            "  inflating: trainset/P72/000035.jpg  \n",
            "  inflating: trainset/P74/000000.jpg  \n",
            "  inflating: trainset/P74/000001.jpg  \n",
            "  inflating: trainset/P74/000002.jpg  \n",
            "  inflating: trainset/P74/000003.jpg  \n",
            "  inflating: trainset/P74/000004.jpg  \n",
            "  inflating: trainset/P74/000005.jpg  \n",
            "  inflating: trainset/P74/000006.jpg  \n",
            "  inflating: trainset/P74/000007.jpg  \n",
            "  inflating: trainset/P74/000008.jpg  \n",
            "  inflating: trainset/P74/000009.jpg  \n",
            "  inflating: trainset/P74/000010.jpg  \n",
            "  inflating: trainset/P74/000011.jpg  \n",
            "  inflating: trainset/P74/000012.jpg  \n",
            "  inflating: trainset/P74/000013.jpg  \n",
            "  inflating: trainset/P74/000014.jpg  \n",
            "  inflating: trainset/P74/000015.jpg  \n",
            "  inflating: trainset/P74/000016.jpg  \n",
            "  inflating: trainset/P74/000017.jpg  \n",
            "  inflating: trainset/P74/000018.jpg  \n",
            "  inflating: trainset/P74/000019.jpg  \n",
            "  inflating: trainset/P74/000020.jpg  \n",
            "  inflating: trainset/P74/000021.jpg  \n",
            "  inflating: trainset/P74/000022.jpg  \n",
            "  inflating: trainset/P74/000023.jpg  \n",
            "  inflating: trainset/P74/000024.jpg  \n",
            "  inflating: trainset/P74/000025.jpg  \n",
            "  inflating: trainset/P74/000026.jpg  \n",
            "  inflating: trainset/P74/000027.jpg  \n",
            "  inflating: trainset/P74/000028.jpg  \n",
            "  inflating: trainset/P74/000029.jpg  \n",
            "  inflating: trainset/P74/000030.jpg  \n",
            "  inflating: trainset/P74/000031.jpg  \n",
            "  inflating: trainset/P74/000032.jpg  \n",
            "  inflating: trainset/P74/000033.jpg  \n",
            "  inflating: trainset/P74/000034.jpg  \n",
            "  inflating: trainset/P74/000035.jpg  \n",
            "  inflating: trainset/P74/000036.jpg  \n",
            "  inflating: trainset/P74/000037.jpg  \n",
            "  inflating: trainset/P74/000038.jpg  \n",
            "  inflating: trainset/P74/000039.jpg  \n",
            "  inflating: trainset/P74/000040.jpg  \n",
            "  inflating: trainset/P74/000041.jpg  \n",
            "  inflating: trainset/P74/000042.jpg  \n",
            "  inflating: trainset/P74/000043.jpg  \n",
            "  inflating: trainset/P74/000044.jpg  \n",
            "  inflating: trainset/P74/000045.jpg  \n",
            "  inflating: trainset/P74/000046.jpg  \n",
            "  inflating: trainset/P74/000047.jpg  \n",
            "  inflating: trainset/P74/000048.jpg  \n",
            "  inflating: trainset/P74/000049.jpg  \n",
            "  inflating: trainset/P74/000050.jpg  \n",
            "  inflating: trainset/P74/000051.jpg  \n",
            "  inflating: trainset/P74/000052.jpg  \n",
            "  inflating: trainset/P74/000053.jpg  \n",
            "  inflating: trainset/P74/000054.jpg  \n",
            "  inflating: trainset/P74/000055.jpg  \n",
            "  inflating: trainset/P74/000056.jpg  \n",
            "  inflating: trainset/P74/000057.jpg  \n",
            "  inflating: trainset/P74/000058.jpg  \n",
            "  inflating: trainset/P74/000059.jpg  \n",
            "  inflating: trainset/P74/000060.jpg  \n",
            "  inflating: trainset/P74/000061.jpg  \n",
            "  inflating: trainset/P74/000062.jpg  \n",
            "  inflating: trainset/P74/000063.jpg  \n",
            "  inflating: trainset/P76/000000.jpg  \n",
            "  inflating: trainset/P76/000001.jpg  \n",
            "  inflating: trainset/P76/000002.jpg  \n",
            "  inflating: trainset/P76/000003.jpg  \n",
            "  inflating: trainset/P76/000004.jpg  \n",
            "  inflating: trainset/P76/000005.jpg  \n",
            "  inflating: trainset/P76/000006.jpg  \n",
            "  inflating: trainset/P76/000007.jpg  \n",
            "  inflating: trainset/P76/000008.jpg  \n",
            "  inflating: trainset/P76/000009.jpg  \n",
            "  inflating: trainset/P76/000010.jpg  \n",
            "  inflating: trainset/P76/000011.jpg  \n",
            "  inflating: trainset/P76/000012.jpg  \n",
            "  inflating: trainset/P76/000013.jpg  \n",
            "  inflating: trainset/P76/000014.jpg  \n",
            "  inflating: trainset/P76/000015.jpg  \n",
            "  inflating: trainset/P76/000016.jpg  \n",
            "  inflating: trainset/P76/000017.jpg  \n",
            "  inflating: trainset/P76/000018.jpg  \n",
            "  inflating: trainset/P76/000019.jpg  \n",
            "  inflating: trainset/P76/000020.jpg  \n",
            "  inflating: trainset/P76/000021.jpg  \n",
            "  inflating: trainset/P76/000022.jpg  \n",
            "  inflating: trainset/P76/000023.jpg  \n",
            "  inflating: trainset/P76/000024.jpg  \n",
            "  inflating: trainset/P76/000025.jpg  \n",
            "  inflating: trainset/P76/000026.jpg  \n",
            "  inflating: trainset/P76/000027.jpg  \n",
            "  inflating: trainset/P76/000028.jpg  \n",
            "  inflating: trainset/P76/000029.jpg  \n",
            "  inflating: trainset/P76/000030.jpg  \n",
            "  inflating: trainset/P76/000031.jpg  \n",
            "  inflating: trainset/P76/000032.jpg  \n",
            "  inflating: trainset/P76/000033.jpg  \n",
            "  inflating: trainset/P76/000034.jpg  \n",
            "  inflating: trainset/P76/000035.jpg  \n",
            "  inflating: trainset/P76/000036.jpg  \n",
            "  inflating: trainset/P76/000037.jpg  \n",
            "  inflating: trainset/P76/000038.jpg  \n",
            "  inflating: trainset/P76/000039.jpg  \n",
            "  inflating: trainset/P76/000040.jpg  \n",
            "  inflating: trainset/P76/000041.jpg  \n",
            "  inflating: trainset/P76/000042.jpg  \n",
            "  inflating: trainset/P76/000043.jpg  \n",
            "  inflating: trainset/P76/000044.jpg  \n",
            "  inflating: trainset/P76/000045.jpg  \n",
            "  inflating: trainset/P76/000046.jpg  \n",
            "  inflating: trainset/P76/000047.jpg  \n",
            "  inflating: trainset/P76/000048.jpg  \n",
            "  inflating: trainset/P76/000049.jpg  \n",
            "  inflating: trainset/P77/000000.jpg  \n",
            "  inflating: trainset/P77/000001.jpg  \n",
            "  inflating: trainset/P77/000002.jpg  \n",
            "  inflating: trainset/P77/000003.jpg  \n",
            "  inflating: trainset/P77/000004.jpg  \n",
            "  inflating: trainset/P77/000005.jpg  \n",
            "  inflating: trainset/P77/000006.jpg  \n",
            "  inflating: trainset/P77/000007.jpg  \n",
            "  inflating: trainset/P77/000008.jpg  \n",
            "  inflating: trainset/P77/000009.jpg  \n",
            "  inflating: trainset/P77/000010.jpg  \n",
            "  inflating: trainset/P77/000011.jpg  \n",
            "  inflating: trainset/P77/000012.jpg  \n",
            "  inflating: trainset/P77/000013.jpg  \n",
            "  inflating: trainset/P77/000014.jpg  \n",
            "  inflating: trainset/P77/000015.jpg  \n",
            "  inflating: trainset/P77/000016.jpg  \n",
            "  inflating: trainset/P77/000017.jpg  \n",
            "  inflating: trainset/P77/000018.jpg  \n",
            "  inflating: trainset/P77/000019.jpg  \n",
            "  inflating: trainset/P77/000020.jpg  \n",
            "  inflating: trainset/P77/000021.jpg  \n",
            "  inflating: trainset/P77/000022.jpg  \n",
            "  inflating: trainset/P77/000023.jpg  \n",
            "  inflating: trainset/P77/000024.jpg  \n",
            "  inflating: trainset/P77/000025.jpg  \n",
            "  inflating: trainset/P77/000026.jpg  \n",
            "  inflating: trainset/P77/000027.jpg  \n",
            "  inflating: trainset/P77/000028.jpg  \n",
            "  inflating: trainset/P77/000029.jpg  \n",
            "  inflating: trainset/P77/000030.jpg  \n",
            "  inflating: trainset/P77/000031.jpg  \n",
            "  inflating: trainset/P77/000032.jpg  \n",
            "  inflating: trainset/P77/000033.jpg  \n",
            "  inflating: trainset/P77/000034.jpg  \n",
            "  inflating: trainset/P77/000035.jpg  \n",
            "  inflating: trainset/P77/000036.jpg  \n",
            "  inflating: trainset/P77/000037.jpg  \n",
            "  inflating: trainset/P77/000038.jpg  \n",
            "  inflating: trainset/P77/000039.jpg  \n",
            "  inflating: trainset/P77/000040.jpg  \n",
            "  inflating: trainset/P77/000041.jpg  \n",
            "  inflating: trainset/P77/000042.jpg  \n",
            "  inflating: trainset/P77/000043.jpg  \n",
            "  inflating: trainset/P77/000044.jpg  \n",
            "  inflating: trainset/P77/000045.jpg  \n",
            "  inflating: trainset/P77/000046.jpg  \n",
            "  inflating: trainset/P77/000047.jpg  \n",
            "  inflating: trainset/P77/000048.jpg  \n",
            "  inflating: trainset/P77/000049.jpg  \n",
            "  inflating: trainset/P77/000050.jpg  \n",
            "  inflating: trainset/P77/000051.jpg  \n",
            "  inflating: trainset/P77/000052.jpg  \n",
            "  inflating: trainset/P77/000053.jpg  \n",
            "  inflating: trainset/P77/000054.jpg  \n",
            "  inflating: trainset/P77/000055.jpg  \n",
            "  inflating: trainset/P77/000056.jpg  \n",
            "  inflating: trainset/P77/000057.jpg  \n",
            "  inflating: trainset/P77/000058.jpg  \n",
            "  inflating: trainset/P77/000059.jpg  \n",
            "  inflating: trainset/P77/000060.jpg  \n",
            "  inflating: trainset/P77/000061.jpg  \n",
            "  inflating: trainset/P77/000062.jpg  \n",
            "  inflating: trainset/P77/000063.jpg  \n",
            "  inflating: trainset/P77/000064.jpg  \n",
            "  inflating: trainset/P77/000065.jpg  \n",
            "  inflating: trainset/P77/000066.jpg  \n",
            "  inflating: trainset/P77/000067.jpg  \n",
            "  inflating: trainset/P77/000068.jpg  \n",
            "  inflating: trainset/P78/000000.jpg  \n",
            "  inflating: trainset/P78/000001.jpg  \n",
            "  inflating: trainset/P78/000002.jpg  \n",
            "  inflating: trainset/P78/000003.jpg  \n",
            "  inflating: trainset/P78/000004.jpg  \n",
            "  inflating: trainset/P78/000005.jpg  \n",
            "  inflating: trainset/P78/000006.jpg  \n",
            "  inflating: trainset/P78/000007.jpg  \n",
            "  inflating: trainset/P78/000008.jpg  \n",
            "  inflating: trainset/P78/000009.jpg  \n",
            "  inflating: trainset/P78/000010.jpg  \n",
            "  inflating: trainset/P78/000011.jpg  \n",
            "  inflating: trainset/P78/000012.jpg  \n",
            "  inflating: trainset/P78/000013.jpg  \n",
            "  inflating: trainset/P78/000014.jpg  \n",
            "  inflating: trainset/P78/000015.jpg  \n",
            "  inflating: trainset/P78/000016.jpg  \n",
            "  inflating: trainset/P78/000017.jpg  \n",
            "  inflating: trainset/P78/000018.jpg  \n",
            "  inflating: trainset/P78/000019.jpg  \n",
            "  inflating: trainset/P78/000020.jpg  \n",
            "  inflating: trainset/P78/000021.jpg  \n",
            "  inflating: trainset/P78/000022.jpg  \n",
            "  inflating: trainset/P78/000023.jpg  \n",
            "  inflating: trainset/P78/000024.jpg  \n",
            "  inflating: trainset/P78/000025.jpg  \n",
            "  inflating: trainset/P78/000026.jpg  \n",
            "  inflating: trainset/P78/000027.jpg  \n",
            "  inflating: trainset/P78/000028.jpg  \n",
            "  inflating: trainset/P78/000029.jpg  \n",
            "  inflating: trainset/P78/000030.jpg  \n",
            "  inflating: trainset/P78/000031.jpg  \n",
            "  inflating: trainset/P78/000032.jpg  \n",
            "  inflating: trainset/P78/000033.jpg  \n",
            "  inflating: trainset/P78/000034.jpg  \n",
            "  inflating: trainset/P78/000035.jpg  \n",
            "  inflating: trainset/P78/000036.jpg  \n",
            "  inflating: trainset/P78/000037.jpg  \n",
            "  inflating: trainset/P79/000000.jpg  \n",
            "  inflating: trainset/P79/000001.jpg  \n",
            "  inflating: trainset/P79/000002.jpg  \n",
            "  inflating: trainset/P79/000003.jpg  \n",
            "  inflating: trainset/P79/000004.jpg  \n",
            "  inflating: trainset/P79/000005.jpg  \n",
            "  inflating: trainset/P79/000006.jpg  \n",
            "  inflating: trainset/P79/000007.jpg  \n",
            "  inflating: trainset/P79/000008.jpg  \n",
            "  inflating: trainset/P79/000009.jpg  \n",
            "  inflating: trainset/P79/000010.jpg  \n",
            "  inflating: trainset/P79/000011.jpg  \n",
            "  inflating: trainset/P79/000012.jpg  \n",
            "  inflating: trainset/P79/000013.jpg  \n",
            "  inflating: trainset/P79/000014.jpg  \n",
            "  inflating: trainset/P79/000015.jpg  \n",
            "  inflating: trainset/P79/000016.jpg  \n",
            "  inflating: trainset/P79/000017.jpg  \n",
            "  inflating: trainset/P79/000018.jpg  \n",
            "  inflating: trainset/P79/000019.jpg  \n",
            "  inflating: trainset/P79/000020.jpg  \n",
            "  inflating: trainset/P79/000021.jpg  \n",
            "  inflating: trainset/P79/000022.jpg  \n",
            "  inflating: trainset/P79/000023.jpg  \n",
            "  inflating: trainset/P79/000024.jpg  \n",
            "  inflating: trainset/P79/000025.jpg  \n",
            "  inflating: trainset/P79/000026.jpg  \n",
            "  inflating: trainset/P79/000027.jpg  \n",
            "  inflating: trainset/P79/000028.jpg  \n",
            "  inflating: trainset/P79/000029.jpg  \n",
            "  inflating: trainset/P79/000030.jpg  \n",
            "  inflating: trainset/P79/000031.jpg  \n",
            "  inflating: trainset/P79/000032.jpg  \n",
            "  inflating: trainset/P79/000033.jpg  \n",
            "  inflating: trainset/P79/000034.jpg  \n",
            "  inflating: trainset/P79/000035.jpg  \n",
            "  inflating: trainset/P79/000036.jpg  \n",
            "  inflating: trainset/P79/000037.jpg  \n",
            "  inflating: trainset/P79/000038.jpg  \n",
            "  inflating: trainset/P79/000039.jpg  \n",
            "  inflating: trainset/P79/000040.jpg  \n",
            "  inflating: trainset/P79/000041.jpg  \n",
            "  inflating: trainset/P79/000042.jpg  \n",
            "  inflating: trainset/P79/000043.jpg  \n",
            "  inflating: trainset/P79/000044.jpg  \n",
            "  inflating: trainset/P79/000045.jpg  \n",
            "  inflating: trainset/P79/000046.jpg  \n",
            "  inflating: trainset/P79/000047.jpg  \n",
            "  inflating: trainset/P79/000048.jpg  \n",
            "  inflating: trainset/P79/000049.jpg  \n",
            "  inflating: trainset/P79/000050.jpg  \n",
            "  inflating: trainset/P79/000051.jpg  \n",
            "  inflating: trainset/P79/000052.jpg  \n",
            "  inflating: trainset/P79/000053.jpg  \n",
            "  inflating: trainset/P79/000054.jpg  \n",
            "  inflating: trainset/P79/000055.jpg  \n",
            "  inflating: trainset/P79/000056.jpg  \n",
            "  inflating: trainset/P79/000057.jpg  \n",
            "  inflating: trainset/P79/000058.jpg  \n",
            "  inflating: trainset/P79/000059.jpg  \n",
            "  inflating: trainset/P79/000060.jpg  \n",
            "  inflating: trainset/P79/000061.jpg  \n",
            "  inflating: trainset/P79/000062.jpg  \n",
            "  inflating: trainset/P79/000063.jpg  \n",
            "  inflating: trainset/P79/000064.jpg  \n",
            "  inflating: trainset/P79/000065.jpg  \n",
            "  inflating: trainset/P79/000066.jpg  \n",
            "  inflating: trainset/P79/000067.jpg  \n",
            "  inflating: trainset/P79/000068.jpg  \n",
            "  inflating: trainset/P79/000069.jpg  \n",
            "  inflating: trainset/P79/000070.jpg  \n",
            "  inflating: trainset/P79/000071.jpg  \n",
            "  inflating: trainset/P79/000072.jpg  \n",
            "  inflating: trainset/P79/000073.jpg  \n",
            "  inflating: trainset/P79/000074.jpg  \n",
            "  inflating: trainset/P79/000075.jpg  \n",
            "  inflating: trainset/P79/000076.jpg  \n",
            "  inflating: trainset/P79/000077.jpg  \n",
            "  inflating: trainset/P79/000078.jpg  \n",
            "  inflating: trainset/P79/000079.jpg  \n",
            "  inflating: trainset/P79/000080.jpg  \n",
            "  inflating: trainset/P79/000081.jpg  \n",
            "  inflating: trainset/P79/000082.jpg  \n",
            "  inflating: trainset/P79/000083.jpg  \n",
            "  inflating: trainset/P79/000084.jpg  \n",
            "  inflating: trainset/P79/000085.jpg  \n",
            "  inflating: trainset/P79/000086.jpg  \n",
            "  inflating: trainset/P79/000087.jpg  \n",
            "  inflating: trainset/P79/000088.jpg  \n",
            "  inflating: trainset/P79/000089.jpg  \n",
            "  inflating: trainset/P79/000090.jpg  \n",
            "  inflating: trainset/P79/000091.jpg  \n",
            "  inflating: trainset/P79/000092.jpg  \n",
            "  inflating: trainset/P79/000093.jpg  \n",
            "  inflating: trainset/P79/000094.jpg  \n",
            "  inflating: trainset/P79/000095.jpg  \n",
            "  inflating: trainset/P79/000096.jpg  \n",
            "  inflating: trainset/P79/000097.jpg  \n",
            "  inflating: trainset/P79/000098.jpg  \n",
            "  inflating: trainset/P79/000099.jpg  \n",
            "  inflating: trainset/P79/000100.jpg  \n",
            "  inflating: trainset/P79/000101.jpg  \n",
            "  inflating: trainset/P79/000102.jpg  \n",
            "  inflating: trainset/P79/000103.jpg  \n",
            "  inflating: trainset/P79/000104.jpg  \n",
            "  inflating: trainset/P79/000105.jpg  \n",
            "  inflating: trainset/P79/000106.jpg  \n",
            "  inflating: trainset/P79/000107.jpg  \n",
            "  inflating: trainset/P79/000108.jpg  \n",
            "  inflating: trainset/P79/000109.jpg  \n",
            "  inflating: trainset/P79/000110.jpg  \n",
            "  inflating: trainset/P79/000111.jpg  \n",
            "  inflating: trainset/P79/000112.jpg  \n",
            "  inflating: trainset/P79/000113.jpg  \n",
            "  inflating: trainset/P79/000114.jpg  \n",
            "  inflating: trainset/P79/000115.jpg  \n",
            "  inflating: trainset/P79/000116.jpg  \n",
            "  inflating: trainset/P79/000117.jpg  \n",
            "  inflating: trainset/P79/000118.jpg  \n",
            "  inflating: trainset/P79/000119.jpg  \n",
            "  inflating: trainset/P79/000120.jpg  \n",
            "  inflating: trainset/P79/000121.jpg  \n",
            "  inflating: trainset/P79/000122.jpg  \n",
            "  inflating: trainset/P79/000123.jpg  \n",
            "  inflating: trainset/P79/000124.jpg  \n",
            "  inflating: trainset/P79/000125.jpg  \n",
            "  inflating: trainset/P79/000126.jpg  \n",
            "  inflating: trainset/P79/000127.jpg  \n",
            "  inflating: trainset/P79/000128.jpg  \n",
            "  inflating: trainset/P79/000129.jpg  \n",
            "  inflating: trainset/P79/000130.jpg  \n",
            "  inflating: trainset/P79/000131.jpg  \n",
            "  inflating: trainset/P79/000132.jpg  \n",
            "  inflating: trainset/P79/000133.jpg  \n",
            "  inflating: trainset/P79/000134.jpg  \n",
            "  inflating: trainset/P79/000135.jpg  \n",
            "  inflating: trainset/P79/000136.jpg  \n",
            "  inflating: trainset/P79/000137.jpg  \n",
            "  inflating: trainset/P79/000138.jpg  \n",
            "  inflating: trainset/P79/000139.jpg  \n",
            "  inflating: trainset/P79/000140.jpg  \n",
            "  inflating: trainset/P79/000141.jpg  \n",
            "  inflating: trainset/P79/000142.jpg  \n",
            "  inflating: trainset/P79/000143.jpg  \n",
            "  inflating: trainset/P79/000144.jpg  \n",
            "  inflating: trainset/P79/000145.jpg  \n",
            "  inflating: trainset/P79/000146.jpg  \n",
            "  inflating: trainset/P79/000147.jpg  \n",
            "  inflating: trainset/P79/000148.jpg  \n",
            "  inflating: trainset/P79/000149.jpg  \n",
            "  inflating: trainset/P79/000150.jpg  \n",
            "  inflating: trainset/P79/000151.jpg  \n",
            "  inflating: trainset/P79/000152.jpg  \n",
            "  inflating: trainset/P79/000153.jpg  \n",
            "  inflating: trainset/P79/000154.jpg  \n",
            "  inflating: trainset/P79/000155.jpg  \n",
            "  inflating: trainset/P79/000156.jpg  \n",
            "  inflating: trainset/P79/000157.jpg  \n",
            "  inflating: trainset/P79/000158.jpg  \n",
            "  inflating: trainset/P79/000159.jpg  \n",
            "  inflating: trainset/P79/000160.jpg  \n",
            "  inflating: trainset/P79/000161.jpg  \n",
            "  inflating: trainset/P79/000162.jpg  \n",
            "  inflating: trainset/P79/000163.jpg  \n",
            "  inflating: trainset/P79/000164.jpg  \n",
            "  inflating: trainset/P79/000165.jpg  \n",
            "  inflating: trainset/P79/000166.jpg  \n",
            "  inflating: trainset/P79/000167.jpg  \n",
            "  inflating: trainset/P79/000168.jpg  \n",
            "  inflating: trainset/P8/000000.jpg  \n",
            "  inflating: trainset/P8/000001.jpg  \n",
            "  inflating: trainset/P8/000002.jpg  \n",
            "  inflating: trainset/P8/000003.jpg  \n",
            "  inflating: trainset/P8/000004.jpg  \n",
            "  inflating: trainset/P8/000005.jpg  \n",
            "  inflating: trainset/P8/000006.jpg  \n",
            "  inflating: trainset/P8/000007.jpg  \n",
            "  inflating: trainset/P8/000008.jpg  \n",
            "  inflating: trainset/P8/000009.jpg  \n",
            "  inflating: trainset/P8/000010.jpg  \n",
            "  inflating: trainset/P8/000011.jpg  \n",
            "  inflating: trainset/P8/000012.jpg  \n",
            "  inflating: trainset/P8/000013.jpg  \n",
            "  inflating: trainset/P8/000014.jpg  \n",
            "  inflating: trainset/P8/000015.jpg  \n",
            "  inflating: trainset/P8/000016.jpg  \n",
            "  inflating: trainset/P8/000017.jpg  \n",
            "  inflating: trainset/P8/000018.jpg  \n",
            "  inflating: trainset/P8/000019.jpg  \n",
            "  inflating: trainset/P8/000020.jpg  \n",
            "  inflating: trainset/P8/000021.jpg  \n",
            "  inflating: trainset/P8/000022.jpg  \n",
            "  inflating: trainset/P8/000023.jpg  \n",
            "  inflating: trainset/P8/000024.jpg  \n",
            "  inflating: trainset/P8/000025.jpg  \n",
            "  inflating: trainset/P8/000026.jpg  \n",
            "  inflating: trainset/P8/000027.jpg  \n",
            "  inflating: trainset/P8/000028.jpg  \n",
            "  inflating: trainset/P8/000029.jpg  \n",
            "  inflating: trainset/P8/000030.jpg  \n",
            "  inflating: trainset/P8/000031.jpg  \n",
            "  inflating: trainset/P8/000032.jpg  \n",
            "  inflating: trainset/P8/000033.jpg  \n",
            "  inflating: trainset/P8/000034.jpg  \n",
            "  inflating: trainset/P8/000035.jpg  \n",
            "  inflating: trainset/P8/000036.jpg  \n",
            "  inflating: trainset/P8/000037.jpg  \n",
            "  inflating: trainset/P8/000038.jpg  \n",
            "  inflating: trainset/P8/000039.jpg  \n",
            "  inflating: trainset/P8/000040.jpg  \n",
            "  inflating: trainset/P8/000041.jpg  \n",
            "  inflating: trainset/P8/000042.jpg  \n",
            "  inflating: trainset/P8/000043.jpg  \n",
            "  inflating: trainset/P8/000044.jpg  \n",
            "  inflating: trainset/P8/000045.jpg  \n",
            "  inflating: trainset/P8/000046.jpg  \n",
            "  inflating: trainset/P8/000047.jpg  \n",
            "  inflating: trainset/P8/000048.jpg  \n",
            "  inflating: trainset/P8/000049.jpg  \n",
            "  inflating: trainset/P8/000050.jpg  \n",
            "  inflating: trainset/P8/000051.jpg  \n",
            "  inflating: trainset/P8/000052.jpg  \n",
            "  inflating: trainset/P8/000053.jpg  \n",
            "  inflating: trainset/P8/000054.jpg  \n",
            "  inflating: trainset/P8/000055.jpg  \n",
            "  inflating: trainset/P80/000000.jpg  \n",
            "  inflating: trainset/P80/000001.jpg  \n",
            "  inflating: trainset/P80/000002.jpg  \n",
            "  inflating: trainset/P80/000003.jpg  \n",
            "  inflating: trainset/P80/000004.jpg  \n",
            "  inflating: trainset/P80/000005.jpg  \n",
            "  inflating: trainset/P80/000006.jpg  \n",
            "  inflating: trainset/P80/000007.jpg  \n",
            "  inflating: trainset/P80/000008.jpg  \n",
            "  inflating: trainset/P80/000009.jpg  \n",
            "  inflating: trainset/P80/000010.jpg  \n",
            "  inflating: trainset/P80/000011.jpg  \n",
            "  inflating: trainset/P80/000012.jpg  \n",
            "  inflating: trainset/P80/000013.jpg  \n",
            "  inflating: trainset/P80/000014.jpg  \n",
            "  inflating: trainset/P80/000015.jpg  \n",
            "  inflating: trainset/P80/000016.jpg  \n",
            "  inflating: trainset/P80/000017.jpg  \n",
            "  inflating: trainset/P80/000018.jpg  \n",
            "  inflating: trainset/P80/000019.jpg  \n",
            "  inflating: trainset/P80/000020.jpg  \n",
            "  inflating: trainset/P80/000021.jpg  \n",
            "  inflating: trainset/P80/000022.jpg  \n",
            "  inflating: trainset/P80/000023.jpg  \n",
            "  inflating: trainset/P80/000024.jpg  \n",
            "  inflating: trainset/P80/000025.jpg  \n",
            "  inflating: trainset/P80/000026.jpg  \n",
            "  inflating: trainset/P80/000027.jpg  \n",
            "  inflating: trainset/P80/000028.jpg  \n",
            "  inflating: trainset/P80/000029.jpg  \n",
            "  inflating: trainset/P80/000030.jpg  \n",
            "  inflating: trainset/P80/000031.jpg  \n",
            "  inflating: trainset/P80/000032.jpg  \n",
            "  inflating: trainset/P80/000033.jpg  \n",
            "  inflating: trainset/P80/000034.jpg  \n",
            "  inflating: trainset/P80/000035.jpg  \n",
            "  inflating: trainset/P80/000036.jpg  \n",
            "  inflating: trainset/P80/000037.jpg  \n",
            "  inflating: trainset/P80/000038.jpg  \n",
            "  inflating: trainset/P80/000039.jpg  \n",
            "  inflating: trainset/P80/000040.jpg  \n",
            "  inflating: trainset/P80/000041.jpg  \n",
            "  inflating: trainset/P80/000042.jpg  \n",
            "  inflating: trainset/P80/000043.jpg  \n",
            "  inflating: trainset/P80/000044.jpg  \n",
            "  inflating: trainset/P80/000045.jpg  \n",
            "  inflating: trainset/P80/000046.jpg  \n",
            "  inflating: trainset/P80/000047.jpg  \n",
            "  inflating: trainset/P80/000048.jpg  \n",
            "  inflating: trainset/P80/000049.jpg  \n",
            "  inflating: trainset/P80/000050.jpg  \n",
            "  inflating: trainset/P80/000051.jpg  \n",
            "  inflating: trainset/P80/000052.jpg  \n",
            "  inflating: trainset/P80/000053.jpg  \n",
            "  inflating: trainset/P80/000054.jpg  \n",
            "  inflating: trainset/P80/000055.jpg  \n",
            "  inflating: trainset/P82/000000.jpg  \n",
            "  inflating: trainset/P82/000001.jpg  \n",
            "  inflating: trainset/P82/000002.jpg  \n",
            "  inflating: trainset/P82/000003.jpg  \n",
            "  inflating: trainset/P82/000004.jpg  \n",
            "  inflating: trainset/P82/000005.jpg  \n",
            "  inflating: trainset/P82/000006.jpg  \n",
            "  inflating: trainset/P82/000007.jpg  \n",
            "  inflating: trainset/P82/000008.jpg  \n",
            "  inflating: trainset/P82/000009.jpg  \n",
            "  inflating: trainset/P82/000010.jpg  \n",
            "  inflating: trainset/P82/000011.jpg  \n",
            "  inflating: trainset/P82/000012.jpg  \n",
            "  inflating: trainset/P82/000013.jpg  \n",
            "  inflating: trainset/P82/000014.jpg  \n",
            "  inflating: trainset/P82/000015.jpg  \n",
            "  inflating: trainset/P82/000016.jpg  \n",
            "  inflating: trainset/P82/000017.jpg  \n",
            "  inflating: trainset/P82/000018.jpg  \n",
            "  inflating: trainset/P82/000019.jpg  \n",
            "  inflating: trainset/P82/000020.jpg  \n",
            "  inflating: trainset/P82/000021.jpg  \n",
            "  inflating: trainset/P82/000022.jpg  \n",
            "  inflating: trainset/P82/000023.jpg  \n",
            "  inflating: trainset/P82/000024.jpg  \n",
            "  inflating: trainset/P82/000025.jpg  \n",
            "  inflating: trainset/P82/000026.jpg  \n",
            "  inflating: trainset/P82/000027.jpg  \n",
            "  inflating: trainset/P82/000028.jpg  \n",
            "  inflating: trainset/P82/000029.jpg  \n",
            "  inflating: trainset/P82/000030.jpg  \n",
            "  inflating: trainset/P82/000031.jpg  \n",
            "  inflating: trainset/P82/000032.jpg  \n",
            "  inflating: trainset/P82/000033.jpg  \n",
            "  inflating: trainset/P82/000034.jpg  \n",
            "  inflating: trainset/P82/000035.jpg  \n",
            "  inflating: trainset/P82/000036.jpg  \n",
            "  inflating: trainset/P82/000037.jpg  \n",
            "  inflating: trainset/P82/000038.jpg  \n",
            "  inflating: trainset/P82/000039.jpg  \n",
            "  inflating: trainset/P82/000040.jpg  \n",
            "  inflating: trainset/P82/000041.jpg  \n",
            "  inflating: trainset/P82/000042.jpg  \n",
            "  inflating: trainset/P82/000043.jpg  \n",
            "  inflating: trainset/P82/000044.jpg  \n",
            "  inflating: trainset/P82/000045.jpg  \n",
            "  inflating: trainset/P82/000046.jpg  \n",
            "  inflating: trainset/P82/000047.jpg  \n",
            "  inflating: trainset/P82/000048.jpg  \n",
            "  inflating: trainset/P82/000049.jpg  \n",
            "  inflating: trainset/P82/000050.jpg  \n",
            "  inflating: trainset/P82/000051.jpg  \n",
            "  inflating: trainset/P82/000052.jpg  \n",
            "  inflating: trainset/P82/000053.jpg  \n",
            "  inflating: trainset/P83/000000.jpg  \n",
            "  inflating: trainset/P83/000001.jpg  \n",
            "  inflating: trainset/P83/000002.jpg  \n",
            "  inflating: trainset/P83/000003.jpg  \n",
            "  inflating: trainset/P83/000004.jpg  \n",
            "  inflating: trainset/P83/000005.jpg  \n",
            "  inflating: trainset/P83/000006.jpg  \n",
            "  inflating: trainset/P83/000007.jpg  \n",
            "  inflating: trainset/P83/000008.jpg  \n",
            "  inflating: trainset/P83/000009.jpg  \n",
            "  inflating: trainset/P83/000010.jpg  \n",
            "  inflating: trainset/P83/000011.jpg  \n",
            "  inflating: trainset/P83/000012.jpg  \n",
            "  inflating: trainset/P83/000013.jpg  \n",
            "  inflating: trainset/P83/000014.jpg  \n",
            "  inflating: trainset/P83/000015.jpg  \n",
            "  inflating: trainset/P83/000016.jpg  \n",
            "  inflating: trainset/P83/000017.jpg  \n",
            "  inflating: trainset/P83/000018.jpg  \n",
            "  inflating: trainset/P83/000019.jpg  \n",
            "  inflating: trainset/P83/000020.jpg  \n",
            "  inflating: trainset/P83/000021.jpg  \n",
            "  inflating: trainset/P83/000022.jpg  \n",
            "  inflating: trainset/P83/000023.jpg  \n",
            "  inflating: trainset/P83/000024.jpg  \n",
            "  inflating: trainset/P83/000025.jpg  \n",
            "  inflating: trainset/P83/000026.jpg  \n",
            "  inflating: trainset/P83/000027.jpg  \n",
            "  inflating: trainset/P83/000028.jpg  \n",
            "  inflating: trainset/P83/000029.jpg  \n",
            "  inflating: trainset/P83/000030.jpg  \n",
            "  inflating: trainset/P83/000031.jpg  \n",
            "  inflating: trainset/P83/000032.jpg  \n",
            "  inflating: trainset/P83/000033.jpg  \n",
            "  inflating: trainset/P83/000034.jpg  \n",
            "  inflating: trainset/P83/000035.jpg  \n",
            "  inflating: trainset/P83/000036.jpg  \n",
            "  inflating: trainset/P83/000037.jpg  \n",
            "  inflating: trainset/P83/000038.jpg  \n",
            "  inflating: trainset/P83/000039.jpg  \n",
            "  inflating: trainset/P83/000040.jpg  \n",
            "  inflating: trainset/P83/000041.jpg  \n",
            "  inflating: trainset/P83/000042.jpg  \n",
            "  inflating: trainset/P83/000043.jpg  \n",
            "  inflating: trainset/P83/000044.jpg  \n",
            "  inflating: trainset/P83/000045.jpg  \n",
            "  inflating: trainset/P83/000046.jpg  \n",
            "  inflating: trainset/P83/000047.jpg  \n",
            "  inflating: trainset/P83/000048.jpg  \n",
            "  inflating: trainset/P83/000049.jpg  \n",
            "  inflating: trainset/P83/000050.jpg  \n",
            "  inflating: trainset/P83/000051.jpg  \n",
            "  inflating: trainset/P83/000052.jpg  \n",
            "  inflating: trainset/P83/000053.jpg  \n",
            "  inflating: trainset/P83/000054.jpg  \n",
            "  inflating: trainset/P83/000055.jpg  \n",
            "  inflating: trainset/P83/000056.jpg  \n",
            "  inflating: trainset/P83/000057.jpg  \n",
            "  inflating: trainset/P83/000058.jpg  \n",
            "  inflating: trainset/P83/000059.jpg  \n",
            "  inflating: trainset/P83/000060.jpg  \n",
            "  inflating: trainset/P83/000061.jpg  \n",
            "  inflating: trainset/P83/000062.jpg  \n",
            "  inflating: trainset/P83/000063.jpg  \n",
            "  inflating: trainset/P83/000064.jpg  \n",
            "  inflating: trainset/P83/000065.jpg  \n",
            "  inflating: trainset/P83/000066.jpg  \n",
            "  inflating: trainset/P83/000067.jpg  \n",
            "  inflating: trainset/P83/000068.jpg  \n",
            "  inflating: trainset/P83/000069.jpg  \n",
            "  inflating: trainset/P83/000070.jpg  \n",
            "  inflating: trainset/P83/000071.jpg  \n",
            "  inflating: trainset/P83/000072.jpg  \n",
            "  inflating: trainset/P83/000073.jpg  \n",
            "  inflating: trainset/P83/000074.jpg  \n",
            "  inflating: trainset/P83/000075.jpg  \n",
            "  inflating: trainset/P83/000076.jpg  \n",
            "  inflating: trainset/P83/000077.jpg  \n",
            "  inflating: trainset/P83/000078.jpg  \n",
            "  inflating: trainset/P83/000079.jpg  \n",
            "  inflating: trainset/P83/000080.jpg  \n",
            "  inflating: trainset/P83/000081.jpg  \n",
            "  inflating: trainset/P83/000082.jpg  \n",
            "  inflating: trainset/P83/000083.jpg  \n",
            "  inflating: trainset/P83/000084.jpg  \n",
            "  inflating: trainset/P83/000085.jpg  \n",
            "  inflating: trainset/P83/000086.jpg  \n",
            "  inflating: trainset/P83/000087.jpg  \n",
            "  inflating: trainset/P83/000088.jpg  \n",
            "  inflating: trainset/P83/000089.jpg  \n",
            "  inflating: trainset/P83/000090.jpg  \n",
            "  inflating: trainset/P83/000091.jpg  \n",
            "  inflating: trainset/P83/000092.jpg  \n",
            "  inflating: trainset/P83/000093.jpg  \n",
            "  inflating: trainset/P83/000094.jpg  \n",
            "  inflating: trainset/P83/000095.jpg  \n",
            "  inflating: trainset/P83/000096.jpg  \n",
            "  inflating: trainset/P83/000097.jpg  \n",
            "  inflating: trainset/P83/000098.jpg  \n",
            "  inflating: trainset/P83/000099.jpg  \n",
            "  inflating: trainset/P83/000100.jpg  \n",
            "  inflating: trainset/P83/000101.jpg  \n",
            "  inflating: trainset/P83/000102.jpg  \n",
            "  inflating: trainset/P83/000103.jpg  \n",
            "  inflating: trainset/P83/000104.jpg  \n",
            "  inflating: trainset/P83/000105.jpg  \n",
            "  inflating: trainset/P83/000106.jpg  \n",
            "  inflating: trainset/P83/000107.jpg  \n",
            "  inflating: trainset/P83/000108.jpg  \n",
            "  inflating: trainset/P83/000109.jpg  \n",
            "  inflating: trainset/P83/000110.jpg  \n",
            "  inflating: trainset/P83/000111.jpg  \n",
            "  inflating: trainset/P83/000112.jpg  \n",
            "  inflating: trainset/P84/000000.jpg  \n",
            "  inflating: trainset/P84/000001.jpg  \n",
            "  inflating: trainset/P84/000002.jpg  \n",
            "  inflating: trainset/P84/000003.jpg  \n",
            "  inflating: trainset/P84/000004.jpg  \n",
            "  inflating: trainset/P84/000005.jpg  \n",
            "  inflating: trainset/P84/000006.jpg  \n",
            "  inflating: trainset/P84/000007.jpg  \n",
            "  inflating: trainset/P84/000008.jpg  \n",
            "  inflating: trainset/P84/000009.jpg  \n",
            "  inflating: trainset/P84/000010.jpg  \n",
            "  inflating: trainset/P84/000011.jpg  \n",
            "  inflating: trainset/P84/000012.jpg  \n",
            "  inflating: trainset/P84/000013.jpg  \n",
            "  inflating: trainset/P84/000014.jpg  \n",
            "  inflating: trainset/P84/000015.jpg  \n",
            "  inflating: trainset/P84/000016.jpg  \n",
            "  inflating: trainset/P84/000017.jpg  \n",
            "  inflating: trainset/P84/000018.jpg  \n",
            "  inflating: trainset/P84/000019.jpg  \n",
            "  inflating: trainset/P84/000020.jpg  \n",
            "  inflating: trainset/P84/000021.jpg  \n",
            "  inflating: trainset/P84/000022.jpg  \n",
            "  inflating: trainset/P84/000023.jpg  \n",
            "  inflating: trainset/P84/000024.jpg  \n",
            "  inflating: trainset/P84/000025.jpg  \n",
            "  inflating: trainset/P84/000026.jpg  \n",
            "  inflating: trainset/P84/000027.jpg  \n",
            "  inflating: trainset/P84/000028.jpg  \n",
            "  inflating: trainset/P84/000029.jpg  \n",
            "  inflating: trainset/P84/000030.jpg  \n",
            "  inflating: trainset/P84/000031.jpg  \n",
            "  inflating: trainset/P84/000032.jpg  \n",
            "  inflating: trainset/P84/000033.jpg  \n",
            "  inflating: trainset/P84/000034.jpg  \n",
            "  inflating: trainset/P84/000035.jpg  \n",
            "  inflating: trainset/P84/000036.jpg  \n",
            "  inflating: trainset/P84/000037.jpg  \n",
            "  inflating: trainset/P84/000038.jpg  \n",
            "  inflating: trainset/P84/000039.jpg  \n",
            "  inflating: trainset/P84/000040.jpg  \n",
            "  inflating: trainset/P84/000041.jpg  \n",
            "  inflating: trainset/P84/000042.jpg  \n",
            "  inflating: trainset/P84/000043.jpg  \n",
            "  inflating: trainset/P84/000044.jpg  \n",
            "  inflating: trainset/P84/000045.jpg  \n",
            "  inflating: trainset/P84/000046.jpg  \n",
            "  inflating: trainset/P84/000047.jpg  \n",
            "  inflating: trainset/P84/000048.jpg  \n",
            "  inflating: trainset/P84/000049.jpg  \n",
            "  inflating: trainset/P84/000050.jpg  \n",
            "  inflating: trainset/P84/000051.jpg  \n",
            "  inflating: trainset/P84/000052.jpg  \n",
            "  inflating: trainset/P84/000053.jpg  \n",
            "  inflating: trainset/P85/000000.jpg  \n",
            "  inflating: trainset/P85/000001.jpg  \n",
            "  inflating: trainset/P85/000002.jpg  \n",
            "  inflating: trainset/P85/000003.jpg  \n",
            "  inflating: trainset/P85/000004.jpg  \n",
            "  inflating: trainset/P85/000005.jpg  \n",
            "  inflating: trainset/P85/000006.jpg  \n",
            "  inflating: trainset/P85/000007.jpg  \n",
            "  inflating: trainset/P85/000008.jpg  \n",
            "  inflating: trainset/P85/000009.jpg  \n",
            "  inflating: trainset/P85/000010.jpg  \n",
            "  inflating: trainset/P85/000011.jpg  \n",
            "  inflating: trainset/P85/000012.jpg  \n",
            "  inflating: trainset/P85/000013.jpg  \n",
            "  inflating: trainset/P85/000014.jpg  \n",
            "  inflating: trainset/P85/000015.jpg  \n",
            "  inflating: trainset/P85/000016.jpg  \n",
            "  inflating: trainset/P85/000017.jpg  \n",
            "  inflating: trainset/P85/000018.jpg  \n",
            "  inflating: trainset/P85/000019.jpg  \n",
            "  inflating: trainset/P85/000020.jpg  \n",
            "  inflating: trainset/P85/000021.jpg  \n",
            "  inflating: trainset/P85/000022.jpg  \n",
            "  inflating: trainset/P85/000023.jpg  \n",
            "  inflating: trainset/P85/000024.jpg  \n",
            "  inflating: trainset/P85/000025.jpg  \n",
            "  inflating: trainset/P85/000026.jpg  \n",
            "  inflating: trainset/P85/000027.jpg  \n",
            "  inflating: trainset/P85/000028.jpg  \n",
            "  inflating: trainset/P85/000029.jpg  \n",
            "  inflating: trainset/P85/000030.jpg  \n",
            "  inflating: trainset/P85/000031.jpg  \n",
            "  inflating: trainset/P85/000032.jpg  \n",
            "  inflating: trainset/P85/000033.jpg  \n",
            "  inflating: trainset/P85/000034.jpg  \n",
            "  inflating: trainset/P85/000035.jpg  \n",
            "  inflating: trainset/P85/000036.jpg  \n",
            "  inflating: trainset/P85/000037.jpg  \n",
            "  inflating: trainset/P85/000038.jpg  \n",
            "  inflating: trainset/P85/000039.jpg  \n",
            "  inflating: trainset/P85/000040.jpg  \n",
            "  inflating: trainset/P85/000041.jpg  \n",
            "  inflating: trainset/P85/000042.jpg  \n",
            "  inflating: trainset/P85/000043.jpg  \n",
            "  inflating: trainset/P85/000044.jpg  \n",
            "  inflating: trainset/P85/000045.jpg  \n",
            "  inflating: trainset/P85/000046.jpg  \n",
            "  inflating: trainset/P85/000047.jpg  \n",
            "  inflating: trainset/P85/000048.jpg  \n",
            "  inflating: trainset/P85/000049.jpg  \n",
            "  inflating: trainset/P85/000050.jpg  \n",
            "  inflating: trainset/P85/000051.jpg  \n",
            "  inflating: trainset/P85/000052.jpg  \n",
            "  inflating: trainset/P85/000053.jpg  \n",
            "  inflating: trainset/P85/000054.jpg  \n",
            "  inflating: trainset/P85/000055.jpg  \n",
            "  inflating: trainset/P85/000056.jpg  \n",
            "  inflating: trainset/P85/000057.jpg  \n",
            "  inflating: trainset/P85/000058.jpg  \n",
            "  inflating: trainset/P85/000059.jpg  \n",
            "  inflating: trainset/P85/000060.jpg  \n",
            "  inflating: trainset/P85/000061.jpg  \n",
            "  inflating: trainset/P85/000062.jpg  \n",
            "  inflating: trainset/P85/000063.jpg  \n",
            "  inflating: trainset/P85/000064.jpg  \n",
            "  inflating: trainset/P85/000065.jpg  \n",
            "  inflating: trainset/P85/000066.jpg  \n",
            "  inflating: trainset/P85/000067.jpg  \n",
            "  inflating: trainset/P85/000068.jpg  \n",
            "  inflating: trainset/P85/000069.jpg  \n",
            "  inflating: trainset/P85/000070.jpg  \n",
            "  inflating: trainset/P85/000071.jpg  \n",
            "  inflating: trainset/P85/000072.jpg  \n",
            "  inflating: trainset/P85/000073.jpg  \n",
            "  inflating: trainset/P85/000074.jpg  \n",
            "  inflating: trainset/P85/000075.jpg  \n",
            "  inflating: trainset/P85/000076.jpg  \n",
            "  inflating: trainset/P85/000077.jpg  \n",
            "  inflating: trainset/P85/000078.jpg  \n",
            "  inflating: trainset/P85/000079.jpg  \n",
            "  inflating: trainset/P85/000080.jpg  \n",
            "  inflating: trainset/P85/000081.jpg  \n",
            "  inflating: trainset/P85/000082.jpg  \n",
            "  inflating: trainset/P85/000083.jpg  \n",
            "  inflating: trainset/P85/000084.jpg  \n",
            "  inflating: trainset/P85/000085.jpg  \n",
            "  inflating: trainset/P85/000086.jpg  \n",
            "  inflating: trainset/P85/000087.jpg  \n",
            "  inflating: trainset/P85/000088.jpg  \n",
            "  inflating: trainset/P85/000089.jpg  \n",
            "  inflating: trainset/P85/000090.jpg  \n",
            "  inflating: trainset/P85/000091.jpg  \n",
            "  inflating: trainset/P85/000092.jpg  \n",
            "  inflating: trainset/P85/000093.jpg  \n",
            "  inflating: trainset/P85/000094.jpg  \n",
            "  inflating: trainset/P85/000095.jpg  \n",
            "  inflating: trainset/P85/000096.jpg  \n",
            "  inflating: trainset/P85/000097.jpg  \n",
            "  inflating: trainset/P85/000098.jpg  \n",
            "  inflating: trainset/P85/000099.jpg  \n",
            "  inflating: trainset/P85/000100.jpg  \n",
            "  inflating: trainset/P85/000101.jpg  \n",
            "  inflating: trainset/P85/000102.jpg  \n",
            "  inflating: trainset/P85/000103.jpg  \n",
            "  inflating: trainset/P85/000104.jpg  \n",
            "  inflating: trainset/P85/000105.jpg  \n",
            "  inflating: trainset/P85/000106.jpg  \n",
            "  inflating: trainset/P85/000107.jpg  \n",
            "  inflating: trainset/P85/000108.jpg  \n",
            "  inflating: trainset/P85/000109.jpg  \n",
            "  inflating: trainset/P85/000110.jpg  \n",
            "  inflating: trainset/P85/000111.jpg  \n",
            "  inflating: trainset/P85/000112.jpg  \n",
            "  inflating: trainset/P85/000113.jpg  \n",
            "  inflating: trainset/P85/000114.jpg  \n",
            "  inflating: trainset/P85/000115.jpg  \n",
            "  inflating: trainset/P85/000116.jpg  \n",
            "  inflating: trainset/P85/000117.jpg  \n",
            "  inflating: trainset/P85/000118.jpg  \n",
            "  inflating: trainset/P85/000119.jpg  \n",
            "  inflating: trainset/P85/000120.jpg  \n",
            "  inflating: trainset/P85/000121.jpg  \n",
            "  inflating: trainset/P85/000122.jpg  \n",
            "  inflating: trainset/P85/000123.jpg  \n",
            "  inflating: trainset/P85/000124.jpg  \n",
            "  inflating: trainset/P85/000125.jpg  \n",
            "  inflating: trainset/P85/000126.jpg  \n",
            "  inflating: trainset/P85/000127.jpg  \n",
            "  inflating: trainset/P85/000128.jpg  \n",
            "  inflating: trainset/P85/000129.jpg  \n",
            "  inflating: trainset/P85/000130.jpg  \n",
            "  inflating: trainset/P85/000131.jpg  \n",
            "  inflating: trainset/P85/000132.jpg  \n",
            "  inflating: trainset/P85/000133.jpg  \n",
            "  inflating: trainset/P85/000134.jpg  \n",
            "  inflating: trainset/P85/000135.jpg  \n",
            "  inflating: trainset/P85/000136.jpg  \n",
            "  inflating: trainset/P85/000137.jpg  \n",
            "  inflating: trainset/P85/000138.jpg  \n",
            "  inflating: trainset/P85/000139.jpg  \n",
            "  inflating: trainset/P85/000140.jpg  \n",
            "  inflating: trainset/P85/000141.jpg  \n",
            "  inflating: trainset/P85/000142.jpg  \n",
            "  inflating: trainset/P85/000143.jpg  \n",
            "  inflating: trainset/P85/000144.jpg  \n",
            "  inflating: trainset/P85/000145.jpg  \n",
            "  inflating: trainset/P85/000146.jpg  \n",
            "  inflating: trainset/P85/000147.jpg  \n",
            "  inflating: trainset/P85/000148.jpg  \n",
            "  inflating: trainset/P85/000149.jpg  \n",
            "  inflating: trainset/P85/000150.jpg  \n",
            "  inflating: trainset/P85/000151.jpg  \n",
            "  inflating: trainset/P85/000152.jpg  \n",
            "  inflating: trainset/P85/000153.jpg  \n",
            "  inflating: trainset/P85/000154.jpg  \n",
            "  inflating: trainset/P85/000155.jpg  \n",
            "  inflating: trainset/P85/000156.jpg  \n",
            "  inflating: trainset/P85/000157.jpg  \n",
            "  inflating: trainset/P85/000158.jpg  \n",
            "  inflating: trainset/P85/000159.jpg  \n",
            "  inflating: trainset/P85/000160.jpg  \n",
            "  inflating: trainset/P85/000161.jpg  \n",
            "  inflating: trainset/P85/000162.jpg  \n",
            "  inflating: trainset/P85/000163.jpg  \n",
            "  inflating: trainset/P85/000164.jpg  \n",
            "  inflating: trainset/P85/000165.jpg  \n",
            "  inflating: trainset/P85/000166.jpg  \n",
            "  inflating: trainset/P85/000167.jpg  \n",
            "  inflating: trainset/P85/000168.jpg  \n",
            "  inflating: trainset/P85/000169.jpg  \n",
            "  inflating: trainset/P85/000170.jpg  \n",
            "  inflating: trainset/P85/000171.jpg  \n",
            "  inflating: trainset/P85/000172.jpg  \n",
            "  inflating: trainset/P85/000173.jpg  \n",
            "  inflating: trainset/P85/000174.jpg  \n",
            "  inflating: trainset/P85/000175.jpg  \n",
            "  inflating: trainset/P85/000176.jpg  \n",
            "  inflating: trainset/P85/000177.jpg  \n",
            "  inflating: trainset/P85/000178.jpg  \n",
            "  inflating: trainset/P85/000179.jpg  \n",
            "  inflating: trainset/P85/000180.jpg  \n",
            "  inflating: trainset/P85/000181.jpg  \n",
            "  inflating: trainset/P85/000182.jpg  \n",
            "  inflating: trainset/P87/000000.jpg  \n",
            "  inflating: trainset/P87/000001.jpg  \n",
            "  inflating: trainset/P87/000002.jpg  \n",
            "  inflating: trainset/P87/000003.jpg  \n",
            "  inflating: trainset/P87/000004.jpg  \n",
            "  inflating: trainset/P87/000005.jpg  \n",
            "  inflating: trainset/P87/000006.jpg  \n",
            "  inflating: trainset/P87/000007.jpg  \n",
            "  inflating: trainset/P87/000008.jpg  \n",
            "  inflating: trainset/P87/000009.jpg  \n",
            "  inflating: trainset/P87/000010.jpg  \n",
            "  inflating: trainset/P87/000011.jpg  \n",
            "  inflating: trainset/P87/000012.jpg  \n",
            "  inflating: trainset/P87/000013.jpg  \n",
            "  inflating: trainset/P87/000014.jpg  \n",
            "  inflating: trainset/P87/000015.jpg  \n",
            "  inflating: trainset/P87/000016.jpg  \n",
            "  inflating: trainset/P87/000017.jpg  \n",
            "  inflating: trainset/P87/000018.jpg  \n",
            "  inflating: trainset/P87/000019.jpg  \n",
            "  inflating: trainset/P87/000020.jpg  \n",
            "  inflating: trainset/P87/000021.jpg  \n",
            "  inflating: trainset/P87/000022.jpg  \n",
            "  inflating: trainset/P87/000023.jpg  \n",
            "  inflating: trainset/P87/000024.jpg  \n",
            "  inflating: trainset/P87/000025.jpg  \n",
            "  inflating: trainset/P87/000026.jpg  \n",
            "  inflating: trainset/P87/000027.jpg  \n",
            "  inflating: trainset/P87/000028.jpg  \n",
            "  inflating: trainset/P87/000029.jpg  \n",
            "  inflating: trainset/P87/000030.jpg  \n",
            "  inflating: trainset/P87/000031.jpg  \n",
            "  inflating: trainset/P87/000032.jpg  \n",
            "  inflating: trainset/P87/000033.jpg  \n",
            "  inflating: trainset/P87/000034.jpg  \n",
            "  inflating: trainset/P87/000035.jpg  \n",
            "  inflating: trainset/P87/000036.jpg  \n",
            "  inflating: trainset/P87/000037.jpg  \n",
            "  inflating: trainset/P87/000038.jpg  \n",
            "  inflating: trainset/P87/000039.jpg  \n",
            "  inflating: trainset/P87/000040.jpg  \n",
            "  inflating: trainset/P87/000041.jpg  \n",
            "  inflating: trainset/P87/000042.jpg  \n",
            "  inflating: trainset/P87/000043.jpg  \n",
            "  inflating: trainset/P87/000044.jpg  \n",
            "  inflating: trainset/P87/000045.jpg  \n",
            "  inflating: trainset/P87/000046.jpg  \n",
            "  inflating: trainset/P87/000047.jpg  \n",
            "  inflating: trainset/P87/000048.jpg  \n",
            "  inflating: trainset/P87/000049.jpg  \n",
            "  inflating: trainset/P87/000050.jpg  \n",
            "  inflating: trainset/P87/000051.jpg  \n",
            "  inflating: trainset/P87/000052.jpg  \n",
            "  inflating: trainset/P87/000053.jpg  \n",
            "  inflating: trainset/P87/000054.jpg  \n",
            "  inflating: trainset/P87/000055.jpg  \n",
            "  inflating: trainset/P87/000056.jpg  \n",
            "  inflating: trainset/P88/000000.jpg  \n",
            "  inflating: trainset/P88/000001.jpg  \n",
            "  inflating: trainset/P88/000002.jpg  \n",
            "  inflating: trainset/P88/000003.jpg  \n",
            "  inflating: trainset/P88/000004.jpg  \n",
            "  inflating: trainset/P88/000005.jpg  \n",
            "  inflating: trainset/P88/000006.jpg  \n",
            "  inflating: trainset/P88/000007.jpg  \n",
            "  inflating: trainset/P88/000008.jpg  \n",
            "  inflating: trainset/P88/000009.jpg  \n",
            "  inflating: trainset/P88/000010.jpg  \n",
            "  inflating: trainset/P88/000011.jpg  \n",
            "  inflating: trainset/P88/000012.jpg  \n",
            "  inflating: trainset/P88/000013.jpg  \n",
            "  inflating: trainset/P88/000014.jpg  \n",
            "  inflating: trainset/P88/000015.jpg  \n",
            "  inflating: trainset/P88/000016.jpg  \n",
            "  inflating: trainset/P88/000017.jpg  \n",
            "  inflating: trainset/P88/000018.jpg  \n",
            "  inflating: trainset/P88/000019.jpg  \n",
            "  inflating: trainset/P88/000020.jpg  \n",
            "  inflating: trainset/P88/000021.jpg  \n",
            "  inflating: trainset/P88/000022.jpg  \n",
            "  inflating: trainset/P88/000023.jpg  \n",
            "  inflating: trainset/P88/000024.jpg  \n",
            "  inflating: trainset/P88/000025.jpg  \n",
            "  inflating: trainset/P88/000026.jpg  \n",
            "  inflating: trainset/P88/000027.jpg  \n",
            "  inflating: trainset/P88/000028.jpg  \n",
            "  inflating: trainset/P88/000029.jpg  \n",
            "  inflating: trainset/P88/000030.jpg  \n",
            "  inflating: trainset/P88/000031.jpg  \n",
            "  inflating: trainset/P88/000032.jpg  \n",
            "  inflating: trainset/P88/000033.jpg  \n",
            "  inflating: trainset/P88/000034.jpg  \n",
            "  inflating: trainset/P88/000035.jpg  \n",
            "  inflating: trainset/P88/000036.jpg  \n",
            "  inflating: trainset/P88/000037.jpg  \n",
            "  inflating: trainset/P88/000038.jpg  \n",
            "  inflating: trainset/P88/000039.jpg  \n",
            "  inflating: trainset/P88/000040.jpg  \n",
            "  inflating: trainset/P88/000041.jpg  \n",
            "  inflating: trainset/P88/000042.jpg  \n",
            "  inflating: trainset/P88/000043.jpg  \n",
            "  inflating: trainset/P88/000044.jpg  \n",
            "  inflating: trainset/P88/000045.jpg  \n",
            "  inflating: trainset/P88/000046.jpg  \n",
            "  inflating: trainset/P88/000047.jpg  \n",
            "  inflating: trainset/P88/000048.jpg  \n",
            "  inflating: trainset/P88/000049.jpg  \n",
            "  inflating: trainset/P88/000050.jpg  \n",
            "  inflating: trainset/P88/000051.jpg  \n",
            "  inflating: trainset/P88/000052.jpg  \n",
            "  inflating: trainset/P88/000053.jpg  \n",
            "  inflating: trainset/P88/000054.jpg  \n",
            "  inflating: trainset/P88/000055.jpg  \n",
            "  inflating: trainset/P88/000056.jpg  \n",
            "  inflating: trainset/P88/000057.jpg  \n",
            "  inflating: trainset/P88/000058.jpg  \n",
            "  inflating: trainset/P88/000059.jpg  \n",
            "  inflating: trainset/P88/000060.jpg  \n",
            "  inflating: trainset/P88/000061.jpg  \n",
            "  inflating: trainset/P88/000062.jpg  \n",
            "  inflating: trainset/P88/000063.jpg  \n",
            "  inflating: trainset/P88/000064.jpg  \n",
            "  inflating: trainset/P89/000000.jpg  \n",
            "  inflating: trainset/P89/000001.jpg  \n",
            "  inflating: trainset/P89/000002.jpg  \n",
            "  inflating: trainset/P89/000003.jpg  \n",
            "  inflating: trainset/P89/000004.jpg  \n",
            "  inflating: trainset/P89/000005.jpg  \n",
            "  inflating: trainset/P89/000006.jpg  \n",
            "  inflating: trainset/P89/000007.jpg  \n",
            "  inflating: trainset/P89/000008.jpg  \n",
            "  inflating: trainset/P89/000009.jpg  \n",
            "  inflating: trainset/P89/000010.jpg  \n",
            "  inflating: trainset/P89/000011.jpg  \n",
            "  inflating: trainset/P89/000012.jpg  \n",
            "  inflating: trainset/P89/000013.jpg  \n",
            "  inflating: trainset/P89/000014.jpg  \n",
            "  inflating: trainset/P89/000015.jpg  \n",
            "  inflating: trainset/P89/000016.jpg  \n",
            "  inflating: trainset/P89/000017.jpg  \n",
            "  inflating: trainset/P89/000018.jpg  \n",
            "  inflating: trainset/P89/000019.jpg  \n",
            "  inflating: trainset/P89/000020.jpg  \n",
            "  inflating: trainset/P89/000021.jpg  \n",
            "  inflating: trainset/P89/000022.jpg  \n",
            "  inflating: trainset/P89/000023.jpg  \n",
            "  inflating: trainset/P89/000024.jpg  \n",
            "  inflating: trainset/P89/000025.jpg  \n",
            "  inflating: trainset/P89/000026.jpg  \n",
            "  inflating: trainset/P89/000027.jpg  \n",
            "  inflating: trainset/P89/000028.jpg  \n",
            "  inflating: trainset/P89/000029.jpg  \n",
            "  inflating: trainset/P89/000030.jpg  \n",
            "  inflating: trainset/P89/000031.jpg  \n",
            "  inflating: trainset/P89/000032.jpg  \n",
            "  inflating: trainset/P89/000033.jpg  \n",
            "  inflating: trainset/P89/000034.jpg  \n",
            "  inflating: trainset/P89/000035.jpg  \n",
            "  inflating: trainset/P89/000036.jpg  \n",
            "  inflating: trainset/P89/000037.jpg  \n",
            "  inflating: trainset/P89/000038.jpg  \n",
            "  inflating: trainset/P89/000039.jpg  \n",
            "  inflating: trainset/P89/000040.jpg  \n",
            "  inflating: trainset/P89/000041.jpg  \n",
            "  inflating: trainset/P89/000042.jpg  \n",
            "  inflating: trainset/P89/000043.jpg  \n",
            "  inflating: trainset/P89/000044.jpg  \n",
            "  inflating: trainset/P89/000045.jpg  \n",
            "  inflating: trainset/P89/000046.jpg  \n",
            "  inflating: trainset/P89/000047.jpg  \n",
            "  inflating: trainset/P89/000048.jpg  \n",
            "  inflating: trainset/P89/000049.jpg  \n",
            "  inflating: trainset/P89/000050.jpg  \n",
            "  inflating: trainset/P89/000051.jpg  \n",
            "  inflating: trainset/P90/000000.jpg  \n",
            "  inflating: trainset/P90/000001.jpg  \n",
            "  inflating: trainset/P90/000002.jpg  \n",
            "  inflating: trainset/P90/000003.jpg  \n",
            "  inflating: trainset/P90/000004.jpg  \n",
            "  inflating: trainset/P90/000005.jpg  \n",
            "  inflating: trainset/P90/000006.jpg  \n",
            "  inflating: trainset/P90/000007.jpg  \n",
            "  inflating: trainset/P90/000008.jpg  \n",
            "  inflating: trainset/P90/000009.jpg  \n",
            "  inflating: trainset/P90/000010.jpg  \n",
            "  inflating: trainset/P90/000011.jpg  \n",
            "  inflating: trainset/P90/000012.jpg  \n",
            "  inflating: trainset/P90/000013.jpg  \n",
            "  inflating: trainset/P90/000014.jpg  \n",
            "  inflating: trainset/P90/000015.jpg  \n",
            "  inflating: trainset/P90/000016.jpg  \n",
            "  inflating: trainset/P90/000017.jpg  \n",
            "  inflating: trainset/P90/000018.jpg  \n",
            "  inflating: trainset/P90/000019.jpg  \n",
            "  inflating: trainset/P90/000020.jpg  \n",
            "  inflating: trainset/P90/000021.jpg  \n",
            "  inflating: trainset/P90/000022.jpg  \n",
            "  inflating: trainset/P90/000023.jpg  \n",
            "  inflating: trainset/P90/000024.jpg  \n",
            "  inflating: trainset/P90/000025.jpg  \n",
            "  inflating: trainset/P90/000026.jpg  \n",
            "  inflating: trainset/P90/000027.jpg  \n",
            "  inflating: trainset/P90/000028.jpg  \n",
            "  inflating: trainset/P90/000029.jpg  \n",
            "  inflating: trainset/P90/000030.jpg  \n",
            "  inflating: trainset/P90/000031.jpg  \n",
            "  inflating: trainset/P90/000032.jpg  \n",
            "  inflating: trainset/P90/000033.jpg  \n",
            "  inflating: trainset/P90/000034.jpg  \n",
            "  inflating: trainset/P90/000035.jpg  \n",
            "  inflating: trainset/P90/000036.jpg  \n",
            "  inflating: trainset/P90/000037.jpg  \n",
            "  inflating: trainset/P90/000038.jpg  \n",
            "  inflating: trainset/P90/000039.jpg  \n",
            "  inflating: trainset/P90/000040.jpg  \n",
            "  inflating: trainset/P90/000041.jpg  \n",
            "  inflating: trainset/P90/000042.jpg  \n",
            "  inflating: trainset/P90/000043.jpg  \n",
            "  inflating: trainset/P90/000044.jpg  \n",
            "  inflating: trainset/P90/000045.jpg  \n",
            "  inflating: trainset/P90/000046.jpg  \n",
            "  inflating: trainset/P90/000047.jpg  \n",
            "  inflating: trainset/P90/000048.jpg  \n",
            "  inflating: trainset/P90/000049.jpg  \n",
            "  inflating: trainset/P90/000050.jpg  \n",
            "  inflating: trainset/P90/000051.jpg  \n",
            "  inflating: trainset/P90/000052.jpg  \n",
            "  inflating: trainset/P90/000053.jpg  \n",
            "  inflating: trainset/P90/000054.jpg  \n",
            "  inflating: trainset/P90/000055.jpg  \n",
            "  inflating: trainset/P90/000056.jpg  \n",
            "  inflating: trainset/P90/000057.jpg  \n",
            "  inflating: trainset/P90/000058.jpg  \n",
            "  inflating: trainset/P90/000059.jpg  \n",
            "  inflating: trainset/P90/000060.jpg  \n",
            "  inflating: trainset/P90/000061.jpg  \n",
            "  inflating: trainset/P90/000062.jpg  \n",
            "  inflating: trainset/P90/000063.jpg  \n",
            "  inflating: trainset/P90/000064.jpg  \n",
            "  inflating: trainset/P90/000065.jpg  \n",
            "  inflating: trainset/P90/000066.jpg  \n",
            "  inflating: trainset/P90/000067.jpg  \n",
            "  inflating: trainset/P90/000068.jpg  \n",
            "  inflating: trainset/P90/000069.jpg  \n",
            "  inflating: trainset/P90/000070.jpg  \n",
            "  inflating: trainset/P90/000071.jpg  \n",
            "  inflating: trainset/P90/000072.jpg  \n",
            "  inflating: trainset/P90/000073.jpg  \n",
            "  inflating: trainset/P90/000074.jpg  \n",
            "  inflating: trainset/P90/000075.jpg  \n",
            "  inflating: trainset/P90/000076.jpg  \n",
            "  inflating: trainset/P90/000077.jpg  \n",
            "  inflating: trainset/P90/000078.jpg  \n",
            "  inflating: trainset/P90/000079.jpg  \n",
            "  inflating: trainset/P90/000080.jpg  \n",
            "  inflating: trainset/P90/000081.jpg  \n",
            "  inflating: trainset/P90/000082.jpg  \n",
            "  inflating: trainset/P90/000083.jpg  \n",
            "  inflating: trainset/P90/000084.jpg  \n",
            "  inflating: trainset/P90/000085.jpg  \n",
            "  inflating: trainset/P90/000086.jpg  \n",
            "  inflating: trainset/P90/000087.jpg  \n",
            "  inflating: trainset/P90/000088.jpg  \n",
            "  inflating: trainset/P90/000089.jpg  \n",
            "  inflating: trainset/P90/000090.jpg  \n",
            "  inflating: trainset/P90/000091.jpg  \n",
            "  inflating: trainset/P90/000092.jpg  \n",
            "  inflating: trainset/P90/000093.jpg  \n",
            "  inflating: trainset/P90/000094.jpg  \n",
            "  inflating: trainset/P90/000095.jpg  \n",
            "  inflating: trainset/P90/000096.jpg  \n",
            "  inflating: trainset/P90/000097.jpg  \n",
            "  inflating: trainset/P90/000098.jpg  \n",
            "  inflating: trainset/P90/000099.jpg  \n",
            "  inflating: trainset/P90/000100.jpg  \n",
            "  inflating: trainset/P90/000101.jpg  \n",
            "  inflating: trainset/P90/000102.jpg  \n",
            "  inflating: trainset/P90/000103.jpg  \n",
            "  inflating: trainset/P90/000104.jpg  \n",
            "  inflating: trainset/P90/000105.jpg  \n",
            "  inflating: trainset/P90/000106.jpg  \n",
            "  inflating: trainset/P90/000107.jpg  \n",
            "  inflating: trainset/P90/000108.jpg  \n",
            "  inflating: trainset/P90/000109.jpg  \n",
            "  inflating: trainset/P90/000110.jpg  \n",
            "  inflating: trainset/P90/000111.jpg  \n",
            "  inflating: trainset/P90/000112.jpg  \n",
            "  inflating: trainset/P90/000113.jpg  \n",
            "  inflating: trainset/P90/000114.jpg  \n",
            "  inflating: trainset/P90/000115.jpg  \n",
            "  inflating: trainset/P90/000116.jpg  \n",
            "  inflating: trainset/P90/000117.jpg  \n",
            "  inflating: trainset/P90/000118.jpg  \n",
            "  inflating: trainset/P90/000119.jpg  \n",
            "  inflating: trainset/P90/000120.jpg  \n",
            "  inflating: trainset/P90/000121.jpg  \n",
            "  inflating: trainset/P90/000122.jpg  \n",
            "  inflating: trainset/P90/000123.jpg  \n",
            "  inflating: trainset/P90/000124.jpg  \n",
            "  inflating: trainset/P90/000125.jpg  \n",
            "  inflating: trainset/P90/000126.jpg  \n",
            "  inflating: trainset/P90/000127.jpg  \n",
            "  inflating: trainset/P90/000128.jpg  \n",
            "  inflating: trainset/P90/000129.jpg  \n",
            "  inflating: trainset/P90/000130.jpg  \n",
            "  inflating: trainset/P90/000131.jpg  \n",
            "  inflating: trainset/P90/000132.jpg  \n",
            "  inflating: trainset/P90/000133.jpg  \n",
            "  inflating: trainset/P90/000134.jpg  \n",
            "  inflating: trainset/P90/000135.jpg  \n",
            "  inflating: trainset/P90/000136.jpg  \n",
            "  inflating: trainset/P90/000137.jpg  \n",
            "  inflating: trainset/P90/000138.jpg  \n",
            "  inflating: trainset/P90/000139.jpg  \n",
            "  inflating: trainset/P90/000140.jpg  \n",
            "  inflating: trainset/P90/000141.jpg  \n",
            "  inflating: trainset/P90/000142.jpg  \n",
            "  inflating: trainset/P90/000143.jpg  \n",
            "  inflating: trainset/P90/000144.jpg  \n",
            "  inflating: trainset/P90/000145.jpg  \n",
            "  inflating: trainset/P90/000146.jpg  \n",
            "  inflating: trainset/P90/000147.jpg  \n",
            "  inflating: trainset/P90/000148.jpg  \n",
            "  inflating: trainset/P90/000149.jpg  \n",
            "  inflating: trainset/P90/000150.jpg  \n",
            "  inflating: trainset/P90/000151.jpg  \n",
            "  inflating: trainset/P90/000152.jpg  \n",
            "  inflating: trainset/P90/000153.jpg  \n",
            "  inflating: trainset/P90/000154.jpg  \n",
            "  inflating: trainset/P90/000155.jpg  \n",
            "  inflating: trainset/P90/000156.jpg  \n",
            "  inflating: trainset/P90/000157.jpg  \n",
            "  inflating: trainset/P90/000158.jpg  \n",
            "  inflating: trainset/P90/000159.jpg  \n",
            "  inflating: trainset/P90/000160.jpg  \n",
            "  inflating: trainset/P90/000161.jpg  \n",
            "  inflating: trainset/P90/000162.jpg  \n",
            "  inflating: trainset/P91/000000.jpg  \n",
            "  inflating: trainset/P91/000001.jpg  \n",
            "  inflating: trainset/P91/000002.jpg  \n",
            "  inflating: trainset/P91/000003.jpg  \n",
            "  inflating: trainset/P91/000004.jpg  \n",
            "  inflating: trainset/P91/000005.jpg  \n",
            "  inflating: trainset/P91/000006.jpg  \n",
            "  inflating: trainset/P91/000007.jpg  \n",
            "  inflating: trainset/P91/000008.jpg  \n",
            "  inflating: trainset/P91/000009.jpg  \n",
            "  inflating: trainset/P91/000010.jpg  \n",
            "  inflating: trainset/P91/000011.jpg  \n",
            "  inflating: trainset/P91/000012.jpg  \n",
            "  inflating: trainset/P91/000013.jpg  \n",
            "  inflating: trainset/P91/000014.jpg  \n",
            "  inflating: trainset/P91/000015.jpg  \n",
            "  inflating: trainset/P91/000016.jpg  \n",
            "  inflating: trainset/P91/000017.jpg  \n",
            "  inflating: trainset/P91/000018.jpg  \n",
            "  inflating: trainset/P91/000019.jpg  \n",
            "  inflating: trainset/P91/000020.jpg  \n",
            "  inflating: trainset/P91/000021.jpg  \n",
            "  inflating: trainset/P91/000022.jpg  \n",
            "  inflating: trainset/P91/000023.jpg  \n",
            "  inflating: trainset/P91/000024.jpg  \n",
            "  inflating: trainset/P91/000025.jpg  \n",
            "  inflating: trainset/P91/000026.jpg  \n",
            "  inflating: trainset/P91/000027.jpg  \n",
            "  inflating: trainset/P91/000028.jpg  \n",
            "  inflating: trainset/P91/000029.jpg  \n",
            "  inflating: trainset/P91/000030.jpg  \n",
            "  inflating: trainset/P91/000031.jpg  \n",
            "  inflating: trainset/P91/000032.jpg  \n",
            "  inflating: trainset/P91/000033.jpg  \n",
            "  inflating: trainset/P91/000034.jpg  \n",
            "  inflating: trainset/P91/000035.jpg  \n",
            "  inflating: trainset/P91/000036.jpg  \n",
            "  inflating: trainset/P91/000037.jpg  \n",
            "  inflating: trainset/P91/000038.jpg  \n",
            "  inflating: trainset/P91/000039.jpg  \n",
            "  inflating: trainset/P91/000040.jpg  \n",
            "  inflating: trainset/P91/000041.jpg  \n",
            "  inflating: trainset/P91/000042.jpg  \n",
            "  inflating: trainset/P91/000043.jpg  \n",
            "  inflating: trainset/P91/000044.jpg  \n",
            "  inflating: trainset/P91/000045.jpg  \n",
            "  inflating: trainset/P91/000046.jpg  \n",
            "  inflating: trainset/P91/000047.jpg  \n",
            "  inflating: trainset/P91/000048.jpg  \n",
            "  inflating: trainset/P91/000049.jpg  \n",
            "  inflating: trainset/P91/000050.jpg  \n",
            "  inflating: trainset/P94/000000.jpg  \n",
            "  inflating: trainset/P94/000001.jpg  \n",
            "  inflating: trainset/P94/000002.jpg  \n",
            "  inflating: trainset/P94/000003.jpg  \n",
            "  inflating: trainset/P94/000004.jpg  \n",
            "  inflating: trainset/P94/000005.jpg  \n",
            "  inflating: trainset/P94/000006.jpg  \n",
            "  inflating: trainset/P94/000007.jpg  \n",
            "  inflating: trainset/P94/000008.jpg  \n",
            "  inflating: trainset/P94/000009.jpg  \n",
            "  inflating: trainset/P94/000010.jpg  \n",
            "  inflating: trainset/P94/000011.jpg  \n",
            "  inflating: trainset/P94/000012.jpg  \n",
            "  inflating: trainset/P94/000013.jpg  \n",
            "  inflating: trainset/P94/000014.jpg  \n",
            "  inflating: trainset/P94/000015.jpg  \n",
            "  inflating: trainset/P94/000016.jpg  \n",
            "  inflating: trainset/P94/000017.jpg  \n",
            "  inflating: trainset/P94/000018.jpg  \n",
            "  inflating: trainset/P94/000019.jpg  \n",
            "  inflating: trainset/P94/000020.jpg  \n",
            "  inflating: trainset/P94/000021.jpg  \n",
            "  inflating: trainset/P94/000022.jpg  \n",
            "  inflating: trainset/P94/000023.jpg  \n",
            "  inflating: trainset/P94/000024.jpg  \n",
            "  inflating: trainset/P94/000025.jpg  \n",
            "  inflating: trainset/P94/000026.jpg  \n",
            "  inflating: trainset/P94/000027.jpg  \n",
            "  inflating: trainset/P94/000028.jpg  \n",
            "  inflating: trainset/P94/000029.jpg  \n",
            "  inflating: trainset/P94/000030.jpg  \n",
            "  inflating: trainset/P94/000031.jpg  \n",
            "  inflating: trainset/P94/000032.jpg  \n",
            "  inflating: trainset/P94/000033.jpg  \n",
            "  inflating: trainset/P94/000034.jpg  \n",
            "  inflating: trainset/P94/000035.jpg  \n",
            "  inflating: trainset/P94/000036.jpg  \n",
            "  inflating: trainset/P94/000037.jpg  \n",
            "  inflating: trainset/P94/000038.jpg  \n",
            "  inflating: trainset/P94/000039.jpg  \n",
            "  inflating: trainset/P94/000040.jpg  \n",
            "  inflating: trainset/P94/000041.jpg  \n",
            "  inflating: trainset/P94/000042.jpg  \n",
            "  inflating: trainset/P94/000043.jpg  \n",
            "  inflating: trainset/P94/000044.jpg  \n",
            "  inflating: trainset/P94/000045.jpg  \n",
            "  inflating: trainset/P94/000046.jpg  \n",
            "  inflating: trainset/P94/000047.jpg  \n",
            "  inflating: trainset/P94/000048.jpg  \n",
            "  inflating: trainset/P94/000049.jpg  \n",
            "  inflating: trainset/P94/000050.jpg  \n",
            "  inflating: trainset/P94/000051.jpg  \n",
            "  inflating: trainset/P94/000052.jpg  \n",
            "  inflating: trainset/P94/000053.jpg  \n",
            "  inflating: trainset/P94/000054.jpg  \n",
            "  inflating: trainset/P94/000055.jpg  \n",
            "  inflating: trainset/P94/000056.jpg  \n",
            "  inflating: trainset/P94/000057.jpg  \n",
            "  inflating: trainset/P94/000058.jpg  \n",
            "  inflating: trainset/P94/000059.jpg  \n",
            "  inflating: trainset/P94/000060.jpg  \n",
            "  inflating: trainset/P94/000061.jpg  \n",
            "  inflating: trainset/P94/000062.jpg  \n",
            "  inflating: trainset/P94/000063.jpg  \n",
            "  inflating: trainset/P94/000064.jpg  \n",
            "  inflating: trainset/P94/000065.jpg  \n",
            "  inflating: trainset/P94/000066.jpg  \n",
            "  inflating: trainset/P94/000067.jpg  \n",
            "  inflating: trainset/P94/000068.jpg  \n",
            "  inflating: trainset/P94/000069.jpg  \n",
            "  inflating: trainset/P94/000070.jpg  \n",
            "  inflating: trainset/P94/000071.jpg  \n",
            "  inflating: trainset/P94/000072.jpg  \n",
            "  inflating: trainset/P94/000073.jpg  \n",
            "  inflating: trainset/P94/000074.jpg  \n",
            "  inflating: trainset/P94/000075.jpg  \n",
            "  inflating: trainset/P94/000076.jpg  \n",
            "  inflating: trainset/P94/000077.jpg  \n",
            "  inflating: trainset/P94/000078.jpg  \n",
            "  inflating: trainset/P94/000079.jpg  \n",
            "  inflating: trainset/P94/000080.jpg  \n",
            "  inflating: trainset/P94/000081.jpg  \n",
            "  inflating: trainset/P94/000082.jpg  \n",
            "  inflating: trainset/P94/000083.jpg  \n",
            "  inflating: trainset/P94/000084.jpg  \n",
            "  inflating: trainset/P94/000085.jpg  \n",
            "  inflating: trainset/P94/000086.jpg  \n",
            "  inflating: trainset/P94/000087.jpg  \n",
            "  inflating: trainset/P94/000088.jpg  \n",
            "  inflating: trainset/P94/000089.jpg  \n",
            "  inflating: trainset/P95/000000.jpg  \n",
            "  inflating: trainset/P95/000001.jpg  \n",
            "  inflating: trainset/P95/000002.jpg  \n",
            "  inflating: trainset/P95/000003.jpg  \n",
            "  inflating: trainset/P95/000004.jpg  \n",
            "  inflating: trainset/P95/000005.jpg  \n",
            "  inflating: trainset/P95/000006.jpg  \n",
            "  inflating: trainset/P95/000007.jpg  \n",
            "  inflating: trainset/P95/000008.jpg  \n",
            "  inflating: trainset/P95/000009.jpg  \n",
            "  inflating: trainset/P95/000010.jpg  \n",
            "  inflating: trainset/P95/000011.jpg  \n",
            "  inflating: trainset/P95/000012.jpg  \n",
            "  inflating: trainset/P95/000013.jpg  \n",
            "  inflating: trainset/P95/000014.jpg  \n",
            "  inflating: trainset/P95/000015.jpg  \n",
            "  inflating: trainset/P95/000016.jpg  \n",
            "  inflating: trainset/P95/000017.jpg  \n",
            "  inflating: trainset/P95/000018.jpg  \n",
            "  inflating: trainset/P95/000019.jpg  \n",
            "  inflating: trainset/P95/000020.jpg  \n",
            "  inflating: trainset/P95/000021.jpg  \n",
            "  inflating: trainset/P95/000022.jpg  \n",
            "  inflating: trainset/P95/000023.jpg  \n",
            "  inflating: trainset/P95/000024.jpg  \n",
            "  inflating: trainset/P95/000025.jpg  \n",
            "  inflating: trainset/P95/000026.jpg  \n",
            "  inflating: trainset/P95/000027.jpg  \n",
            "  inflating: trainset/P95/000028.jpg  \n",
            "  inflating: trainset/P95/000029.jpg  \n",
            "  inflating: trainset/P95/000030.jpg  \n",
            "  inflating: trainset/P95/000031.jpg  \n",
            "  inflating: trainset/P95/000032.jpg  \n",
            "  inflating: trainset/P95/000033.jpg  \n",
            "  inflating: trainset/P95/000034.jpg  \n",
            "  inflating: trainset/P95/000035.jpg  \n",
            "  inflating: trainset/P95/000036.jpg  \n",
            "  inflating: trainset/P95/000037.jpg  \n",
            "  inflating: trainset/P95/000038.jpg  \n",
            "  inflating: trainset/P95/000039.jpg  \n",
            "  inflating: trainset/P95/000040.jpg  \n",
            "  inflating: trainset/P95/000041.jpg  \n",
            "  inflating: trainset/P95/000042.jpg  \n",
            "  inflating: trainset/P95/000043.jpg  \n",
            "  inflating: trainset/P95/000044.jpg  \n",
            "  inflating: trainset/P95/000045.jpg  \n",
            "  inflating: trainset/P95/000046.jpg  \n",
            "  inflating: trainset/P95/000047.jpg  \n",
            "  inflating: trainset/P95/000048.jpg  \n",
            "  inflating: trainset/P95/000049.jpg  \n",
            "  inflating: trainset/P95/000050.jpg  \n",
            "  inflating: trainset/P95/000051.jpg  \n",
            "  inflating: trainset/P95/000052.jpg  \n",
            "  inflating: trainset/P95/000053.jpg  \n",
            "  inflating: trainset/P95/000054.jpg  \n",
            "  inflating: trainset/P95/000055.jpg  \n",
            "  inflating: trainset/P95/000056.jpg  \n",
            "  inflating: trainset/P95/000057.jpg  \n",
            "  inflating: trainset/P95/000058.jpg  \n",
            "  inflating: trainset/P95/000059.jpg  \n",
            "  inflating: trainset/P95/000060.jpg  \n",
            "  inflating: trainset/P95/000061.jpg  \n",
            "  inflating: trainset/P95/000062.jpg  \n",
            "  inflating: trainset/P95/000063.jpg  \n",
            "  inflating: trainset/P95/000064.jpg  \n",
            "  inflating: trainset/P95/000065.jpg  \n",
            "  inflating: trainset/P95/000066.jpg  \n",
            "  inflating: trainset/P95/000067.jpg  \n",
            "  inflating: trainset/P95/000068.jpg  \n",
            "  inflating: trainset/P95/000069.jpg  \n",
            "  inflating: trainset/P95/000070.jpg  \n",
            "  inflating: trainset/P95/000071.jpg  \n",
            "  inflating: trainset/P95/000072.jpg  \n",
            "  inflating: trainset/P95/000073.jpg  \n",
            "  inflating: trainset/P96/000000.jpg  \n",
            "  inflating: trainset/P96/000001.jpg  \n",
            "  inflating: trainset/P96/000002.jpg  \n",
            "  inflating: trainset/P96/000003.jpg  \n",
            "  inflating: trainset/P96/000004.jpg  \n",
            "  inflating: trainset/P96/000005.jpg  \n",
            "  inflating: trainset/P96/000006.jpg  \n",
            "  inflating: trainset/P96/000007.jpg  \n",
            "  inflating: trainset/P96/000008.jpg  \n",
            "  inflating: trainset/P96/000009.jpg  \n",
            "  inflating: trainset/P96/000010.jpg  \n",
            "  inflating: trainset/P96/000011.jpg  \n",
            "  inflating: trainset/P96/000012.jpg  \n",
            "  inflating: trainset/P96/000013.jpg  \n",
            "  inflating: trainset/P96/000014.jpg  \n",
            "  inflating: trainset/P96/000015.jpg  \n",
            "  inflating: trainset/P96/000016.jpg  \n",
            "  inflating: trainset/P96/000017.jpg  \n",
            "  inflating: trainset/P96/000018.jpg  \n",
            "  inflating: trainset/P96/000019.jpg  \n",
            "  inflating: trainset/P96/000020.jpg  \n",
            "  inflating: trainset/P96/000021.jpg  \n",
            "  inflating: trainset/P96/000022.jpg  \n",
            "  inflating: trainset/P96/000023.jpg  \n",
            "  inflating: trainset/P96/000024.jpg  \n",
            "  inflating: trainset/P96/000025.jpg  \n",
            "  inflating: trainset/P96/000026.jpg  \n",
            "  inflating: trainset/P96/000027.jpg  \n",
            "  inflating: trainset/P96/000028.jpg  \n",
            "  inflating: trainset/P96/000029.jpg  \n",
            "  inflating: trainset/P96/000030.jpg  \n",
            "  inflating: trainset/P96/000031.jpg  \n",
            "  inflating: trainset/P96/000032.jpg  \n",
            "  inflating: trainset/P96/000033.jpg  \n",
            "  inflating: trainset/P96/000034.jpg  \n",
            "  inflating: trainset/P96/000035.jpg  \n",
            "  inflating: trainset/P96/000036.jpg  \n",
            "  inflating: trainset/P96/000037.jpg  \n",
            "  inflating: trainset/P96/000038.jpg  \n",
            "  inflating: trainset/P96/000039.jpg  \n",
            "  inflating: trainset/P96/000040.jpg  \n",
            "  inflating: trainset/P96/000041.jpg  \n",
            "  inflating: trainset/P96/000042.jpg  \n",
            "  inflating: trainset/P96/000043.jpg  \n",
            "  inflating: trainset/P96/000044.jpg  \n",
            "  inflating: trainset/P96/000045.jpg  \n",
            "  inflating: trainset/P96/000046.jpg  \n",
            "  inflating: trainset/P96/000047.jpg  \n",
            "  inflating: trainset/P96/000048.jpg  \n",
            "  inflating: trainset/P96/000049.jpg  \n",
            "  inflating: trainset/P96/000050.jpg  \n",
            "  inflating: trainset/P96/000051.jpg  \n",
            "  inflating: trainset/P96/000052.jpg  \n",
            "  inflating: trainset/P96/000053.jpg  \n",
            "  inflating: trainset/P96/000054.jpg  \n",
            "  inflating: trainset/P96/000055.jpg  \n",
            "  inflating: trainset/P96/000056.jpg  \n",
            "  inflating: trainset/P96/000057.jpg  \n",
            "  inflating: trainset/P96/000058.jpg  \n",
            "  inflating: trainset/P96/000059.jpg  \n",
            "  inflating: trainset/P96/000060.jpg  \n",
            "  inflating: trainset/P96/000061.jpg  \n",
            "  inflating: trainset/P96/000062.jpg  \n",
            "  inflating: trainset/P96/000063.jpg  \n",
            "  inflating: trainset/P96/000064.jpg  \n",
            "  inflating: trainset/P96/000065.jpg  \n",
            "  inflating: trainset/P96/000066.jpg  \n",
            "  inflating: trainset/P96/000067.jpg  \n",
            "  inflating: trainset/P96/000068.jpg  \n",
            "  inflating: trainset/P96/000069.jpg  \n",
            "  inflating: trainset/P96/000070.jpg  \n",
            "  inflating: trainset/P96/000071.jpg  \n",
            "  inflating: trainset/P96/000072.jpg  \n",
            "  inflating: trainset/P96/000073.jpg  \n",
            "  inflating: trainset/P96/000074.jpg  \n",
            "  inflating: trainset/P96/000075.jpg  \n",
            "  inflating: trainset/P96/000076.jpg  \n",
            "  inflating: trainset/P96/000077.jpg  \n",
            "  inflating: trainset/P96/000078.jpg  \n",
            "  inflating: trainset/P96/000079.jpg  \n",
            "  inflating: trainset/P96/000080.jpg  \n",
            "  inflating: trainset/P96/000081.jpg  \n",
            "  inflating: trainset/P96/000082.jpg  \n",
            "  inflating: trainset/P96/000083.jpg  \n",
            "  inflating: trainset/P96/000084.jpg  \n",
            "  inflating: trainset/P96/000085.jpg  \n",
            "  inflating: trainset/P96/000086.jpg  \n",
            "  inflating: trainset/P96/000087.jpg  \n",
            "  inflating: trainset/P96/000088.jpg  \n",
            "  inflating: trainset/P96/000089.jpg  \n",
            "  inflating: trainset/P96/000090.jpg  \n",
            "  inflating: trainset/P96/000091.jpg  \n",
            "  inflating: trainset/P96/000092.jpg  \n",
            "  inflating: trainset/P96/000093.jpg  \n",
            "  inflating: trainset/P96/000094.jpg  \n",
            "  inflating: trainset/P96/000095.jpg  \n",
            "  inflating: trainset/P96/000096.jpg  \n",
            "  inflating: trainset/P96/000097.jpg  \n",
            "  inflating: trainset/P96/000098.jpg  \n",
            "  inflating: trainset/P96/000099.jpg  \n",
            "  inflating: trainset/P96/000100.jpg  \n",
            "  inflating: trainset/P96/000101.jpg  \n",
            "  inflating: trainset/P96/000102.jpg  \n",
            "  inflating: trainset/P96/000103.jpg  \n",
            "  inflating: trainset/P96/000104.jpg  \n",
            "  inflating: trainset/P96/000105.jpg  \n",
            "  inflating: trainset/P96/000106.jpg  \n",
            "  inflating: trainset/P96/000107.jpg  \n",
            "  inflating: trainset/P96/000108.jpg  \n",
            "  inflating: trainset/P96/000109.jpg  \n",
            "  inflating: trainset/P96/000110.jpg  \n",
            "  inflating: trainset/P96/000111.jpg  \n",
            "  inflating: trainset/P96/000112.jpg  \n",
            "  inflating: trainset/P96/000113.jpg  \n",
            "  inflating: trainset/P96/000114.jpg  \n",
            "  inflating: trainset/P96/000115.jpg  \n",
            "  inflating: trainset/P96/000116.jpg  \n",
            "  inflating: trainset/P96/000117.jpg  \n",
            "  inflating: trainset/P96/000118.jpg  \n",
            "  inflating: trainset/P96/000119.jpg  \n",
            "  inflating: trainset/P96/000120.jpg  \n",
            "  inflating: trainset/P96/000121.jpg  \n",
            "  inflating: trainset/P96/000122.jpg  \n",
            "  inflating: trainset/P96/000123.jpg  \n",
            "  inflating: trainset/P96/000124.jpg  \n",
            "  inflating: trainset/P96/000125.jpg  \n",
            "  inflating: trainset/P96/000126.jpg  \n",
            "  inflating: trainset/P96/000127.jpg  \n",
            "  inflating: trainset/P96/000128.jpg  \n",
            "  inflating: trainset/P96/000129.jpg  \n",
            "  inflating: trainset/P96/000130.jpg  \n",
            "  inflating: trainset/P96/000131.jpg  \n",
            "  inflating: trainset/P96/000132.jpg  \n",
            "  inflating: trainset/P96/000133.jpg  \n",
            "  inflating: trainset/P96/000134.jpg  \n",
            "  inflating: trainset/P96/000135.jpg  \n",
            "  inflating: trainset/P96/000136.jpg  \n",
            "  inflating: trainset/P96/000137.jpg  \n",
            "  inflating: trainset/P96/000138.jpg  \n",
            "  inflating: trainset/P96/000139.jpg  \n",
            "  inflating: trainset/P96/000140.jpg  \n",
            "  inflating: trainset/P96/000141.jpg  \n",
            "  inflating: trainset/P96/000142.jpg  \n",
            "  inflating: trainset/P96/000143.jpg  \n",
            "  inflating: trainset/P96/000144.jpg  \n",
            "  inflating: trainset/P97/000000.jpg  \n",
            "  inflating: trainset/P97/000001.jpg  \n",
            "  inflating: trainset/P97/000002.jpg  \n",
            "  inflating: trainset/P97/000003.jpg  \n",
            "  inflating: trainset/P97/000004.jpg  \n",
            "  inflating: trainset/P97/000005.jpg  \n",
            "  inflating: trainset/P97/000006.jpg  \n",
            "  inflating: trainset/P97/000007.jpg  \n",
            "  inflating: trainset/P97/000008.jpg  \n",
            "  inflating: trainset/P97/000009.jpg  \n",
            "  inflating: trainset/P97/000010.jpg  \n",
            "  inflating: trainset/P97/000011.jpg  \n",
            "  inflating: trainset/P97/000012.jpg  \n",
            "  inflating: trainset/P97/000013.jpg  \n",
            "  inflating: trainset/P97/000014.jpg  \n",
            "  inflating: trainset/P97/000015.jpg  \n",
            "  inflating: trainset/P97/000016.jpg  \n",
            "  inflating: trainset/P97/000017.jpg  \n",
            "  inflating: trainset/P97/000018.jpg  \n",
            "  inflating: trainset/P97/000019.jpg  \n",
            "  inflating: trainset/P97/000020.jpg  \n",
            "  inflating: trainset/P97/000021.jpg  \n",
            "  inflating: trainset/P97/000022.jpg  \n",
            "  inflating: trainset/P97/000023.jpg  \n",
            "  inflating: trainset/P97/000024.jpg  \n",
            "  inflating: trainset/P97/000025.jpg  \n",
            "  inflating: trainset/P97/000026.jpg  \n",
            "  inflating: trainset/P97/000027.jpg  \n",
            "  inflating: trainset/P97/000028.jpg  \n",
            "  inflating: trainset/P97/000029.jpg  \n",
            "  inflating: trainset/P97/000030.jpg  \n",
            "  inflating: trainset/P97/000031.jpg  \n",
            "  inflating: trainset/P97/000032.jpg  \n",
            "  inflating: trainset/P97/000033.jpg  \n",
            "  inflating: trainset/P97/000034.jpg  \n",
            "  inflating: trainset/P97/000035.jpg  \n",
            "  inflating: trainset/P97/000036.jpg  \n",
            "  inflating: trainset/P97/000037.jpg  \n",
            "  inflating: trainset/P97/000038.jpg  \n",
            "  inflating: trainset/P97/000039.jpg  \n",
            "  inflating: trainset/P97/000040.jpg  \n",
            "  inflating: trainset/P97/000041.jpg  \n",
            "  inflating: trainset/P97/000042.jpg  \n",
            "  inflating: trainset/P97/000043.jpg  \n",
            "  inflating: trainset/P97/000044.jpg  \n",
            "  inflating: trainset/P97/000045.jpg  \n",
            "  inflating: trainset/P97/000046.jpg  \n",
            "  inflating: trainset/P97/000047.jpg  \n",
            "  inflating: trainset/P97/000048.jpg  \n",
            "  inflating: trainset/P97/000049.jpg  \n",
            "  inflating: trainset/P97/000050.jpg  \n",
            "  inflating: trainset/P97/000051.jpg  \n",
            "  inflating: trainset/P97/000052.jpg  \n",
            "  inflating: trainset/P97/000053.jpg  \n",
            "  inflating: trainset/P97/000054.jpg  \n",
            "  inflating: trainset/P97/000055.jpg  \n",
            "  inflating: trainset/P97/000056.jpg  \n",
            "  inflating: trainset/P99/000000.jpg  \n",
            "  inflating: trainset/P99/000001.jpg  \n",
            "  inflating: trainset/P99/000002.jpg  \n",
            "  inflating: trainset/P99/000003.jpg  \n",
            "  inflating: trainset/P99/000004.jpg  \n",
            "  inflating: trainset/P99/000005.jpg  \n",
            "  inflating: trainset/P99/000006.jpg  \n",
            "  inflating: trainset/P99/000007.jpg  \n",
            "  inflating: trainset/P99/000008.jpg  \n",
            "  inflating: trainset/P99/000009.jpg  \n",
            "  inflating: trainset/P99/000010.jpg  \n",
            "  inflating: trainset/P99/000011.jpg  \n",
            "  inflating: trainset/P99/000012.jpg  \n",
            "  inflating: trainset/P99/000013.jpg  \n",
            "  inflating: trainset/P99/000014.jpg  \n",
            "  inflating: trainset/P99/000015.jpg  \n",
            "  inflating: trainset/P99/000016.jpg  \n",
            "  inflating: trainset/P99/000017.jpg  \n",
            "  inflating: trainset/P99/000018.jpg  \n",
            "  inflating: trainset/P99/000019.jpg  \n",
            "  inflating: trainset/P99/000020.jpg  \n",
            "  inflating: trainset/P99/000021.jpg  \n",
            "  inflating: trainset/P99/000022.jpg  \n",
            "  inflating: trainset/P99/000023.jpg  \n",
            "  inflating: trainset/P99/000024.jpg  \n",
            "  inflating: trainset/P99/000025.jpg  \n",
            "  inflating: trainset/P99/000026.jpg  \n",
            "  inflating: trainset/P99/000027.jpg  \n",
            "  inflating: trainset/P99/000028.jpg  \n",
            "  inflating: trainset/P99/000029.jpg  \n",
            "  inflating: trainset/P99/000030.jpg  \n",
            "  inflating: trainset/P99/000031.jpg  \n",
            "  inflating: trainset/P99/000032.jpg  \n",
            "  inflating: trainset/P99/000033.jpg  \n",
            "  inflating: trainset/P99/000034.jpg  \n",
            "  inflating: trainset/P99/000035.jpg  \n",
            "  inflating: trainset/P99/000036.jpg  \n",
            "  inflating: trainset/P99/000037.jpg  \n",
            "  inflating: trainset/P99/000038.jpg  \n",
            "  inflating: trainset/P99/000039.jpg  \n",
            "  inflating: trainset/P99/000040.jpg  \n",
            "  inflating: trainset/P99/000041.jpg  \n",
            "  inflating: trainset/P99/000042.jpg  \n",
            "  inflating: trainset/P99/000043.jpg  \n",
            "  inflating: trainset/P99/000044.jpg  \n",
            "  inflating: trainset/P99/000045.jpg  \n",
            "  inflating: trainset/P99/000046.jpg  \n",
            "  inflating: trainset/P99/000047.jpg  \n",
            "  inflating: trainset/P99/000048.jpg  \n",
            "  inflating: trainset/P99/000049.jpg  \n",
            "  inflating: trainset/P99/000050.jpg  \n",
            "  inflating: trainset/P99/000051.jpg  \n",
            "  inflating: trainset/P99/000052.jpg  \n",
            "  inflating: trainset/P99/000053.jpg  \n",
            "  inflating: trainset/P99/000054.jpg  \n",
            "  inflating: trainset/P99/000055.jpg  \n",
            "  inflating: trainset/P99/000056.jpg  \n",
            "  inflating: trainset/P99/000057.jpg  \n",
            "  inflating: trainset/P99/000058.jpg  \n",
            "  inflating: trainset/P99/000059.jpg  \n",
            "  inflating: trainset/P99/000060.jpg  \n",
            "  inflating: trainset/P99/000061.jpg  \n",
            "  inflating: trainset/P99/000062.jpg  \n",
            "  inflating: trainset/P99/000063.jpg  \n",
            "  inflating: trainset/P99/000064.jpg  \n",
            "  inflating: trainset/P99/000065.jpg  \n",
            "  inflating: trainset/P99/000066.jpg  \n",
            "  inflating: trainset/P99/000067.jpg  \n",
            "  inflating: trainset/P99/000068.jpg  \n",
            "  inflating: trainset/P99/000069.jpg  \n",
            "  inflating: trainset/P99/000070.jpg  \n",
            "  inflating: trainset/P99/000071.jpg  \n",
            "  inflating: trainset/P99/000072.jpg  \n",
            "  inflating: trainset/P99/000073.jpg  \n",
            "  inflating: trainset/P99/000074.jpg  \n",
            "  inflating: trainset/P99/000075.jpg  \n",
            "  inflating: trainset/P99/000076.jpg  \n",
            "  inflating: trainset/P99/000077.jpg  \n",
            "  inflating: trainset/P99/000078.jpg  \n",
            "  inflating: trainset/P99/000079.jpg  \n",
            "  inflating: trainset/P99/000080.jpg  \n",
            "  inflating: trainset/P99/000081.jpg  \n",
            "  inflating: trainset/P99/000082.jpg  \n",
            "  inflating: trainset/P99/000083.jpg  \n",
            "  inflating: trainset/P99/000084.jpg  \n",
            "  inflating: trainset/P99/000085.jpg  \n",
            "  inflating: trainset/trainset_true.csv  \n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ypG3pC3K6Skk"
      },
      "source": [
        "#Metadata"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 406
        },
        "id": "x-W-O1V1_Tru",
        "outputId": "b6305b49-5871-4b94-fb94-b258eafa9be7"
      },
      "source": [
        "df = pd.read_csv(\"clinical_annotation.csv\")\n",
        "df"
      ],
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Unnamed: 0</th>\n",
              "      <th>ID</th>\n",
              "      <th>LABEL</th>\n",
              "      <th>GENDER</th>\n",
              "      <th>DOB</th>\n",
              "      <th>LYMPH_COUNT</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>P26</td>\n",
              "      <td>1</td>\n",
              "      <td>M</td>\n",
              "      <td>11/3/1933</td>\n",
              "      <td>11.20</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>P183</td>\n",
              "      <td>1</td>\n",
              "      <td>M</td>\n",
              "      <td>5/15/1942</td>\n",
              "      <td>12.80</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2</td>\n",
              "      <td>P89</td>\n",
              "      <td>1</td>\n",
              "      <td>M</td>\n",
              "      <td>6/19/1935</td>\n",
              "      <td>9.60</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3</td>\n",
              "      <td>P123</td>\n",
              "      <td>1</td>\n",
              "      <td>M</td>\n",
              "      <td>1/27/1931</td>\n",
              "      <td>122.60</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4</td>\n",
              "      <td>P61</td>\n",
              "      <td>1</td>\n",
              "      <td>F</td>\n",
              "      <td>3/5/1931</td>\n",
              "      <td>11.60</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>200</th>\n",
              "      <td>200</td>\n",
              "      <td>P135</td>\n",
              "      <td>1</td>\n",
              "      <td>M</td>\n",
              "      <td>27-08-1951</td>\n",
              "      <td>9.45</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>201</th>\n",
              "      <td>201</td>\n",
              "      <td>P8</td>\n",
              "      <td>0</td>\n",
              "      <td>M</td>\n",
              "      <td>16-05-1975</td>\n",
              "      <td>4.91</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>202</th>\n",
              "      <td>202</td>\n",
              "      <td>P130</td>\n",
              "      <td>0</td>\n",
              "      <td>F</td>\n",
              "      <td>16-05-1943</td>\n",
              "      <td>4.17</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>203</th>\n",
              "      <td>203</td>\n",
              "      <td>P70</td>\n",
              "      <td>1</td>\n",
              "      <td>M</td>\n",
              "      <td>05-09-1987</td>\n",
              "      <td>5.66</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>204</th>\n",
              "      <td>204</td>\n",
              "      <td>P60</td>\n",
              "      <td>0</td>\n",
              "      <td>F</td>\n",
              "      <td>5/23/1993</td>\n",
              "      <td>6.42</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>205 rows × 6 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "     Unnamed: 0    ID  LABEL GENDER         DOB  LYMPH_COUNT\n",
              "0             0   P26      1      M   11/3/1933        11.20\n",
              "1             1  P183      1      M   5/15/1942        12.80\n",
              "2             2   P89      1      M   6/19/1935         9.60\n",
              "3             3  P123      1      M   1/27/1931       122.60\n",
              "4             4   P61      1      F    3/5/1931        11.60\n",
              "..          ...   ...    ...    ...         ...          ...\n",
              "200         200  P135      1      M  27-08-1951         9.45\n",
              "201         201    P8      0      M  16-05-1975         4.91\n",
              "202         202  P130      0      F  16-05-1943         4.17\n",
              "203         203   P70      1      M  05-09-1987         5.66\n",
              "204         204   P60      0      F   5/23/1993         6.42\n",
              "\n",
              "[205 rows x 6 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ozEpni5l6V8m",
        "outputId": "5c38cae4-bfe1-4c95-eabc-7060e8124d8b"
      },
      "source": [
        "df = pd.read_csv(\"clinical_annotation.csv\")\n",
        "df = df.drop('Unnamed: 0',axis=1)\n",
        "df.DOB = pd.to_datetime(df.DOB)\n",
        "df['AGE'] = pd.to_datetime('today').normalize() - pd.to_datetime(df.DOB)\n",
        "df.AGE = df.AGE.astype(\"timedelta64[Y]\")\n",
        "\n",
        "diagnoses = np.unique(df.LABEL.values)\n",
        "population_df = pd.DataFrame(index=diagnoses,\n",
        "                                columns=['N', 'AGE', 'GENDER', 'LYMPH_COUNT'])\n",
        "\n",
        "merged_df = df.set_index(['ID'], drop=True)\n",
        "df = df.set_index(['ID'], drop=True)\n",
        "sub_merged_df = merged_df.loc[df.index]\n",
        "\n",
        "for diagnosis in population_df.index.values:\n",
        "    diagnosis_df = sub_merged_df[df.LABEL == diagnosis]\n",
        "    population_df.loc[diagnosis, 'N'] = len(diagnosis_df)\n",
        "    \n",
        "    # Age\n",
        "    mean_age = np.mean(diagnosis_df.AGE)\n",
        "    std_age = np.std(diagnosis_df.AGE)\n",
        "    population_df.loc[diagnosis, 'AGE'] = '%.1f ± %.1f' % (mean_age, std_age)\n",
        "    # Sex\n",
        "    population_df.loc[diagnosis, 'GENDER'] = round((len(diagnosis_df[diagnosis_df.GENDER == 'F']) / len(diagnosis_df)) * 100, 1)\n",
        "    # Lymph count\n",
        "    mean_lymph = np.mean(diagnosis_df.LYMPH_COUNT)\n",
        "    std_lymph = np.std(diagnosis_df.LYMPH_COUNT)\n",
        "    population_df.loc[diagnosis, 'LYMPH_COUNT'] = '%.1f ± %.1f' % (mean_lymph, std_lymph)\n",
        "print(population_df)"
      ],
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "      N          AGE GENDER  LYMPH_COUNT\n",
            "-1   42  65.8 ± 19.4   42.9  24.4 ± 43.6\n",
            " 0   50  54.4 ± 19.6     52    5.0 ± 1.0\n",
            " 1  113  75.4 ± 12.0   47.8  35.9 ± 53.3\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "J4956iuq3EES"
      },
      "source": [
        "#Baseline MIL"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "WdGNAs19zgNi"
      },
      "source": [
        "class LymphoDataset(torch.utils.data.Dataset):\n",
        "    def __init__(self, orig, img_list, ages, concentration, labels, transforms=None):\n",
        "        self.transforms = transforms\n",
        "        self.img_list = img_list\n",
        "        self.img_dict = {idx: {'paths': [orig + name + '/' + img_name for img_name in os.listdir(orig + name)],\n",
        "                               'age': ages[idx],\n",
        "                               'concentration': concentration[idx],\n",
        "                               'label': labels[idx],\n",
        "                               'name': name} for idx, name in enumerate(img_list)}\n",
        "\n",
        "    def load_image(self, path):\n",
        "        image = imageio.imread(path)\n",
        "        return image\n",
        "\n",
        "\n",
        "    def __getitem__(self, image_id):   \n",
        "        images = [self.load_image(path) for path in self.img_dict[image_id]['paths']]\n",
        "        label = self.img_dict[image_id]['label']\n",
        "        age = self.img_dict[image_id]['age']\n",
        "        concentration = self.img_dict[image_id]['concentration']\n",
        "        name = self.img_dict[image_id]['name']\n",
        "\n",
        "        # Convert everything to tensor\n",
        "        concentration = torch.tensor([concentration], dtype=torch.float32)\n",
        "        age = torch.as_tensor([age], dtype=torch.float32)\n",
        "        label = torch.as_tensor([label], dtype=torch.float32)\n",
        "\n",
        "        if self.transforms:\n",
        "            images = torch.cat([self.transforms(image)[None, :, :, :] for image in images], axis=0)\n",
        "        \n",
        "        data = {\"age\": age,\n",
        "                \"concentration\": concentration,\n",
        "                \"images\": images,\n",
        "                \"label\": label,\n",
        "                \"name\": name}\n",
        "        return data\n",
        "\n",
        "    def __len__(self):\n",
        "        return len(self.img_list)\n",
        "\n",
        "def get_transform(train):\n",
        "    transforms = []\n",
        "    # converts the image, a PIL image, into a PyTorch Tensor\n",
        "    transforms.append(T.ToPILImage())\n",
        "    transforms.append(T.Resize(224))\n",
        "    if train:\n",
        "      # You can add here some data augmentation :)\n",
        "      pass # Remove this if you add data augmentation\n",
        "    transforms.append(T.ToTensor())\n",
        "    return T.Compose(transforms)\n",
        "    \n",
        "def gen_list(key, batch):\n",
        "  if key == 'images':\n",
        "    return [d[key][:, :, :, :] for d in batch]\n",
        "  elif key =='name':\n",
        "    return [d[key] for d in batch]\n",
        "  else:\n",
        "    return [d[key][None, :] for d in batch]\n",
        "\n",
        "def custom_fn(batch):\n",
        "  elem = batch[0].keys()\n",
        "  return {key : torch.cat(gen_list(key, batch), axis=0) if key != 'name' else gen_list(key, batch) for key in elem}\n",
        "\n",
        "def return_data(df, indices):\n",
        "  ages = []\n",
        "  concentration = []\n",
        "  labels = []\n",
        "  for indice in indices:\n",
        "    age, conc, label = df.loc[indice, 'AGE'], df.loc[indice, 'LYMPH_COUNT'], df.loc[indice, 'LABEL']\n",
        "    ages.append(age)\n",
        "    concentration.append(conc)\n",
        "    labels.append(label)\n",
        "  return {'indice': indices, 'age': ages, 'concentration':concentration, 'label':labels}"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "2ZmCCmVauycH"
      },
      "source": [
        "I'm going to give an overview of the framework"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 647
        },
        "id": "mOxFusgkZrrO",
        "outputId": "43a73755-4cd2-475d-eb07-05ec2bad8c98"
      },
      "source": [
        "df = pd.read_csv(\"clinical_annotation.csv\")\n",
        "df = df.drop('Unnamed: 0',axis=1)\n",
        "df.DOB = pd.to_datetime(df.DOB)\n",
        "df['AGE'] = pd.to_datetime('today').normalize() - pd.to_datetime(df.DOB)\n",
        "df.AGE = df.AGE.astype(\"timedelta64[Y]\")\n",
        "#df.AGE = (df.AGE - np.min(df.AGE)) / np.max(df.AGE)\n",
        "#df.AGE = (df.AGE - np.mean(df.AGE)) / np.std(df.AGE)\n",
        "#df.AGE = df.AGE / np.max(df.AGE)\n",
        "#df.LYMPH_COUNT = (df.LYMPH_COUNT - np.min(df.LYMPH_COUNT)) / np.max(df.LYMPH_COUNT)\n",
        "#df.LYMPH_COUNT = (df.LYMPH_COUNT ) / np.std(df.LYMPH_COUNT)\n",
        "#df.LYMPH_COUNT = (df.LYMPH_COUNT - np.mean(df.LYMPH_COUNT)) / np.std(df.LYMPH_COUNT)\n",
        "df = df[df.LABEL > -0.5].reset_index(drop=True)\n",
        "df.head(20)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>ID</th>\n",
              "      <th>LABEL</th>\n",
              "      <th>GENDER</th>\n",
              "      <th>DOB</th>\n",
              "      <th>LYMPH_COUNT</th>\n",
              "      <th>AGE</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>P26</td>\n",
              "      <td>1</td>\n",
              "      <td>M</td>\n",
              "      <td>1933-11-03</td>\n",
              "      <td>11.20</td>\n",
              "      <td>87.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>P183</td>\n",
              "      <td>1</td>\n",
              "      <td>M</td>\n",
              "      <td>1942-05-15</td>\n",
              "      <td>12.80</td>\n",
              "      <td>78.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>P89</td>\n",
              "      <td>1</td>\n",
              "      <td>M</td>\n",
              "      <td>1935-06-19</td>\n",
              "      <td>9.60</td>\n",
              "      <td>85.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>P123</td>\n",
              "      <td>1</td>\n",
              "      <td>M</td>\n",
              "      <td>1931-01-27</td>\n",
              "      <td>122.60</td>\n",
              "      <td>90.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>P61</td>\n",
              "      <td>1</td>\n",
              "      <td>F</td>\n",
              "      <td>1931-03-05</td>\n",
              "      <td>11.60</td>\n",
              "      <td>90.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>P112</td>\n",
              "      <td>1</td>\n",
              "      <td>F</td>\n",
              "      <td>1946-05-09</td>\n",
              "      <td>22.10</td>\n",
              "      <td>74.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>P63</td>\n",
              "      <td>0</td>\n",
              "      <td>F</td>\n",
              "      <td>1997-07-20</td>\n",
              "      <td>6.30</td>\n",
              "      <td>23.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>P184</td>\n",
              "      <td>1</td>\n",
              "      <td>F</td>\n",
              "      <td>1932-06-12</td>\n",
              "      <td>220.00</td>\n",
              "      <td>88.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>P23</td>\n",
              "      <td>1</td>\n",
              "      <td>M</td>\n",
              "      <td>1942-03-19</td>\n",
              "      <td>211.00</td>\n",
              "      <td>78.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>P100</td>\n",
              "      <td>1</td>\n",
              "      <td>M</td>\n",
              "      <td>1947-09-26</td>\n",
              "      <td>5.30</td>\n",
              "      <td>73.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>P11</td>\n",
              "      <td>1</td>\n",
              "      <td>F</td>\n",
              "      <td>1935-01-07</td>\n",
              "      <td>18.20</td>\n",
              "      <td>86.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>P111</td>\n",
              "      <td>1</td>\n",
              "      <td>M</td>\n",
              "      <td>1941-06-05</td>\n",
              "      <td>180.00</td>\n",
              "      <td>79.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>P28</td>\n",
              "      <td>1</td>\n",
              "      <td>F</td>\n",
              "      <td>1930-05-18</td>\n",
              "      <td>6.47</td>\n",
              "      <td>90.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>P192</td>\n",
              "      <td>1</td>\n",
              "      <td>M</td>\n",
              "      <td>1946-07-15</td>\n",
              "      <td>10.10</td>\n",
              "      <td>74.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>P35</td>\n",
              "      <td>1</td>\n",
              "      <td>M</td>\n",
              "      <td>1929-03-26</td>\n",
              "      <td>295.00</td>\n",
              "      <td>91.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>P27</td>\n",
              "      <td>1</td>\n",
              "      <td>F</td>\n",
              "      <td>1952-07-08</td>\n",
              "      <td>130.00</td>\n",
              "      <td>68.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>P113</td>\n",
              "      <td>1</td>\n",
              "      <td>M</td>\n",
              "      <td>1929-05-18</td>\n",
              "      <td>6.94</td>\n",
              "      <td>91.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>P33</td>\n",
              "      <td>1</td>\n",
              "      <td>M</td>\n",
              "      <td>1960-07-01</td>\n",
              "      <td>31.11</td>\n",
              "      <td>60.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>P17</td>\n",
              "      <td>1</td>\n",
              "      <td>F</td>\n",
              "      <td>1930-03-03</td>\n",
              "      <td>5.98</td>\n",
              "      <td>91.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>P126</td>\n",
              "      <td>1</td>\n",
              "      <td>F</td>\n",
              "      <td>1933-12-31</td>\n",
              "      <td>65.93</td>\n",
              "      <td>87.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "      ID  LABEL GENDER        DOB  LYMPH_COUNT   AGE\n",
              "0    P26      1      M 1933-11-03        11.20  87.0\n",
              "1   P183      1      M 1942-05-15        12.80  78.0\n",
              "2    P89      1      M 1935-06-19         9.60  85.0\n",
              "3   P123      1      M 1931-01-27       122.60  90.0\n",
              "4    P61      1      F 1931-03-05        11.60  90.0\n",
              "5   P112      1      F 1946-05-09        22.10  74.0\n",
              "6    P63      0      F 1997-07-20         6.30  23.0\n",
              "7   P184      1      F 1932-06-12       220.00  88.0\n",
              "8    P23      1      M 1942-03-19       211.00  78.0\n",
              "9   P100      1      M 1947-09-26         5.30  73.0\n",
              "10   P11      1      F 1935-01-07        18.20  86.0\n",
              "11  P111      1      M 1941-06-05       180.00  79.0\n",
              "12   P28      1      F 1930-05-18         6.47  90.0\n",
              "13  P192      1      M 1946-07-15        10.10  74.0\n",
              "14   P35      1      M 1929-03-26       295.00  91.0\n",
              "15   P27      1      F 1952-07-08       130.00  68.0\n",
              "16  P113      1      M 1929-05-18         6.94  91.0\n",
              "17   P33      1      M 1960-07-01        31.11  60.0\n",
              "18   P17      1      F 1930-03-03         5.98  91.0\n",
              "19  P126      1      F 1933-12-31        65.93  87.0"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "9fuN6GImzvfu"
      },
      "source": [
        "orig = 'trainset/'\n",
        "train_id_patient, val_id_patient = train_test_split(df.ID.tolist(), test_size=0.25, random_state=42)\n",
        "data_train = return_data(df.set_index(['ID']), train_id_patient)\n",
        "\n",
        "img_list, ages, concentration, labels = data_train['indice'], data_train['age'], data_train['concentration'], data_train['label']\n",
        "train = LymphoDataset(orig, img_list, ages, concentration, labels, get_transform(True))\n",
        "train_loader = torch.utils.data.DataLoader(\n",
        "    train, batch_size=1, shuffle=True, num_workers=8, collate_fn=custom_fn)\n",
        "\n",
        "data_valid = return_data(df.set_index(['ID']), val_id_patient)\n",
        "img_list, ages, concentration, labels = data_valid['indice'], data_valid['age'], data_valid['concentration'], data_valid['label']\n",
        "valid = LymphoDataset(orig, img_list, ages, concentration, labels, get_transform(False))\n",
        "valid_loader = torch.utils.data.DataLoader(\n",
        "    valid, batch_size=1, shuffle=False, num_workers=8, collate_fn=custom_fn)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "dcHz3KG8e0yP"
      },
      "source": [
        "import torch\n",
        "import torch.nn as nn\n",
        "import torch.nn.functional as F\n",
        "\n",
        "\n",
        "class GatedAttention(nn.Module):\n",
        "    def __init__(self):\n",
        "        super(GatedAttention, self).__init__()\n",
        "        self.L = 500\n",
        "        self.D = 128\n",
        "        self.K = 1\n",
        "\n",
        "\n",
        "        model_conv = models.resnet152(pretrained=True)\n",
        "        #model_conv = models.resnet50(pretrained=True)\n",
        "        self.num_ftrs = model_conv.fc.in_features\n",
        "        model_conv.fc = nn.Identity()\n",
        "\n",
        "        self.feature_extractor_part1 = model_conv\n",
        "        \n",
        "        \n",
        "\n",
        "        self.feature_extractor_part2 = nn.Sequential(\n",
        "            nn.Linear(self.num_ftrs, self.L),\n",
        "            nn.ReLU(),\n",
        "            nn.Dropout(0.5)\n",
        "        )\n",
        "\n",
        "        self.attention_V = nn.Sequential(\n",
        "            nn.Linear(self.L, self.D),\n",
        "            nn.Tanh()\n",
        "        )\n",
        "\n",
        "        self.attention_U = nn.Sequential(\n",
        "            nn.Linear(self.L, self.D),\n",
        "            nn.Sigmoid()\n",
        "        )\n",
        "\n",
        "        self.attention_weights = nn.Linear(self.D, self.K)\n",
        "\n",
        "        self.classifier = nn.Sequential(\n",
        "            nn.Linear(self.L*self.K+2, 256),\n",
        "            nn.ReLU(),\n",
        "            nn.Linear(256, 1),\n",
        "            nn.Sigmoid()\n",
        "        )\n",
        "\n",
        "    def forward(self, x):\n",
        "        img = x[0]\n",
        "        age, concentration = x[1], x[2]\n",
        "\n",
        "        x = img.squeeze(0)\n",
        "\n",
        "        H = self.feature_extractor_part1(x)\n",
        "        #print(H.shape)\n",
        "        H = H.view(-1, self.num_ftrs)\n",
        "        H = self.feature_extractor_part2(H)  # NxL\n",
        "\n",
        "        A_V = self.attention_V(H)  # NxD\n",
        "        A_U = self.attention_U(H)  # NxD\n",
        "        A = self.attention_weights(A_V * A_U) # element wise multiplication # NxK\n",
        "        A = torch.transpose(A, 1, 0)  # KxN\n",
        "        A = F.softmax(A, dim=1)  # softmax over N\n",
        "\n",
        "        M = torch.mm(A, H)  # KxL\n",
        "        x = torch.cat([M,concentration,age],axis=-1)\n",
        "        Y_prob = self.classifier(x)\n",
        "        Y_hat = torch.ge(Y_prob, 0.5).float()\n",
        "\n",
        "        return Y_prob, Y_hat, A\n",
        "\n",
        "    # AUXILIARY METHODS\n",
        "    def calculate_classification_error(self, X, Y):\n",
        "        Y = Y.float()\n",
        "        _, Y_hat, _ = self.forward(X)\n",
        "        error = 1. - Y_hat.eq(Y).cpu().float().mean().item()\n",
        "\n",
        "        return error, Y_hat\n",
        "\n",
        "    def calculate_objective(self, X, Y):\n",
        "        Y = Y.float()\n",
        "        Y_prob, _, A = self.forward(X)\n",
        "        Y_prob = torch.clamp(Y_prob, min=1e-5, max=1. - 1e-5)\n",
        "        neg_log_likelihood = -1. * (Y * torch.log(Y_prob) + (1. - Y) * torch.log(1. - Y_prob))  # negative log bernoulli\n",
        "\n",
        "        return neg_log_likelihood, A"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "t7h4SWDFjGTr"
      },
      "source": [
        "from torchvision import models\n",
        "import copy\n",
        "#optimizer = torch.optim.SGD(model_conv.fc.parameters(), lr=0.001, momentum=0.9)\n",
        "\n",
        "def train(model,epoch):\n",
        "    best_model_wts = copy.deepcopy(model.state_dict())\n",
        "    best_acc_test = 0.0\n",
        "    best_acc_train = 0.0\n",
        "\n",
        "    for epoch_ in range(1,epoch):\n",
        "      correct = 0\n",
        "      total = 0\n",
        "      model.train()\n",
        "      train_loss = 0.\n",
        "      train_error = 0.\n",
        "      outputs = [] # List to store the outputs of the model \n",
        "      labels = [] # List to store the true label \n",
        "\n",
        "      #for batch_idx, (data, label) in enumerate(train_loader):\n",
        "      for batch in tqdm(train_loader):\n",
        "          img, bag_label, age, concentration  = batch['images'].cuda(), batch['label'].cuda(), batch['age'].cuda(), batch['concentration'].cuda()\n",
        "          x = [img, age, concentration]\n",
        "\n",
        "          optimizer.zero_grad()\n",
        "          # calculate loss and metrics\n",
        "          loss, _ = model.calculate_objective(x, bag_label)\n",
        "          train_loss += loss.data[0]\n",
        "          error, output = model.calculate_classification_error(x, bag_label)\n",
        "          train_error += error\n",
        "\n",
        "          outputs.append(output) # store it in outputs\n",
        "          labels.append(bag_label) \n",
        "          # backward pass\n",
        "          loss.backward()\n",
        "          # step\n",
        "          optimizer.step()\n",
        "\n",
        "      # calculate loss and error for epoch\n",
        "      train_loss /= len(train_loader)\n",
        "      train_error /= len(train_loader)\n",
        "\n",
        "\n",
        "      total = len(labels)\n",
        "      outputs= np.asarray(outputs)\n",
        "      labels= np.asarray(labels)\n",
        "\n",
        "      correct += (outputs == labels).sum().item()\n",
        "\n",
        "      acc = 100 * correct / total\n",
        "\n",
        "      print('Epoch: {}, Loss: {:.4f}, Train error: {:.4f}, Accuracy: {}'.format(epoch_, train_loss.cpu().numpy()[0], train_error, acc))\n",
        "\n",
        "      test_loss , test_acc = test()\n",
        "\n",
        "      if test_acc >= best_acc_test and acc > best_acc_train:\n",
        "        best_acc_test = test_acc\n",
        "        best_acc_train = acc\n",
        "        best_model_wts = copy.deepcopy(model.state_dict())\n",
        "        print(\"model successfully savec\")\n",
        "\n",
        "    model.load_state_dict(best_model_wts)\n",
        "\n",
        "    return model\n",
        "\n",
        "def test():\n",
        "    correct = 0\n",
        "    total = 0\n",
        "\n",
        "    outputs = [] # List to store the outputs of the model \n",
        "    labels = [] # List to store the true label \n",
        "\n",
        "    model.eval()\n",
        "    test_loss = 0.\n",
        "    test_error = 0.\n",
        "    #for batch_idx, (data, label) in enumerate(test_loader):\n",
        "    for idx, batch in enumerate(valid_loader):\n",
        "        #data, bag_label = batch['images'].cuda(), batch['label'].cuda()\n",
        "        img, bag_label, age, concentration  = batch['images'].cuda(), batch['label'].cuda(), batch['age'].cuda(), batch['concentration'].cuda()\n",
        "        x = [img, age, concentration]\n",
        "        loss, attention_weights = model.calculate_objective(x, bag_label)\n",
        "        test_loss += loss.data[0]\n",
        "        error, predicted_label = model.calculate_classification_error(x, bag_label)\n",
        "        test_error += error\n",
        "\n",
        "        outputs.append(predicted_label) # store it in outputs\n",
        "        labels.append(bag_label) \n",
        "\n",
        "    test_error /= len(valid_loader)\n",
        "    test_loss /= len(valid_loader)\n",
        "\n",
        "    total = len(labels)\n",
        "    outputs= np.asarray(outputs)\n",
        "    labels= np.asarray(labels)\n",
        "\n",
        "    correct += (outputs == labels).sum().item()\n",
        "\n",
        "    print('Test Set, Loss: {:.4f}, Test error: {:.4f}, Accuracy: {}\\n'.format(test_loss.cpu().numpy()[0], test_error,  100 * correct / total))\n",
        "\n",
        "    return test_loss.cpu().numpy()[0] , 100 * correct / total\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000,
          "referenced_widgets": [
            "cb6161c68f9743ab9390cf1a86549765",
            "1c0bd0e8ee334efa81656c456381d257",
            "d4aa57a608fb43768c73f1059be98dcd",
            "8e4c877289de46e59e2e3ef50cc0310e",
            "4edabdbd76284ced81b7809bb45039b2",
            "e535baf4f7ff43148c51d6b22dbda2b3",
            "c82d370fafb74795adb39ced7fbc1b51",
            "91be7719f0fc4ecca636ef957665aaf2",
            "edc189ca7d4f409bbe212b6a3fa92312",
            "95fc55f9fea24d0ea6299bfe7934b7d4",
            "a162454109cb4d209492b1a1fd109721",
            "d5ad135a77d44ef08772925f316ab35e",
            "69bf4fb9e4ca44e2988ea071855164d0",
            "71dbd6a75f9649d79b8d0590eec7ac01",
            "a11dc177e1b148ad9ddd75468188479e",
            "0dec0e0c20af405e94d693e8a8f3b567",
            "a4c5c722094a422280b2843b02aeafd7",
            "de3209de690146b7b3b6db7de2c76974",
            "8b3eced0c7224032915aedf6a9f19272",
            "17d3555066164d7b92b8f195f79ac435",
            "8813eb2f7c8e4ba68ad1d99c888bbf48",
            "e744f5e3c8a043718799d928b8b3a04b",
            "0eb87a91b7214823aeeef02e3f666f28",
            "9073c2ad1e1b4f918ca144ba844178bb",
            "dbbd84dbf6694d149d531449f0e2d2ac",
            "5174e8794676466e831b00652a9e088a",
            "46970ca418664243a13232dda7c10115",
            "687f4fb11a0f4c98aaa85c4de383cd9b",
            "76573da9c7434d47a4aa5f8768aab0e0",
            "778991979f94473c8121ff8a849abdfb",
            "d0a17e169c23424b9d7ca92a6610e126",
            "2352cec302f449549594ad7497de7646",
            "06533e27da1b454e81e1092510aeac05",
            "98389a39a4934170bd346a58c6b8525e",
            "0c3afa316b504bd29755c4395dde92a9",
            "ada9208e6bbc4a98a6776db68d559bf1",
            "0c63e2a67c444d998fdd528b75dc8e63",
            "933295f4100e45e5bc705201f40caea6",
            "9fad3f94dbae431ba5770c6c72c6f43e",
            "03b51fc2ff494a5aa7ecacbf5e6c028a",
            "130a9ff17c1549938d364b31da0c3c68",
            "dbc9c1eee8974da292206970d296bced",
            "82ac190a21634915ba0565edc5098e53",
            "a1f46feb033c472f88baa5ba2321fb72",
            "d319802f469d4fd093b957917d77ff89",
            "7b2987442e4d4bc5abeef90a0ec8f4d1",
            "24ce79fb58ed406aa940d88d8a7df0ca",
            "583e798a46a744609ea9ad4d06a6c92c",
            "9414dd59a8fa4a7394e50df0e81d14c8",
            "8d98490525634ad4afac3ddaa2be2dde",
            "69703346c9204f18b34ee44fa31414b5",
            "a99d5b280b904aea9be5f1c06c14deee",
            "021fa09fd1eb43b9a1f5074c68a72d4d",
            "94755fc72e324be9a82ece957454f9ca",
            "1550a84d017d48efabc75d09dc0fba71",
            "b0cd34026b244ab784d4ba84bf173538",
            "b2d20d620b704310a038126a45c4d1b5",
            "70ab7436c11840f59ee6548959679cf7",
            "93162871f3da45dc8810e500d07dede6",
            "60581bda95314b75984ad8ee3b64a325",
            "71601acca2a94b90a451e6237464a79c",
            "7d2dc083b31741c59fda93e8269cd60e",
            "6b4ea2d5d3a94ceabac49bae5dd8dfb1",
            "81faca7fdea64121b62050ce63193a1f",
            "1a8aa9c772b64d52bf874a55ab7699a5",
            "715b2507bb8845d4a798b799d1bff42a",
            "368379c4d8b74cdd9a1ff148b8e18008",
            "014c0f3a230c4dde96dd64945545222d",
            "234ddff2784a472da3ca3fca2b2e25f7",
            "2761c6f6dd24410ea07e375279d27635",
            "a37f881680824de098decefb4b4db936",
            "4aaea69f73b94c0b8566822115a7d089",
            "e19306b6a50146ac91f2e0d2c7375854",
            "dcb7500f52c24c2e85de2610c026ec72",
            "bbff8c6122044f19abbd3f70453818cd",
            "bf66f62fb03f42859292af8a8cabc15a",
            "dd4881ab32504343b92773dca5ab0251",
            "57b54e21e9ba4f9f9afc4be7bf4ce909",
            "509cc45e84a748bb9173fd0536f92880",
            "651e6d78139d4dfcb7fa2bc6273ee726",
            "9b62ee902afe4e1f844765a36609df9b",
            "809c7742c7de4fdc8ba77c38e9f5b01c",
            "6c1099be0d854907955186348b8896cd",
            "f9d52b5c0af2493380d2efba18eea72b",
            "1779821f6573481c871fffc98688f510",
            "0f3d16e0bc2d44718bd2763d0547c060",
            "c9b008542c544f18a80f65b902916d23",
            "cd382e92cb05480b9e1d169c2af1a8fd",
            "a89e6eb0185b426d95e10e0bcf9d0c00",
            "6373c9df846b4c859c81ab0b2a322670",
            "d84c659817cb4aabbc372a2778b3a9e1",
            "fbe44f93108b4fada19444e420cc7d17",
            "49a229facf9249a8980b9daf4e0c3ba8",
            "485b117650e0406caec37a61b76124bc",
            "2c1d40a5984e4e63942225e14f43e41b",
            "babfc943f22847219c0db08fcc75f2f0",
            "b8fe2d76c24f495db4d591b25586b6cd",
            "f0daeb6da6164882b679f65ccba095c6",
            "7565ef898d1a4627a55aa9a84291ab0c",
            "d129701273e047df90a7987b73053496",
            "f9ccaed800d44156b25d7dad3aaa0f3d",
            "a41d1eda9ce7415e9f01571b754841de",
            "be3cd7aa528a4e189764ae3ffb5dc7c5",
            "5bdf2b007b694b1492b0717abdb4545a",
            "f8601d7944fa4ff4803e7404acbce306",
            "259c607682654588970f2c68708a6d05",
            "f42fcc391cb74cfda066669cb224a6ef",
            "4a5d440baa2e4d158e3b05014cdca3e8",
            "0494214d797648acaaf6d79ca9797359",
            "99228d126ef543aa91f7783bf099e180",
            "d673082019ec40289a51770a155baec4",
            "7d97bb2f2a724d56bb9b35fa2f38bfa3"
          ]
        },
        "id": "cb1YK8_aj5Pr",
        "outputId": "deaa8226-0ef9-4615-c8f9-d94133107806"
      },
      "source": [
        "#optimizer = torch.optim.Adam(model.parameters(), lr=0.0005, betas=(0.9, 0.999),weight_decay=0.05)\n",
        "model = GatedAttention().cuda()\n",
        "for param in model.feature_extractor_part1.parameters():\n",
        "  param.requires_grad = False\n",
        "for param in model.feature_extractor_part1.fc.parameters():\n",
        "  param.requires_grad = True\n",
        "\n",
        "\n",
        "optimizer = torch.optim.Adam(model.parameters(), lr=0.00005, betas=(0.9, 0.999),weight_decay=0.000005)\n",
        "best_model = train(model,epoch=15)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "cb6161c68f9743ab9390cf1a86549765",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "HBox(children=(FloatProgress(value=0.0, max=122.0), HTML(value='')))"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 1, Loss: 0.5496, Train error: 0.3361, Accuracy: 66.39344262295081\n",
            "Test Set, Loss: 0.4600, Test error: 0.2195, Accuracy: 78.04878048780488\n",
            "\n",
            "model successfully savec\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "edc189ca7d4f409bbe212b6a3fa92312",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "HBox(children=(FloatProgress(value=0.0, max=122.0), HTML(value='')))"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 2, Loss: 0.5080, Train error: 0.3279, Accuracy: 67.21311475409836\n",
            "Test Set, Loss: 0.4681, Test error: 0.1951, Accuracy: 80.48780487804878\n",
            "\n",
            "model successfully savec\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "a4c5c722094a422280b2843b02aeafd7",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "HBox(children=(FloatProgress(value=0.0, max=122.0), HTML(value='')))"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 3, Loss: 0.4795, Train error: 0.2869, Accuracy: 71.31147540983606\n",
            "Test Set, Loss: 0.4609, Test error: 0.1707, Accuracy: 82.92682926829268\n",
            "\n",
            "model successfully savec\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "dbbd84dbf6694d149d531449f0e2d2ac",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "HBox(children=(FloatProgress(value=0.0, max=122.0), HTML(value='')))"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 4, Loss: 0.4576, Train error: 0.2459, Accuracy: 75.40983606557377\n",
            "Test Set, Loss: 0.6334, Test error: 0.5854, Accuracy: 41.46341463414634\n",
            "\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "06533e27da1b454e81e1092510aeac05",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "HBox(children=(FloatProgress(value=0.0, max=122.0), HTML(value='')))"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 5, Loss: 0.4420, Train error: 0.1557, Accuracy: 84.42622950819673\n",
            "Test Set, Loss: 0.4258, Test error: 0.1707, Accuracy: 82.92682926829268\n",
            "\n",
            "model successfully savec\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "130a9ff17c1549938d364b31da0c3c68",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "HBox(children=(FloatProgress(value=0.0, max=122.0), HTML(value='')))"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 6, Loss: 0.4263, Train error: 0.1557, Accuracy: 84.42622950819673\n",
            "Test Set, Loss: 0.4140, Test error: 0.1707, Accuracy: 82.92682926829268\n",
            "\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "9414dd59a8fa4a7394e50df0e81d14c8",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "HBox(children=(FloatProgress(value=0.0, max=122.0), HTML(value='')))"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 7, Loss: 0.4100, Train error: 0.1803, Accuracy: 81.9672131147541\n",
            "Test Set, Loss: 0.4627, Test error: 0.1463, Accuracy: 85.36585365853658\n",
            "\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "b2d20d620b704310a038126a45c4d1b5",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "HBox(children=(FloatProgress(value=0.0, max=122.0), HTML(value='')))"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 8, Loss: 0.3892, Train error: 0.1475, Accuracy: 85.24590163934427\n",
            "Test Set, Loss: 0.3830, Test error: 0.1707, Accuracy: 82.92682926829268\n",
            "\n",
            "model successfully savec\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "1a8aa9c772b64d52bf874a55ab7699a5",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "HBox(children=(FloatProgress(value=0.0, max=122.0), HTML(value='')))"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 9, Loss: 0.4014, Train error: 0.1393, Accuracy: 86.06557377049181\n",
            "Test Set, Loss: 0.4139, Test error: 0.1463, Accuracy: 85.36585365853658\n",
            "\n",
            "model successfully savec\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "e19306b6a50146ac91f2e0d2c7375854",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "HBox(children=(FloatProgress(value=0.0, max=122.0), HTML(value='')))"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 10, Loss: 0.3807, Train error: 0.1639, Accuracy: 83.60655737704919\n",
            "Test Set, Loss: 0.3990, Test error: 0.1463, Accuracy: 85.36585365853658\n",
            "\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "9b62ee902afe4e1f844765a36609df9b",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "HBox(children=(FloatProgress(value=0.0, max=122.0), HTML(value='')))"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 11, Loss: 0.3744, Train error: 0.1393, Accuracy: 86.06557377049181\n",
            "Test Set, Loss: 0.3784, Test error: 0.1463, Accuracy: 85.36585365853658\n",
            "\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "a89e6eb0185b426d95e10e0bcf9d0c00",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "HBox(children=(FloatProgress(value=0.0, max=122.0), HTML(value='')))"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 12, Loss: 0.3683, Train error: 0.1475, Accuracy: 85.24590163934427\n",
            "Test Set, Loss: 0.4234, Test error: 0.0976, Accuracy: 90.2439024390244\n",
            "\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "b8fe2d76c24f495db4d591b25586b6cd",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "HBox(children=(FloatProgress(value=0.0, max=122.0), HTML(value='')))"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 13, Loss: 0.3521, Train error: 0.1475, Accuracy: 85.24590163934427\n",
            "Test Set, Loss: 0.3771, Test error: 0.1463, Accuracy: 85.36585365853658\n",
            "\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "f8601d7944fa4ff4803e7404acbce306",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "HBox(children=(FloatProgress(value=0.0, max=122.0), HTML(value='')))"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 14, Loss: 0.3627, Train error: 0.1557, Accuracy: 84.42622950819673\n",
            "Test Set, Loss: 0.4222, Test error: 0.0976, Accuracy: 90.2439024390244\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000,
          "referenced_widgets": [
            "fdaf200d0f4d4e13bddd17de29c858a5",
            "3f9e219348f84ee2889eb66897786695",
            "de63b680b44e48cab436f0a05cc2c22f",
            "a15b38d75d4a4fe9b8d810daaa6ab5a6",
            "4a53266e942b4173813af88437661c32",
            "c99a0666f613408799e62189a293ef81",
            "63b2552c319b48e39d810412aacfe1a0",
            "5a3d5d304beb45b6abdedd0d43c61b87",
            "15f6fc81fae24f889ce9e070744f6230",
            "b17f964c7eb14866a7af556bd945b92e",
            "9371f3e82fb74bbaae951bf5ac475fab",
            "65327c4364744e10983690de3ea4da5e",
            "03d5952f86ff437ebacf1991631d0eb0",
            "63410999f61247b4b65b278eecfdf97a",
            "779c4b58571d4e73b2bd4b60638a0890",
            "2b5abc9a64cb4902904faddd31b0f578",
            "de18b79f2bc04308a3f44d3236396223",
            "a4d19ec295a645288efcec735deb63cf",
            "c529a3394ba24944995320e7f7e26038",
            "10f3687214d140a18837939279d6585c",
            "76d4c91608ea4f0ba3d9b346143ac1ab",
            "7087952b4a7b4adb909e19c4c28a5241",
            "541878def9064358b1d66d3b205291dd",
            "14f0973989aa41a9ac1c086f27ece32e",
            "877d2c7d9c784972af1571c936289d72",
            "0bf609a777514bbfac502b71748ba50a",
            "43d92c166f764c118388103ba30d0c7f",
            "133fe1d323c44d65b9d6eb669e891ccb",
            "090e0ae93565478d98eff8ca03ef66e9",
            "a3f256f21cae4016b340e7d3a1cdeb04",
            "4c68fbde45d849b78a578860548d197d",
            "b859069d51464221aabf4652eb7ecc69",
            "ca927f8dcc974d98a22fc08f378cdd0e",
            "4b2474280df04a23ae26ce15a3a04ce1",
            "4730fbeff6f3498ca7200f20f14cc446",
            "476fb21c2dfc4ef5a774eb1fa089caa2",
            "dfec18be58b349e2ab7213d72ef883f4",
            "eb69017c0fd34116a5bda8405c576091",
            "c6fe88fb4e3b47348769abbba9306023",
            "87cd8f965a024100bf84c61aa64fdbc7",
            "634052faba694eb9afb243984a3c92a5",
            "9924b2f75f8641c3a7397850c557e1e1",
            "64dccbba9e55448bbbf70577a3a00621",
            "ed5468f22b1640a3979055e845f9c312",
            "fffcace372954df4a29e3cdd086e9d29",
            "8af80cc7f799437887c7ba1ba6a73b91",
            "31e230df56e440c09b5e27b71325512d",
            "303dd4197dba492eb84e294ec6a1562a",
            "2cda34dcc6604b53966c4522e7194c63",
            "3ce38973755b462cb179e7276f6ceb92",
            "ce0b7d8c6266408789d06c0af26ea71c",
            "ab790fb611c84d53a66df07a9b3c145c",
            "3884808a2df142cfa0f4139e01f0becd",
            "85153c2a10614392bb1843bab849ac89",
            "0f0e62e09ed1469398f4634fadd34baf",
            "95095f2ccd8347a5bee4c611f64474b2",
            "00dd0bc2a2114901a1a27eec0c8c2228",
            "8e0c69dc02c54930bae74e4339122d85",
            "90e7166a9233480eaff7a6bbc50766b8",
            "8be85dfd38d9425d9792b6cf08c7304b",
            "e461d7ae484f40e9aa806ff19080b1f5",
            "54cf6a07f299488abb733aa1becb1ca0",
            "2303fbb2d35b485488c322848aa8f75f",
            "281a3817620a4d8d8bcfef7783c8ecdc",
            "76592b5eeb1641f9ba6c925556d0d20f",
            "68326556498a41aaaca4724b84c28673",
            "b3fb0a207d0c446ba513cee610241e55",
            "8dddb00c834748aca63de64deb1e0b32",
            "3b99fffab85c46ccb55a08d3e51726ff",
            "8e9d993f2dd341fd89af25f9830f3e93",
            "58dee101d08f4f3bb52e11128ab897f4",
            "c1908a4b213a41b8ae938e41a8eeb829",
            "2dcd0e7ddf544e7f9d9c6b4916b106b4",
            "e4399fde5cdc4ba5a835321329923470",
            "451802397f78455d8f2596edb09fef5b",
            "e9b010f24fdd4ff4942f7cdaef61ed06",
            "9d2115e3baaf4421a3af1be3e9def6ed",
            "ef44f24d767646ecb25e2c2c510886b3",
            "68bfad276b264727aff03108887dfea9",
            "2c0f83a85d8f4af780fca10812eeb037",
            "e6714516021c42ae856790ad99139ff2",
            "818a183ab0a84404a9844b8870b95847",
            "4078b7a6a5bb46a68ca866c1b1087ec3",
            "0cddb04ae12f4934aa46a50d506a213d",
            "54a0e1b263964b6c8d5dea70934358df",
            "36fd145d17344f0cb53bd8199aba0c4a",
            "2509c37ea8ea4148b5df477370adf962",
            "a44ec12c0b1a4b24a2eff89938912285",
            "9e30adfad0e84fe68f1064c8a25a53e4",
            "8f7bcbd93ea64116b7593d37b950e2ad",
            "cf53d3bf6dd147d2887dfb3eb3ef0f97",
            "230bacfef30149f981e172c567deb873",
            "833c7d0d32c34d868a73936bea585fe1",
            "c26fb402eaf04ed2afcc68d30e6c8e95",
            "9fb24c55bc8b45b9a5c86aced7a88f8b",
            "fe6693a9b3cf4ca783c089b8583b9f74",
            "180fc9094a4e41fa948e44b00958b75c",
            "cc1248028e954073b61f1a7df5ea1aea",
            "2b25cf9b985f42aa9f061ebb4cc0a2b6",
            "9ab062baa860459e81560328a2b6f2e0",
            "02c83308c4b140b98078cf0b3d021bc2",
            "939b3cd8da9f4cb190b67e4252a3d578",
            "8529ace51af84665a4a4e5e3968777db",
            "447326e4470a4425b17946a33a130f3f",
            "c43a65d2e03f47aa9f4f8955ddc6f37f",
            "b2863fb495044406bb65cd94dcaace2a",
            "33fa8327647d47edb12fc4f2a96a7540",
            "14625bbb269b44daaefce2131a23f43f",
            "583d7ca7c23c4747bf9c72197c416bc0",
            "a7a2955d29234b6480b3f604d1fd74c3",
            "95caa828633646bba8e75679674af8f6",
            "dab5d6cfddd34ddbbef9d07db7fd5e51"
          ]
        },
        "id": "Yg2G300zrVv9",
        "outputId": "c8c249ce-509b-4f15-943a-1e4f3c23f686"
      },
      "source": [
        "#optimizer = torch.optim.Adam(model.parameters(), lr=0.0005, betas=(0.9, 0.999),weight_decay=0.05)\n",
        "model = GatedAttention().cuda()\n",
        "for param in model.feature_extractor_part1.parameters():\n",
        "  param.requires_grad = False\n",
        "\n",
        "#lay_unfreeze = ['layer4','layer3']\n",
        "lay_unfreeze = ['layer4']\n",
        "for name, child in model.feature_extractor_part1.named_children():\n",
        "        if name in lay_unfreeze:\n",
        "          if(name =='layer3'):\n",
        "            list_bottleneck =[i for i in range(17,36)]\n",
        "            for n in range(0,36):\n",
        "              if(n>21):\n",
        "                for param in child[n].parameters():\n",
        "                  param.requires_grad=True\n",
        "              else :\n",
        "                for param in child[n].parameters():\n",
        "                  param.requires_grad=False\n",
        "              \n",
        "            \n",
        "          elif(name =='layer4') :\n",
        "              print(name + 'layer4 has been unfrozen.')\n",
        "              for param in child.parameters():\n",
        "                param.requires_grad = True\n",
        "        else:\n",
        "            for param in child.parameters():\n",
        "                param.requires_grad = False\n",
        "\n",
        "\n",
        "optimizer = torch.optim.Adam(model.parameters(), lr=0.00005, betas=(0.9, 0.999),weight_decay=0.000005)\n",
        "best_model = train(model,epoch=15)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "layer4layer4 has been unfrozen.\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "fdaf200d0f4d4e13bddd17de29c858a5",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "HBox(children=(FloatProgress(value=0.0, max=122.0), HTML(value='')))"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 1, Loss: 0.6028, Train error: 0.3525, Accuracy: 64.75409836065573\n",
            "Test Set, Loss: 0.5198, Test error: 0.2195, Accuracy: 78.04878048780488\n",
            "\n",
            "model successfully savec\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "15f6fc81fae24f889ce9e070744f6230",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "HBox(children=(FloatProgress(value=0.0, max=122.0), HTML(value='')))"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 2, Loss: 0.5217, Train error: 0.2787, Accuracy: 72.1311475409836\n",
            "Test Set, Loss: 0.4567, Test error: 0.2195, Accuracy: 78.04878048780488\n",
            "\n",
            "model successfully savec\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "de18b79f2bc04308a3f44d3236396223",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "HBox(children=(FloatProgress(value=0.0, max=122.0), HTML(value='')))"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 3, Loss: 0.4965, Train error: 0.3197, Accuracy: 68.0327868852459\n",
            "Test Set, Loss: 0.4865, Test error: 0.1707, Accuracy: 82.92682926829268\n",
            "\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "877d2c7d9c784972af1571c936289d72",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "HBox(children=(FloatProgress(value=0.0, max=122.0), HTML(value='')))"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 4, Loss: 0.4744, Train error: 0.3033, Accuracy: 69.67213114754098\n",
            "Test Set, Loss: 0.5741, Test error: 0.4146, Accuracy: 58.53658536585366\n",
            "\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "ca927f8dcc974d98a22fc08f378cdd0e",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "HBox(children=(FloatProgress(value=0.0, max=122.0), HTML(value='')))"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 5, Loss: 0.4514, Train error: 0.2049, Accuracy: 79.50819672131148\n",
            "Test Set, Loss: 0.4413, Test error: 0.1707, Accuracy: 82.92682926829268\n",
            "\n",
            "model successfully savec\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "634052faba694eb9afb243984a3c92a5",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "HBox(children=(FloatProgress(value=0.0, max=122.0), HTML(value='')))"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 6, Loss: 0.3247, Train error: 0.0820, Accuracy: 91.80327868852459\n",
            "Test Set, Loss: 0.4097, Test error: 0.2195, Accuracy: 78.04878048780488\n",
            "\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "2cda34dcc6604b53966c4522e7194c63",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "HBox(children=(FloatProgress(value=0.0, max=122.0), HTML(value='')))"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 7, Loss: 0.1075, Train error: 0.0246, Accuracy: 97.54098360655738\n",
            "Test Set, Loss: 0.6558, Test error: 0.2683, Accuracy: 73.17073170731707\n",
            "\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "00dd0bc2a2114901a1a27eec0c8c2228",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "HBox(children=(FloatProgress(value=0.0, max=122.0), HTML(value='')))"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 8, Loss: 0.0141, Train error: 0.0000, Accuracy: 100.0\n",
            "Test Set, Loss: 0.7853, Test error: 0.2195, Accuracy: 78.04878048780488\n",
            "\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "76592b5eeb1641f9ba6c925556d0d20f",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "HBox(children=(FloatProgress(value=0.0, max=122.0), HTML(value='')))"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 9, Loss: 0.0045, Train error: 0.0000, Accuracy: 100.0\n",
            "Test Set, Loss: 0.8127, Test error: 0.2195, Accuracy: 78.04878048780488\n",
            "\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "2dcd0e7ddf544e7f9d9c6b4916b106b4",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "HBox(children=(FloatProgress(value=0.0, max=122.0), HTML(value='')))"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 10, Loss: 0.0024, Train error: 0.0000, Accuracy: 100.0\n",
            "Test Set, Loss: 1.0276, Test error: 0.2195, Accuracy: 78.04878048780488\n",
            "\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "e6714516021c42ae856790ad99139ff2",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "HBox(children=(FloatProgress(value=0.0, max=122.0), HTML(value='')))"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 11, Loss: 0.0013, Train error: 0.0000, Accuracy: 100.0\n",
            "Test Set, Loss: 1.1829, Test error: 0.2195, Accuracy: 78.04878048780488\n",
            "\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "9e30adfad0e84fe68f1064c8a25a53e4",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "HBox(children=(FloatProgress(value=0.0, max=122.0), HTML(value='')))"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 12, Loss: 0.0009, Train error: 0.0000, Accuracy: 100.0\n",
            "Test Set, Loss: 1.2384, Test error: 0.2195, Accuracy: 78.04878048780488\n",
            "\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "180fc9094a4e41fa948e44b00958b75c",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "HBox(children=(FloatProgress(value=0.0, max=122.0), HTML(value='')))"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 13, Loss: 0.0008, Train error: 0.0000, Accuracy: 100.0\n",
            "Test Set, Loss: 1.1840, Test error: 0.2195, Accuracy: 78.04878048780488\n",
            "\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "c43a65d2e03f47aa9f4f8955ddc6f37f",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "HBox(children=(FloatProgress(value=0.0, max=122.0), HTML(value='')))"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 14, Loss: 0.0004, Train error: 0.0000, Accuracy: 100.0\n",
            "Test Set, Loss: 1.4204, Test error: 0.2195, Accuracy: 78.04878048780488\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "MxMB8QwNsSqL"
      },
      "source": [
        "import gc\n",
        "gc.collect()\n",
        "torch.cuda.empty_cache()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "11E5ouveskpE"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "jCo2ZdCA3MYp"
      },
      "source": [
        "def train_walk_around(train_loader, model, epochs, batch_size, criterion, optimizer):\n",
        "  best_model_wts = copy.deepcopy(model.state_dict())\n",
        "  best_acc_test = 0.0\n",
        "  best_acc_train = 0.0\n",
        "  best_loss_test = 100000000.0\n",
        "  best_loss_train = 100000000.0\n",
        "\n",
        "  training_loss = []\n",
        "  validation_loss = []\n",
        "  training_acc = []\n",
        "  validation_acc = []\n",
        "\n",
        "  for epoch_no in range(epochs):  \n",
        "\n",
        "    correct = 0\n",
        "    total = 0\n",
        "\n",
        "    model.train()\n",
        "    total_loss = 0\n",
        "    outputs_list = []\n",
        "    labels_list = []\n",
        "    outputs = [] # List to store the outputs of the model \n",
        "    labels = [] # List to store the true label \n",
        "    i = 0 # For incrementation\n",
        "    start_epoch = time.time()\n",
        "    for batch in tqdm(train_loader):\n",
        "\n",
        "        #img, label = batch['images'].cuda(), batch['label'].cuda() # Get the images and the label and transfer to GPU\n",
        "        img, label, age, concentration  = batch['images'].cuda(), batch['label'].cuda(), batch['age'].cuda(), batch['concentration'].cuda()\n",
        "        x = [img, age, concentration]\n",
        "        output = model(x) # Get the output of the model \n",
        "\n",
        "          loss, _ = model.calculate_objective(data, bag_label)\n",
        "          train_loss += loss.data[0]\n",
        "          error, output = model.calculate_classification_error(data, bag_label)\n",
        "          train_error += error\n",
        "\n",
        "        \n",
        "        outputs_list.append(torch.ge(output, 0.5).float().item())\n",
        "        #print(output)\n",
        "        outputs.append(output)\n",
        "        #outputs_list.append(output.item()) # store it in outputs\n",
        "        labels.append(label) # store it in labels\n",
        "        labels_list.append(label.item())\n",
        "        i += 1 # Incrementation\n",
        "\n",
        "        outputs = torch.cat(outputs, dim=0)\n",
        "        labels = torch.cat(labels, dim=0)\n",
        "        loss = criterion(output, labels)\n",
        "        loss.backward()\n",
        "        optimizer.step()\n",
        "        optimizer.zero_grad()\n",
        "\n",
        "        outputs = []\n",
        "        labels = []\n",
        "        i = 0\n",
        "\n",
        "    total_loss += loss.item()\n",
        "\n",
        "    total = len(labels_list)\n",
        "    outputs_list= np.asarray(outputs_list)\n",
        "    labels_list= np.asarray(labels_list)\n",
        "\n",
        "    correct += (outputs_list == labels_list).sum().item()\n",
        "\n",
        "    acc = 100 * correct / total\n",
        "\n",
        "    end_epoch = time.time()\n",
        "    time_epoch = end_epoch - start_epoch \n",
        "\n",
        "    print('\\nEpoch: {}, Loss: {:.4f}, Accuracy: {:.4f}, time: {}'.format(epoch_no, total_loss, acc,time_epoch))\n",
        "    #, train_error,  100 * correct / total))\n",
        "\n",
        "    training_loss.append(total_loss)\n",
        "    training_acc.append(acc)\n",
        "\n",
        "    test_loss , test_acc = test_model(model,criterion)\n",
        "\n",
        "    validation_loss.append(test_loss)\n",
        "    validation_acc.append(test_acc)\n",
        "\n",
        "    if test_loss < best_loss_test:\n",
        "      best_loss_test = test_loss\n",
        "      best_model_wts = copy.deepcopy(model.state_dict())\n",
        "      print(\"model successfully saved\")\n",
        "\n",
        "    \n",
        "\n",
        "  model.load_state_dict(best_model_wts)\n",
        "\n",
        "  training_dict = {'training_loss' : training_loss,\n",
        "                   'training_acc' : training_acc,\n",
        "                   'validation_loss' : validation_loss,\n",
        "                   'validation_acc' : validation_acc}\n",
        "\n",
        "  return model, training_dict\n",
        "\n",
        "\n",
        "def test_model(model,criterion):\n",
        "    start_test = time.time()\n",
        "    correct = 0\n",
        "    total = 0\n",
        "\n",
        "    outputs = [] # List to store the outputs of the model \n",
        "    labels = [] # List to store the true label \n",
        "\n",
        "    model.eval()\n",
        "    test_loss = 0.\n",
        "\n",
        "    #for batch_idx, (data, label) in enumerate(test_loader):\n",
        "    for idx, batch in enumerate(valid_loader):\n",
        "        data, bag_label, age, concentration  = batch['images'].cuda(), batch['label'].cuda(), batch['age'].cuda(), batch['concentration'].cuda()\n",
        "        x = [data, age, concentration]\n",
        "        predicted = model(x)\n",
        "        loss = criterion(predicted,bag_label)\n",
        "        test_loss += loss.item()\n",
        "\n",
        "        outputs.append(torch.ge(predicted, 0.5).float().item()) # store it in outputs\n",
        "        labels.append(bag_label.item()) \n",
        "\n",
        "    test_loss /= len(valid_loader)\n",
        "\n",
        "    total = len(labels)\n",
        "    outputs= np.asarray(outputs)\n",
        "    labels= np.asarray(labels)\n",
        "\n",
        "    correct += (outputs == labels).sum().item()\n",
        "\n",
        "    acc = 100 * correct / total\n",
        "\n",
        "    end_test = time.time()\n",
        "    test_time = end_test - start_test\n",
        "    print('Test Set, Loss: {:.4f}, Accuracy: {:.4f}, time: {}'.format(test_loss, acc, test_time))\n",
        "\n",
        "    return test_loss , acc\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "w8snxC_a3RN7"
      },
      "source": [
        "import torch\n",
        "import torch.nn as nn\n",
        "import torch.nn.functional as F\n",
        "\n",
        "from torchvision import models\n",
        "\n",
        "nn.Identity()\n",
        "\n",
        "class ResnetMIL(nn.Module):\n",
        "  def __init__(self):\n",
        "    super(ResnetMIL, self).__init__()\n",
        "\n",
        "    model_resnet = models.resnet152(pretrained=True)\n",
        "    num_ftrs = model_resnet.fc.in_features\n",
        "\n",
        "    model_resnet.fc = nn.Identity()\n",
        "    \"\"\"\n",
        "    model_resnet.fc = nn.Sequential(\n",
        "                                  nn.Linear(num_ftrs, 1024),\n",
        "                                  nn.ReLU()\n",
        "                                  )\n",
        "\n",
        "    \"\"\"\n",
        "\n",
        "    self.model = model_resnet\n",
        "\n",
        "    self.avgpool = nn.AdaptiveAvgPool1d(1)\n",
        "\n",
        "    self.classifier = nn.Sequential(\n",
        "                                  nn.Linear(2050, 512),\n",
        "                                  nn.ReLU(),\n",
        "                                  nn.Linear(512, 1),\n",
        "                                  nn.Sigmoid()\n",
        "                                )\n",
        "    \n",
        "\n",
        "  def forward(self, x):\n",
        "  #def forward(self, x):\n",
        "    #print(x.shape)\n",
        "    img = x[0]\n",
        "    age, concentration = x[1], x[2]\n",
        "    #print(img.shape)\n",
        "    x = self.model(img)\n",
        "    #print(x.shape)\n",
        "    x = torch.transpose(x, 0, 1)\n",
        "    #print(x.shape)\n",
        "    x = torch.unsqueeze(x,dim=0)\n",
        "    #print(x.shape)\n",
        "    x = self.avgpool(x)\n",
        "    #print(x.shape)\n",
        "    x = torch.squeeze(x,dim=-1)\n",
        "    #print(x.shape)\n",
        "    x = torch.cat([x,concentration,age],axis=-1)\n",
        "    #print(x.shape)\n",
        "    pred= self.classifier(x)\n",
        "    #print(pred)\n",
        "    \n",
        "    return pred"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IC859mid5KmI",
        "outputId": "c7fc2414-496b-4ea7-cdf4-aaed247c64c5"
      },
      "source": [
        "import gc \n",
        "gc.collect()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "6156"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 45
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000,
          "referenced_widgets": [
            "5325899bee0a4a60b4bfb984d2e767e1",
            "fbfc1ccdaa8b4ae0bcba0794d28650bd",
            "c386dbcb1a3144dab5ecb71a4374ea9b",
            "e8590e6446ea4ae2bef5a15db674ff23",
            "0daacdf56b77451980ad4fd8ce919b1c",
            "abacfcfbad2f4d4e9bfccd038fb5dc13",
            "4514808a00e84a0c862677770467fa23",
            "dcea3970194c4083ac5bd248e98b410f",
            "5c1634307b974243bb97db653342e846",
            "0cfe5d5a18fe40f5be5a34eb4f455c25",
            "060d9af496c8475eaf6f84443e1938ab",
            "de3c9384f25d4b7f878990f72dffe212",
            "47cd2877f9124afcb7e388cccc14cc22",
            "2265d8bbb9c24728917344a46c46d848",
            "4298e5992a0040d3ba5d88acef2385d3",
            "8d876c99d2d64966ad7a01cf199b3ae0",
            "8d2590c9ca82459a990dca2c45f2233f",
            "186ade56bc4749daa87d928d758687fb",
            "fe29bf9a61094a289a8b70a2d5b7977c",
            "f8d43b3149134d528768a6e085c3c210",
            "4d09e10559b146d8a65f57ff64eab93c",
            "098ef9b59c4b40b08b3add183ee89964",
            "4705888cd57b40dfa9a7dd018a96c5b2",
            "49446f18a2a94bb5b7e85201ac95f8d6",
            "05a58840925a49f0ac301f743d0c9c3f",
            "6fbb4bae8a6643edaf6bbd26e9d2265c",
            "7f592ae524d64527a34e68c79fdf4f61",
            "1302c0f4cce74b2d9a58d31606122b0e",
            "cca8971c749640809802fc6bec66881f",
            "fcafecb903d24b1f93f066857b18dd7d",
            "1eab987d3c6543f78729e5eb5ff7810e",
            "1f8fd35dd2bb468b90aa973e17ca2d88",
            "90f4bca129fa4b568418a944d973c391",
            "9c46738ca4fd44cbbac03129440937a9",
            "2acfc27d3b86412f84894832ddaf05f6",
            "01b7d489303e4747a49ae1d7d9544e84",
            "5ea145818f5f4cd7b95562ed7e0a85a7",
            "abe3fe2fb24a48f5a2848b7eb45ecd65",
            "aabee52fff0d4e48b491811799cc588d",
            "e760acbb06ad468ab4da2cc598b332f9",
            "582fc634f6d34e5bb9f597b7752b8a6b",
            "cd06d49a16ff4c3f80a7c32f0c3e6cde",
            "c98df39f457a4bd1b0720df64b9690f0",
            "3f403203abd04defae8887dfe4d18ca6",
            "0348f78ed56d4d5199764ce0d2012b0b",
            "a1cb59c7ddbf450badc5d75fb8d68896",
            "fc50b797efff4e8ca6077c29a44ef162",
            "6f471dc09b124b56a943f8627eea84a6",
            "c6119914861c4fcba45670128e4149cd",
            "2f453823d6d049c8a6b039c871b4a3f5",
            "ef59f54a43874749b0e2242f8e69d88d",
            "4e6a81008e494713919f8985a7ec5651",
            "0b7377cc96ac4d1d9bae967c7b967a0d",
            "5cf6ef16f08c4547b2043f8e9d9ce45c",
            "fbb2fb7ab05e499889c04516b34b9223",
            "1311ffa3b028430d8593d5434bf42bac",
            "239d3355af784bd6b5f6e6384f438b85",
            "79ff923aae94457e87a8c0e01a2712aa",
            "b5ca3e07fed84165bcec3111ea20510b",
            "f96ed2b8c9834ffc82c0a9fe280c0299",
            "9b25de6af39548d5bf7759e1eb718bcb",
            "929cf885538f476c95db4c3ad0c0b055",
            "8b4ba90b40ab48ccbe209f017ae24697",
            "3999cdcd7ec4469c8b7bc245de647388",
            "1d6107caa247456b96f58b92353d2be4",
            "f77d644eb65e4944abda280ba4b4314f",
            "f115f6b78af848d9a6a8adf09000b240",
            "0c0a0fbecd454dd5aff5738f95e3cb97",
            "f893fceb04924b6680cffc9c4dcb328f",
            "b9141fd5d2d44f91809f8915a58221ba",
            "8f652081a46e43709a7a4bf6ba4ba842",
            "1c910bc5cf2b4a47909a1c916d779d06",
            "515e1330a46843b4ad07804a9a1b22a0",
            "7f3ce96395a2433d9a38ff25bc7187f5",
            "866e8cd2336f415a9a7887a1f421b57e",
            "3937ca10556d4616876204f15794a5c7",
            "2e7803748890446a9d04d4f09f321780",
            "32b6387f5184489991c82ee796374f94",
            "10a21391cb1f40b8b311b0bbfbb1a798",
            "ce9e49948f584be5a2eec990488ecd70",
            "17be2e9f1b72417596b57499697cd508",
            "6fafed0611e34c1e95f8e381884b4ecb",
            "94f88f1307f74bd08ae4e80307e6f655",
            "6455e7cb1764472d9d04b2da03bceafa",
            "3a9430bac6d44540a18f1570202c71c8",
            "a7d92fe7ec5b48f5b830e4ac9657acff",
            "419fcc4118c14804b6edefafcfe3c79e",
            "02c41b595d3d4b449bc94d6b1d5695bf",
            "955ac6cb1af54229a777d9b0b288e1f9",
            "24982574e5ce4aab95364ae81be85e63",
            "19e736bf58444ab19e2ca3be359edea5",
            "efde2ff89655456abdc2f75cbd7eb40a",
            "91160b5eb93e48c4b8244159068bbe33",
            "683c1c7f5f4844b8b6a12a878b766d4b",
            "82229427558b430db6c416cc0abbdbf0",
            "b663f8e1824e456b944376b010801cfc",
            "50c31074cb394228ab92b91eaa7c71e2",
            "ee5d57929f7c443ba8dc6d764738d24c",
            "2da00e2b49764384a404d5323ce366f1",
            "c4e2828c7d3748dda6c6156c7e31e562",
            "d22158e5fa724a6f84c875642a1347ac",
            "e1d0dabcd9f54ab0aa80e6c920329884",
            "9b8ea8ad34b549c69fa8eac8d71cbc80",
            "e1c067c8c2eb4d90bac089ceb6044166",
            "4cb5665d0fd9465896e1a434caa41834",
            "2ad26efe35534dce840262de78b11d7d",
            "f1bc4b3458434ba89aafbbd0ba7f19e8",
            "8d417ad6f92b4bff99068ac04394f1cf",
            "2a015e3a67664010bc46bdf633dd12d3",
            "13ed8fd3f1a840279e70ab62752298cb",
            "37fab2807e164da78b095cd1ef0cdcb4",
            "432b42b030f74f2e8fb3e747a2090f05",
            "f0740f03b4d44487aa8bbef91adbd73d",
            "0f431a1fcf804e38877cd0f135c8f4dd",
            "9252c6ebb769405cb95c293a38e6747f",
            "3e41bbc2e7804de3a0867a3a09a06def",
            "db314d00bddf43b2b12b1749b285192e",
            "e64ff0943e724731aaca3a5bfcc03c24",
            "5c4ab401d2a74fc2b96438fd78eb3363",
            "24a02883cc3c493fa679e56b65402aa8",
            "9a8f49bd5d624225bbbe73153fe3534b",
            "4b2cffe5f51a4bd6933a2463acf3aac9",
            "8f24489525a843e89cdf2acc8d660f3e",
            "d17268eca5464a6f95c26029d566a500",
            "fc73fe469b3d4503a817e9cb267b268e",
            "83bbb70ac3a84ba18887513b064de0fa",
            "50ada840e39a420892736e7b9945e620",
            "cca0f7b474554beabe43d6ed5a0e9978",
            "eb01b01507a2487e86ef9d62d0d8876a",
            "5bb4d7ff89bc4307a68cbaa4956c41f0",
            "64e51eab8e1b428d96102df93d3a6df1",
            "3e78ba41cc824e4895dd50b99045ed53",
            "ab743f6d1e5b496db0f1ab4f23db0de9",
            "d48ab93fe7bb4753b3a1b30ade783f36",
            "d0889d730b6f44fe98de8f3b7bd6da93",
            "92a2b179681e4bc4a68e2702e524c053",
            "6231b8421edb4457aa4a350a303f71b7",
            "a2001bf4b5124bd0ab337d77e5bd351c",
            "cffb04402e6746a887ad8af691102df2",
            "d9adcd55a3c744d38b4c28dea81ae512",
            "89b4e5b9f8194a36b140148434a0849b",
            "97ee7d72afa548e9988822bea0d3505f",
            "31d5bd35e1224aefa39b8ce20c4e52af",
            "bab8109d3fb84c80a187a2a3d51f0782",
            "72a3c221c9784817a35069edb416329c",
            "3d7eb43cf24944f9a1bd50af6983eef2",
            "c02e67bdff66495cbd391b8cc0309823",
            "315298ea674c4cf19f28d183f5c0248a",
            "385068a8372b4b139f0a636207b4e5c6",
            "8b3c2c712b2c4429a35bc890705473d2",
            "f143bd0a6c7c4c1e9b7d4615b588b952",
            "6a59347c11fd4163b6407bac26ac917c",
            "681767ac2aab418289f9a233e92493d0",
            "bd69ab8d43094f4592ef4ce9c307eaad",
            "4b94b3f9a2a34dfb89c897e111804a0d",
            "93d230af1405447f8cbcefa6135501d1",
            "476b336423984400a39ef19b19e88e41",
            "907114f44a3e479e83512f6dc2358b07",
            "b8de3f7993234c158ed3a07498a16ee3",
            "b577c90cea5149e9adde7538669de22f",
            "c3ce450bef9c41e39570d7038e54c7c9",
            "4a018afa908d4cf0a22a83c0857aa636",
            "c2d3f45be8b34d969cd51188fcf20039",
            "99ba27638f894eae8ab2399afbaf8622",
            "2e95d3f14d0745b4ae8518d803ae1514",
            "0ceefba161e34d1aa6ecb927ce01e623",
            "46ee81faf5a3460c9a262529a5fdd384",
            "1fafb3379fd24874906e62381335b525",
            "1c6c5e071845477ca1e69c6e87fd18cd",
            "b9c3ba918a5c49cdbb801e846c9be4fa",
            "50deef9ace7c4b31bf571baf40f03e81",
            "b976d6abb40944729dacd6c7224af437",
            "c598d073398743c9ad1c71e5002151e7",
            "aa06fcf5481446918631780b8a445ee0",
            "904da6624c9d458194f111d0f2ed6897",
            "3f0af9984dc9460d9ecae0cb08617706",
            "152af172e8a447cea71db59bba7afa2d",
            "1c28b8ba0f9942bc892b83cc7e47f745",
            "a67969ddc6374c4eb52e5a9b66266ecd",
            "523291fbc691411eb0f418d8c21495a8",
            "c3359ee9648a4a22b70154283964e70b",
            "8465b4fc0590494785c338e6cbaaec1a",
            "46872b41d0e44f5f919f942e67b016ec",
            "7be7c0240087430cb648b8e7c0f1b040",
            "ecb16f65f55942a8a7603667724eb871",
            "e932a511327347108adc9e54f0a29e9a",
            "9ec998fbbd154f578b3e061b0f6dd9ad",
            "9a32a6a34a2f4090abfcb2e499b2222b",
            "3ee8cf42f777456b9c64cf464bfa1c98",
            "5156fa25d3a64aa7a16fffcb7933de2b",
            "2ea1d52d196b455d93b2f47e4b531f34",
            "0bec2ea8f4d447249365e1649f1cc59f",
            "b678ccc2b4f0470a9fbe4d058b66e989",
            "97a1c765027041d3b6d5a77c0b20e0fe",
            "71aaa4cea13f4ae792c4837a59da4643",
            "dbcc3ee0a1b146af82dbc10723eebe4d",
            "a1d92f03abef4150a6f5ec20d5cc6c4d",
            "02c7955502d54c0faf2191e8e426845a",
            "0080494346544177aeb7dd4e6f3dd16f",
            "f96d248bd96048d78339aceb2168dc57",
            "1afba5a03bc545c78dc85d7fd60d4af2",
            "0db08c726b7343a9a47a15a4d3d416e2",
            "6a857028650643fb9e5912dcd6eafa6a",
            "10c926ef30624f619ecb33e23d81b0a8",
            "a1e2a82547c744d1a7bdb1c0132f8f30",
            "b9ebdabaffcc4934958b92c5b14f3831",
            "464caed6d90d496a8b4d2f9a9fd738b2",
            "8c9c37c46b2746368d14b955ec81c9f6",
            "17a7f1c7df534abdb36a90c500ef854f",
            "668419a5f3ba4cd7b8f77baf45dedda0",
            "ce8a1c1dcff2427a921fa4ccd2166bba",
            "c860041177f146718198b90ed4db122e",
            "f1c38d12a6384ea0a3b2c44f162014bc",
            "d3a9c12a100b41288dde8e4f4ba69add",
            "8e18485a46704019803d6671533f5f02",
            "396620bfbca6472a9512b64e69f9cea1",
            "2585a6969126469787581ee4fc5ed965",
            "9b65fe04c5c54186ba27b23c9216b409",
            "a5feca3c862f44cfbb23733927dba697",
            "0aee513b54724884bf1f661f5cd940c9",
            "3c99f4a454684b2e808bb47b273ad64f",
            "7e207bb576774f0c820974c64f26cbf0",
            "fca3a970b53b4e40b015e985f277be59",
            "7260c283caa74c4bbad32323ee64fd27",
            "f70c017c0c4144a08dc1cea28851cd9f",
            "1915ec79cce648a480b9714ff0350790",
            "8ec0f5f219d54860aa8e78dadb68c333",
            "3ae574fe801d4a8c89508b3bb9280b67",
            "e097c6defadc45efa2aefa37d8222bc3",
            "578e231b3c4343888bb0f4a8d8a7ebc4",
            "4458ee112bce43ff9a43278787bef1f5",
            "89053ab068984b3b898b35ccbdd492f4",
            "0b142ab184ce4a28ac1687cc3d00abbe",
            "5da4637f57744c368c294e5baecc84b3",
            "a21a0fba91b641f4a4dc25e6eb66761f",
            "753ea699d6ec468f842179aa114d4e44",
            "eab96765675240f58b6fe5d3687dbf22",
            "97df106be5564327a5775ff2d8e36d25",
            "6f8c71fae2e8441ca2b7f119f6545933",
            "c64eb74102f94f6a9c2c5afbcf6adcc4"
          ]
        },
        "id": "PSEWWI9w44FS",
        "outputId": "11641b2a-713a-4eae-f5ec-7b7da02224ed"
      },
      "source": [
        "criterion = nn.BCELoss()\n",
        "\n",
        "model = ResnetMIL().cuda()\n",
        "for param in model.model.parameters():\n",
        "  param.requires_grad = False\n",
        "for param in model.model.fc.parameters():\n",
        "  param.requires_grad = True\n",
        "\n",
        "optimizer = torch.optim.Adam(model.parameters(), lr=0.00005, betas=(0.9, 0.999))\n",
        "\n",
        "model , training_dict = train_walk_around(train_loader, model= model, epochs= 30, batch_size= 1, criterion= criterion, optimizer= optimizer)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "5325899bee0a4a60b4bfb984d2e767e1",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "HBox(children=(FloatProgress(value=0.0, max=122.0), HTML(value='')))"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n",
            "\n",
            "Epoch: 0, Loss: 0.9631, Accuracy: 70.4918, time: 27.887975692749023\n",
            "Test Set, Loss: 0.4992, Accuracy: 78.0488, time: 8.799433946609497\n",
            "model successfully saved\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "5c1634307b974243bb97db653342e846",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "HBox(children=(FloatProgress(value=0.0, max=122.0), HTML(value='')))"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n",
            "\n",
            "Epoch: 1, Loss: 0.7311, Accuracy: 71.3115, time: 28.32240128517151\n",
            "Test Set, Loss: 0.6389, Accuracy: 41.4634, time: 8.796443223953247\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "8d2590c9ca82459a990dca2c45f2233f",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "HBox(children=(FloatProgress(value=0.0, max=122.0), HTML(value='')))"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n",
            "\n",
            "Epoch: 2, Loss: 0.4661, Accuracy: 70.4918, time: 28.401625633239746\n",
            "Test Set, Loss: 0.5540, Accuracy: 70.7317, time: 8.857664823532104\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "05a58840925a49f0ac301f743d0c9c3f",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "HBox(children=(FloatProgress(value=0.0, max=122.0), HTML(value='')))"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n",
            "\n",
            "Epoch: 3, Loss: 0.5676, Accuracy: 78.6885, time: 28.230671644210815\n",
            "Test Set, Loss: 0.6297, Accuracy: 41.4634, time: 8.564157247543335\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "90f4bca129fa4b568418a944d973c391",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "HBox(children=(FloatProgress(value=0.0, max=122.0), HTML(value='')))"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n",
            "\n",
            "Epoch: 4, Loss: 0.0908, Accuracy: 81.9672, time: 28.349104642868042\n",
            "Test Set, Loss: 0.4464, Accuracy: 85.3659, time: 8.779212474822998\n",
            "model successfully saved\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "582fc634f6d34e5bb9f597b7752b8a6b",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "HBox(children=(FloatProgress(value=0.0, max=122.0), HTML(value='')))"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n",
            "\n",
            "Epoch: 5, Loss: 0.5222, Accuracy: 81.9672, time: 28.189863443374634\n",
            "Test Set, Loss: 0.4463, Accuracy: 85.3659, time: 8.877561330795288\n",
            "model successfully saved\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "c6119914861c4fcba45670128e4149cd",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "HBox(children=(FloatProgress(value=0.0, max=122.0), HTML(value='')))"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n",
            "\n",
            "Epoch: 6, Loss: 0.4706, Accuracy: 81.1475, time: 28.564263343811035\n",
            "Test Set, Loss: 0.4564, Accuracy: 82.9268, time: 8.996461868286133\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "239d3355af784bd6b5f6e6384f438b85",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "HBox(children=(FloatProgress(value=0.0, max=122.0), HTML(value='')))"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n",
            "\n",
            "Epoch: 7, Loss: 0.0001, Accuracy: 86.0656, time: 28.31150531768799\n",
            "Test Set, Loss: 0.4546, Accuracy: 87.8049, time: 8.909503698348999\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "1d6107caa247456b96f58b92353d2be4",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "HBox(children=(FloatProgress(value=0.0, max=122.0), HTML(value='')))"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n",
            "\n",
            "Epoch: 8, Loss: 0.9466, Accuracy: 83.6066, time: 28.514071464538574\n",
            "Test Set, Loss: 0.3805, Accuracy: 82.9268, time: 8.8919095993042\n",
            "model successfully saved\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "515e1330a46843b4ad07804a9a1b22a0",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "HBox(children=(FloatProgress(value=0.0, max=122.0), HTML(value='')))"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n",
            "\n",
            "Epoch: 9, Loss: 0.2828, Accuracy: 80.3279, time: 28.389548540115356\n",
            "Test Set, Loss: 0.4347, Accuracy: 90.2439, time: 8.968965530395508\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "17be2e9f1b72417596b57499697cd508",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "HBox(children=(FloatProgress(value=0.0, max=122.0), HTML(value='')))"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n",
            "\n",
            "Epoch: 10, Loss: 0.7090, Accuracy: 86.0656, time: 28.597952842712402\n",
            "Test Set, Loss: 0.4913, Accuracy: 73.1707, time: 8.772157430648804\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "955ac6cb1af54229a777d9b0b288e1f9",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "HBox(children=(FloatProgress(value=0.0, max=122.0), HTML(value='')))"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n",
            "\n",
            "Epoch: 11, Loss: 0.0706, Accuracy: 86.0656, time: 28.413875579833984\n",
            "Test Set, Loss: 0.4408, Accuracy: 90.2439, time: 8.854854822158813\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "50c31074cb394228ab92b91eaa7c71e2",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "HBox(children=(FloatProgress(value=0.0, max=122.0), HTML(value='')))"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n",
            "\n",
            "Epoch: 12, Loss: 2.1939, Accuracy: 85.2459, time: 28.16196084022522\n",
            "Test Set, Loss: 0.6300, Accuracy: 51.2195, time: 8.824666738510132\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "4cb5665d0fd9465896e1a434caa41834",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "HBox(children=(FloatProgress(value=0.0, max=122.0), HTML(value='')))"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n",
            "\n",
            "Epoch: 13, Loss: 0.0000, Accuracy: 82.7869, time: 28.1700336933136\n",
            "Test Set, Loss: 0.3722, Accuracy: 85.3659, time: 8.81350588798523\n",
            "model successfully saved\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "f0740f03b4d44487aa8bbef91adbd73d",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "HBox(children=(FloatProgress(value=0.0, max=122.0), HTML(value='')))"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n",
            "\n",
            "Epoch: 14, Loss: 0.2906, Accuracy: 83.6066, time: 28.70347285270691\n",
            "Test Set, Loss: 0.3843, Accuracy: 85.3659, time: 8.790928363800049\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "9a8f49bd5d624225bbbe73153fe3534b",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "HBox(children=(FloatProgress(value=0.0, max=122.0), HTML(value='')))"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n",
            "\n",
            "Epoch: 15, Loss: 0.2573, Accuracy: 86.8852, time: 28.079533576965332\n",
            "Test Set, Loss: 0.4534, Accuracy: 75.6098, time: 8.922223806381226\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "eb01b01507a2487e86ef9d62d0d8876a",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "HBox(children=(FloatProgress(value=0.0, max=122.0), HTML(value='')))"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n",
            "\n",
            "Epoch: 16, Loss: 0.0010, Accuracy: 86.8852, time: 28.21888303756714\n",
            "Test Set, Loss: 0.3715, Accuracy: 85.3659, time: 8.748274564743042\n",
            "model successfully saved\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "6231b8421edb4457aa4a350a303f71b7",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "HBox(children=(FloatProgress(value=0.0, max=122.0), HTML(value='')))"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n",
            "\n",
            "Epoch: 17, Loss: 0.3105, Accuracy: 85.2459, time: 28.386194229125977\n",
            "Test Set, Loss: 0.4050, Accuracy: 90.2439, time: 8.881768465042114\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "72a3c221c9784817a35069edb416329c",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "HBox(children=(FloatProgress(value=0.0, max=122.0), HTML(value='')))"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n",
            "\n",
            "Epoch: 18, Loss: 0.1921, Accuracy: 86.0656, time: 28.516591787338257\n",
            "Test Set, Loss: 0.4243, Accuracy: 85.3659, time: 9.038602590560913\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "681767ac2aab418289f9a233e92493d0",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "HBox(children=(FloatProgress(value=0.0, max=122.0), HTML(value='')))"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n",
            "\n",
            "Epoch: 19, Loss: 0.0000, Accuracy: 83.6066, time: 28.41669273376465\n",
            "Test Set, Loss: 0.3469, Accuracy: 85.3659, time: 8.567193269729614\n",
            "model successfully saved\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "c3ce450bef9c41e39570d7038e54c7c9",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "HBox(children=(FloatProgress(value=0.0, max=122.0), HTML(value='')))"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n",
            "\n",
            "Epoch: 20, Loss: 0.0607, Accuracy: 86.0656, time: 28.396910429000854\n",
            "Test Set, Loss: 0.3498, Accuracy: 85.3659, time: 8.802709817886353\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "1c6c5e071845477ca1e69c6e87fd18cd",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "HBox(children=(FloatProgress(value=0.0, max=122.0), HTML(value='')))"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n",
            "\n",
            "Epoch: 21, Loss: 0.0860, Accuracy: 85.2459, time: 28.18030333518982\n",
            "Test Set, Loss: 0.3476, Accuracy: 85.3659, time: 8.792301893234253\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "152af172e8a447cea71db59bba7afa2d",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "HBox(children=(FloatProgress(value=0.0, max=122.0), HTML(value='')))"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n",
            "\n",
            "Epoch: 22, Loss: 0.1978, Accuracy: 86.0656, time: 28.43883514404297\n",
            "Test Set, Loss: 0.3695, Accuracy: 87.8049, time: 8.825109004974365\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "ecb16f65f55942a8a7603667724eb871",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "HBox(children=(FloatProgress(value=0.0, max=122.0), HTML(value='')))"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n",
            "\n",
            "Epoch: 23, Loss: 0.0097, Accuracy: 86.0656, time: 28.36746621131897\n",
            "Test Set, Loss: 0.3678, Accuracy: 87.8049, time: 8.884047269821167\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "b678ccc2b4f0470a9fbe4d058b66e989",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "HBox(children=(FloatProgress(value=0.0, max=122.0), HTML(value='')))"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n",
            "\n",
            "Epoch: 24, Loss: 0.0000, Accuracy: 85.2459, time: 28.24953269958496\n",
            "Test Set, Loss: 0.3817, Accuracy: 90.2439, time: 8.70820951461792\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "1afba5a03bc545c78dc85d7fd60d4af2",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "HBox(children=(FloatProgress(value=0.0, max=122.0), HTML(value='')))"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n",
            "\n",
            "Epoch: 25, Loss: 0.0111, Accuracy: 81.1475, time: 27.931153297424316\n",
            "Test Set, Loss: 0.4131, Accuracy: 80.4878, time: 8.783260822296143\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "17a7f1c7df534abdb36a90c500ef854f",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "HBox(children=(FloatProgress(value=0.0, max=122.0), HTML(value='')))"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n",
            "\n",
            "Epoch: 26, Loss: 0.4453, Accuracy: 85.2459, time: 27.79913854598999\n",
            "Test Set, Loss: 0.3954, Accuracy: 90.2439, time: 8.839527368545532\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "2585a6969126469787581ee4fc5ed965",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "HBox(children=(FloatProgress(value=0.0, max=122.0), HTML(value='')))"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n",
            "\n",
            "Epoch: 27, Loss: 0.1465, Accuracy: 86.0656, time: 27.927634477615356\n",
            "Test Set, Loss: 0.3479, Accuracy: 85.3659, time: 8.91157841682434\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "f70c017c0c4144a08dc1cea28851cd9f",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "HBox(children=(FloatProgress(value=0.0, max=122.0), HTML(value='')))"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n",
            "\n",
            "Epoch: 28, Loss: 0.0497, Accuracy: 84.4262, time: 28.291115045547485\n",
            "Test Set, Loss: 0.3290, Accuracy: 85.3659, time: 8.858349800109863\n",
            "model successfully saved\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "0b142ab184ce4a28ac1687cc3d00abbe",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "HBox(children=(FloatProgress(value=0.0, max=122.0), HTML(value='')))"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n",
            "\n",
            "Epoch: 29, Loss: 0.0000, Accuracy: 85.2459, time: 28.00999355316162\n",
            "Test Set, Loss: 0.3195, Accuracy: 85.3659, time: 8.85415244102478\n",
            "model successfully saved\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ou8Ucn5E4RLe"
      },
      "source": [
        "##Training curves"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "8CTAjzxlDeIn"
      },
      "source": [
        "idx_min_loss = validation_loss.index(min(validation_loss))\n",
        "min_loss = min(validation_loss)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "D2rdjfWz4Tv1",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 513
        },
        "outputId": "5545c14b-f860-42f4-a701-59fe58f5a8f0"
      },
      "source": [
        "training_loss = training_dict['training_loss']\n",
        "training_acc = training_dict['training_acc']\n",
        "validation_loss = training_dict['validation_loss']\n",
        "validation_acc = training_dict['validation_acc']\n",
        "\n",
        "plt.plot(training_loss)\n",
        "plt.plot(validation_loss)\n",
        "plt.scatter(idx_min_loss,min_loss,c='red')\n",
        "plt.legend(['train','validation','best_loss'])\n",
        "\n",
        "plt.show()\n",
        "\n",
        "plt.plot(training_acc)\n",
        "plt.plot(validation_acc)\n",
        "plt.scatter(idx_min_loss,validation_acc[idx_min_loss],c='red')\n",
        "plt.legend(['train','validation','saved_model'])\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "zDlkHYnZ4MJg"
      },
      "source": [
        "##Test set"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "i-MX14TIDiF_"
      },
      "source": [
        "orig = 'testset/'\n",
        "df_test = pd.read_csv(\"testset/testset_data.csv\")\n",
        "df_test.DOB = pd.to_datetime(df_test.DOB)\n",
        "df_test['AGE'] = pd.to_datetime('today').normalize() - pd.to_datetime(df_test.DOB)\n",
        "df_test.AGE = df_test.AGE.astype(\"timedelta64[Y]\")\n",
        "\n",
        "data_test = return_data(df_test.set_index(['ID']), df_test.ID.to_list())\n",
        "\n",
        "img_list, ages,  concentration, labels = data_test['indice'], data_test['age'], data_test['concentration'], data_test['label']\n",
        "test = LymphoDataset(orig, img_list, ages, concentration, labels, get_transform(False))\n",
        "test_loader = torch.utils.data.DataLoader(\n",
        "    test, batch_size=1, shuffle=True, num_workers=8, collate_fn=custom_fn)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Gx8UnuuSDiGP"
      },
      "source": [
        "def submission(model):\n",
        "  ID = []\n",
        "  outputs = []\n",
        "  model.eval()\n",
        "\n",
        "  for idx, batch in enumerate(test_loader):\n",
        "    data, name, bag_label, age, concentration = batch['images'].cuda(), batch['name'] , batch['label'].cuda(), batch['age'].cuda(), batch['concentration'].cuda()\n",
        "    ID.append(name[0])\n",
        "    x = [data, age, concentration]\n",
        "    predicted_prob, predicted_label, _ = model(x)\n",
        "    #print(predicted_label.item())\n",
        "    outputs.append(predicted_label.int().item())\n",
        "\n",
        "  df = pd.DataFrame({'Id': ID,'Predicted':outputs})\n",
        "  return df"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "AYkvdekjDiGP"
      },
      "source": [
        "df = submission(best_model)\n",
        "df.to_csv('AttentionMIL0.csv',index=False)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "J6cKleBfFudb"
      },
      "source": [
        "##Cross validation"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "dfQbsEAkGCfp"
      },
      "source": [
        "class LymphoDataset(torch.utils.data.Dataset):\n",
        "    def __init__(self, orig, img_list, ages, concentration, labels, transforms=None):\n",
        "        self.transforms = transforms\n",
        "        self.img_list = img_list\n",
        "        self.img_dict = {idx: {'paths': [orig + name + '/' + img_name for img_name in os.listdir(orig + name)],\n",
        "                               'age': ages[idx],\n",
        "                               'concentration': concentration[idx],\n",
        "                               'label': labels[idx],\n",
        "                               'name': name} for idx, name in enumerate(img_list)}\n",
        "\n",
        "    def load_image(self, path):\n",
        "        image = imageio.imread(path)\n",
        "        return image\n",
        "\n",
        "\n",
        "    def __getitem__(self, image_id):   \n",
        "        images = [self.load_image(path) for path in self.img_dict[image_id]['paths']]\n",
        "        label = self.img_dict[image_id]['label']\n",
        "        age = self.img_dict[image_id]['age']\n",
        "        concentration = self.img_dict[image_id]['concentration']\n",
        "        name = self.img_dict[image_id]['name']\n",
        "\n",
        "        # Convert everything to tensor\n",
        "        concentration = torch.tensor([concentration], dtype=torch.float32)\n",
        "        age = torch.as_tensor([age], dtype=torch.float32)\n",
        "        label = torch.as_tensor([label], dtype=torch.float32)\n",
        "\n",
        "        if self.transforms:\n",
        "            images = torch.cat([self.transforms(image)[None, :, :, :] for image in images], axis=0)\n",
        "        \n",
        "        data = {\"age\": age,\n",
        "                \"concentration\": concentration,\n",
        "                \"images\": images,\n",
        "                \"label\": label,\n",
        "                \"name\": name}\n",
        "        return data\n",
        "\n",
        "    def __len__(self):\n",
        "        return len(self.img_list)\n",
        "\n",
        "def get_transform(train):\n",
        "    transforms = []\n",
        "    # converts the image, a PIL image, into a PyTorch Tensor\n",
        "    transforms.append(T.ToPILImage())\n",
        "    transforms.append(T.Resize(224))\n",
        "    if train:\n",
        "      # You can add here some data augmentation :)\n",
        "      pass # Remove this if you add data augmentation\n",
        "    transforms.append(T.ToTensor())\n",
        "    return T.Compose(transforms)\n",
        "    \n",
        "def gen_list(key, batch):\n",
        "  if key == 'images':\n",
        "    return [d[key][:, :, :, :] for d in batch]\n",
        "  elif key =='name':\n",
        "    return [d[key] for d in batch]\n",
        "  else:\n",
        "    return [d[key][None, :] for d in batch]\n",
        "\n",
        "def custom_fn(batch):\n",
        "  elem = batch[0].keys()\n",
        "  return {key : torch.cat(gen_list(key, batch), axis=0) if key != 'name' else gen_list(key, batch) for key in elem}\n",
        "\n",
        "def return_data(df, indices):\n",
        "  ages = []\n",
        "  concentration = []\n",
        "  labels = []\n",
        "  for indice in indices:\n",
        "    age, conc, label = df.loc[indice, 'AGE'], df.loc[indice, 'LYMPH_COUNT'], df.loc[indice, 'LABEL']\n",
        "    ages.append(age)\n",
        "    concentration.append(conc)\n",
        "    labels.append(label)\n",
        "  return {'indice': indices, 'age': ages, 'concentration':concentration, 'label':labels}"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "sasFbwXcHhOQ"
      },
      "source": [
        "def train_walk_around(train_loader, model, epochs, batch_size, criterion, optimizer):\n",
        "  best_model_wts = copy.deepcopy(model.state_dict())\n",
        "  best_acc_test = 0.0\n",
        "  best_acc_train = 0.0\n",
        "  best_loss_test = 100000000.0\n",
        "  best_loss_train = 100000000.0\n",
        "\n",
        "  training_loss = []\n",
        "  validation_loss = []\n",
        "  training_acc = []\n",
        "  validation_acc = []\n",
        "\n",
        "  for epoch_no in range(epochs):  \n",
        "\n",
        "    correct = 0\n",
        "    total = 0\n",
        "\n",
        "    model.train()\n",
        "    total_loss = 0\n",
        "    outputs_list = []\n",
        "    labels_list = []\n",
        "    outputs = [] # List to store the outputs of the model \n",
        "    labels = [] # List to store the true label \n",
        "    i = 0 # For incrementation\n",
        "    start_epoch = time.time()\n",
        "    for batch in train_loader:\n",
        "\n",
        "        #img, label = batch['images'].cuda(), batch['label'].cuda() # Get the images and the label and transfer to GPU\n",
        "        img, label, age, concentration  = batch['images'].cuda(), batch['label'].cuda(), batch['age'].cuda(), batch['concentration'].cuda()\n",
        "        x = [img, age, concentration]\n",
        "        output = model(x) # Get the output of the model \n",
        "        outputs_list.append(torch.ge(output, 0.5).float().item())\n",
        "        #print(output)\n",
        "        outputs.append(output)\n",
        "        #outputs_list.append(output.item()) # store it in outputs\n",
        "        labels.append(label) # store it in labels\n",
        "        labels_list.append(label.item())\n",
        "        i += 1 # Incrementation\n",
        "\n",
        "        outputs = torch.cat(outputs, dim=0)\n",
        "        labels = torch.cat(labels, dim=0)\n",
        "        loss = criterion(output, labels)\n",
        "        loss.backward()\n",
        "        optimizer.step()\n",
        "        optimizer.zero_grad()\n",
        "\n",
        "        outputs = []\n",
        "        labels = []\n",
        "        i = 0\n",
        "\n",
        "    total_loss += loss.item()\n",
        "\n",
        "    total = len(labels_list)\n",
        "    outputs_list= np.asarray(outputs_list)\n",
        "    labels_list= np.asarray(labels_list)\n",
        "\n",
        "    correct += (outputs_list == labels_list).sum().item()\n",
        "\n",
        "    acc = 100 * correct / total\n",
        "\n",
        "    end_epoch = time.time()\n",
        "    time_epoch = end_epoch - start_epoch \n",
        "\n",
        "    print('\\nEpoch: {}, Loss: {:.4f}, Accuracy: {:.4f}, time: {}'.format(epoch_no, total_loss, acc,time_epoch))\n",
        "    #, train_error,  100 * correct / total))\n",
        "\n",
        "    training_loss.append(total_loss)\n",
        "    training_acc.append(acc)\n",
        "\n",
        "    test_loss , test_acc = test_model(model,criterion)\n",
        "\n",
        "    validation_loss.append(test_loss)\n",
        "    validation_acc.append(test_acc)\n",
        "\n",
        "    if test_loss < best_loss_test:\n",
        "      best_loss_test = test_loss\n",
        "      best_model_wts = copy.deepcopy(model.state_dict())\n",
        "      print(\"model successfully saved\")\n",
        "\n",
        "    \n",
        "\n",
        "  model.load_state_dict(best_model_wts)\n",
        "\n",
        "  training_dict = {'training_loss' : training_loss,\n",
        "                   'training_acc' : training_acc,\n",
        "                   'validation_loss' : validation_loss,\n",
        "                   'validation_acc' : validation_acc}\n",
        "\n",
        "  return model, training_dict\n",
        "\n",
        "\n",
        "def test_model(model,criterion):\n",
        "    start_test = time.time()\n",
        "    correct = 0\n",
        "    total = 0\n",
        "\n",
        "    outputs = [] # List to store the outputs of the model \n",
        "    labels = [] # List to store the true label \n",
        "\n",
        "    model.eval()\n",
        "    test_loss = 0.\n",
        "\n",
        "    #for batch_idx, (data, label) in enumerate(test_loader):\n",
        "    for idx, batch in enumerate(valid_loader):\n",
        "        data, bag_label, age, concentration  = batch['images'].cuda(), batch['label'].cuda(), batch['age'].cuda(), batch['concentration'].cuda()\n",
        "        x = [data, age, concentration]\n",
        "        predicted = model(x)\n",
        "        loss = criterion(predicted,bag_label)\n",
        "        test_loss += loss.item()\n",
        "\n",
        "        outputs.append(torch.ge(predicted, 0.5).float().item()) # store it in outputs\n",
        "        labels.append(bag_label.item()) \n",
        "\n",
        "    test_loss /= len(valid_loader)\n",
        "\n",
        "    total = len(labels)\n",
        "    outputs= np.asarray(outputs)\n",
        "    labels= np.asarray(labels)\n",
        "\n",
        "    correct += (outputs == labels).sum().item()\n",
        "\n",
        "    acc = 100 * correct / total\n",
        "\n",
        "    end_test = time.time()\n",
        "    test_time = end_test - start_test\n",
        "    print('Test Set, Loss: {:.4f}, Accuracy: {:.4f}, time: {}'.format(test_loss, acc, test_time))\n",
        "\n",
        "    return test_loss , acc\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "IM4vf6nmbBui"
      },
      "source": [
        "from torchvision import models\n",
        "import copy\n",
        "#optimizer = torch.optim.SGD(model_conv.fc.parameters(), lr=0.001, momentum=0.9)\n",
        "\n",
        "def train_attention(model,epoch):\n",
        "    best_model_wts = copy.deepcopy(model.state_dict())\n",
        "    best_acc_test = 0.0\n",
        "    best_acc_train = 0.0\n",
        "\n",
        "    for epoch_ in range(1,epoch):\n",
        "      correct = 0\n",
        "      total = 0\n",
        "      model.train()\n",
        "      train_loss = 0.\n",
        "      train_error = 0.\n",
        "      outputs = [] # List to store the outputs of the model \n",
        "      labels = [] # List to store the true label \n",
        "\n",
        "      #for batch_idx, (data, label) in enumerate(train_loader):\n",
        "      for batch in tqdm(train_loader):\n",
        "          img, bag_label, age, concentration  = batch['images'].cuda(), batch['label'].cuda(), batch['age'].cuda(), batch['concentration'].cuda()\n",
        "          x = [img, age, concentration]\n",
        "\n",
        "          optimizer.zero_grad()\n",
        "          # calculate loss and metrics\n",
        "          loss, _ = model.calculate_objective(x, bag_label)\n",
        "          train_loss += loss.data[0]\n",
        "          error, output = model.calculate_classification_error(x, bag_label)\n",
        "          train_error += error\n",
        "\n",
        "          outputs.append(output) # store it in outputs\n",
        "          labels.append(bag_label) \n",
        "          # backward pass\n",
        "          loss.backward()\n",
        "          # step\n",
        "          optimizer.step()\n",
        "\n",
        "      # calculate loss and error for epoch\n",
        "      train_loss /= len(train_loader)\n",
        "      train_error /= len(train_loader)\n",
        "\n",
        "\n",
        "      total = len(labels)\n",
        "      outputs= np.asarray(outputs)\n",
        "      labels= np.asarray(labels)\n",
        "\n",
        "      correct += (outputs == labels).sum().item()\n",
        "\n",
        "      acc = 100 * correct / total\n",
        "\n",
        "      print('Epoch: {}, Loss: {:.4f}, Train error: {:.4f}, Accuracy: {}'.format(epoch_, train_loss.cpu().numpy()[0], train_error, acc))\n",
        "\n",
        "      test_loss , test_acc = test()\n",
        "\n",
        "      if test_acc >= best_acc_test and acc > best_acc_train:\n",
        "        best_acc_test = test_acc\n",
        "        best_acc_train = acc\n",
        "        best_model_wts = copy.deepcopy(model.state_dict())\n",
        "        print(\"model successfully savec\")\n",
        "\n",
        "    model.load_state_dict(best_model_wts)\n",
        "\n",
        "    return model\n",
        "\n",
        "def test():\n",
        "    correct = 0\n",
        "    total = 0\n",
        "\n",
        "    outputs = [] # List to store the outputs of the model \n",
        "    labels = [] # List to store the true label \n",
        "\n",
        "    model.eval()\n",
        "    test_loss = 0.\n",
        "    test_error = 0.\n",
        "    #for batch_idx, (data, label) in enumerate(test_loader):\n",
        "    for idx, batch in enumerate(valid_loader):\n",
        "        #data, bag_label = batch['images'].cuda(), batch['label'].cuda()\n",
        "        img, bag_label, age, concentration  = batch['images'].cuda(), batch['label'].cuda(), batch['age'].cuda(), batch['concentration'].cuda()\n",
        "        x = [img, age, concentration]\n",
        "        loss, attention_weights = model.calculate_objective(x, bag_label)\n",
        "        test_loss += loss.data[0]\n",
        "        error, predicted_label = model.calculate_classification_error(x, bag_label)\n",
        "        test_error += error\n",
        "\n",
        "        outputs.append(predicted_label) # store it in outputs\n",
        "        labels.append(bag_label) \n",
        "\n",
        "    test_error /= len(valid_loader)\n",
        "    test_loss /= len(valid_loader)\n",
        "\n",
        "    total = len(labels)\n",
        "    outputs= np.asarray(outputs)\n",
        "    labels= np.asarray(labels)\n",
        "\n",
        "    correct += (outputs == labels).sum().item()\n",
        "\n",
        "    print('Test Set, Loss: {:.4f}, Test error: {:.4f}, Accuracy: {}\\n'.format(test_loss.cpu().numpy()[0], test_error,  100 * correct / total))\n",
        "\n",
        "    return test_loss.cpu().numpy()[0] , 100 * correct / total\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "mwDplyfZFbEg"
      },
      "source": [
        "from sklearn.model_selection import StratifiedKFold, KFold\n",
        "\n",
        "orig = '/content/trainset/'\n",
        "\n",
        "df = pd.read_csv(\"clinical_annotation.csv\")\n",
        "df = df.drop('Unnamed: 0',axis=1)\n",
        "df.DOB = pd.to_datetime(df.DOB)\n",
        "df['AGE'] = pd.to_datetime('today').normalize() - pd.to_datetime(df.DOB)\n",
        "df.AGE = df.AGE.astype(\"timedelta64[Y]\")\n",
        "df = df[df.LABEL > -0.5].reset_index(drop=True)\n",
        "\n",
        "criterion = nn.BCELoss()\n",
        "\n",
        "n_splits= 3\n",
        "current_split= 1\n",
        "skf = StratifiedKFold(n_splits=n_splits,random_state=42)\n",
        "\n",
        "n_epochs = 20\n",
        "\n",
        "list_best_models = []\n",
        "list_dict = []\n",
        "\n",
        "for train_id_patient, val_id_patient in skf.split(df.ID.tolist(),df.LABEL.tolist()):\n",
        "    print('Split {}/{}'.format(current_split,n_splits))\n",
        "    best_model = None\n",
        "    data_train = return_data(df.set_index(['ID']), df.ID.to_numpy()[train_id_patient])\n",
        "    #data_train = return_data(df.set_index(['ID']), train_id_patient)  \n",
        "\n",
        "    img_list, ages, concentration, labels = data_train['indice'], data_train['age'], data_train['concentration'], data_train['label']\n",
        "    train = LymphoDataset(orig, img_list, ages, concentration, labels, get_transform(True))\n",
        "    train_loader = torch.utils.data.DataLoader(\n",
        "        train, batch_size=1, shuffle=True, num_workers=8, collate_fn=custom_fn)\n",
        "    \n",
        "\n",
        "    data_valid = return_data(df.set_index(['ID']), df.ID.to_numpy()[val_id_patient])\n",
        "    img_list, ages, concentration, labels = data_valid['indice'], data_valid['age'], data_valid['concentration'], data_valid['label']\n",
        "    valid = LymphoDataset(orig, img_list, ages, concentration, labels, get_transform(False))\n",
        "    valid_loader = torch.utils.data.DataLoader(\n",
        "        valid, batch_size=1, shuffle=False, num_workers=8, collate_fn=custom_fn) \n",
        "\n",
        "\n",
        "    model = ResnetMIL().cuda()\n",
        "    for param in model.model.parameters():\n",
        "      param.requires_grad = False\n",
        "    for param in model.model.fc.parameters():\n",
        "      param.requires_grad = True\n",
        "\n",
        "    optimizer = torch.optim.Adam(model.parameters(), lr=0.00005, betas=(0.9, 0.999))\n",
        "\n",
        "    best_model , training_dict = train_walk_around(train_loader, model= model, epochs= n_epochs, batch_size= 1, criterion= criterion, optimizer= optimizer)\n",
        "    list_best_models.append(best_model)\n",
        "    list_dict.append(training_dict)\n",
        "\n",
        "    current_split+=1\n",
        "\n",
        "\n",
        "\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000,
          "referenced_widgets": [
            "2a62da2d56964555a5152f2da201dc60",
            "f7f059757452452183d4c447850e0093",
            "007d23070c88445aa0340975a6e9a725",
            "4e2c22cb49124bb69edd159602b47d05",
            "c78d7822dc974892bb9dbc51330ec672",
            "02a72f80ea4e46eeb83e8101dce37d8a",
            "a88df88e7ee348659a73ea6bce585c0a",
            "0c4b03261fff425cbc30d6772c73b6c2",
            "3253bc34f4414e50892e59991ff90298",
            "3f920d407a6d4a3cb1e97fd55d0f6482",
            "2bb18d3f43de406490f463a5f354376e",
            "3edf9a897d384b698af6a9062ed85626",
            "aed306484cb0438d96cadc4bcc2d75ae",
            "83015dae1e1e4d5c9b987d3c47155af6",
            "e502626d1fea48999e5079d9b6b49f00",
            "ec8c59412679409f80bf8b48874b85ae",
            "a17f267672e04372a28a3a1fe4b810de",
            "8c7b420ce99a41ec87804630ba08f8f8",
            "be63420f17164d3abc76cf53e3fddf40",
            "d2d7b0e9ec9544948a5f53944eb52bb2",
            "62efc56c26494f06a9e4dbfef974e991",
            "ac12a26b89d54f4592f6a3937f14ea12",
            "45eb392693e049bea9c15816e5ace2d3",
            "7a58c7e381414ed9b45028d5687748bc",
            "65bbb0514907488185361bebc85caa09",
            "78081f2562fe4db7bb2b8d5807417630",
            "7eb57d824d3a4ac99e0914b3d67d8771",
            "f31811530a984e9fa342d924688565c0",
            "345e8a0c5b604f21b9a43a068d6ba59e",
            "7ddb0b3c5c8247bf863d9503bbce5931",
            "0a848d6ea00b4e7d8acd87e1a0953262",
            "b16fc225e724491d84d0adfd7d107070",
            "556306a98979421a9ff717cbea96fe87",
            "a10e3b3436c246eca67c4b47f3fb6361",
            "8f2139f6b9fe4e33a9af8c16970dfb7b",
            "1e8eb92ad02c4043a75bb26635345435",
            "22574e982f6d4c26ae0d68fe39ffc05d",
            "a181b02a021e4ee4b65923166e7d7779",
            "604f487ecb8d4b82a190e7641f51fbec",
            "5abed2ca39fd47b5bb6866eaaa2975e1",
            "e168e7a1ee364980b9412689d363eb58",
            "937dc7fdd6874c2ca8c657b53496e010",
            "dbd79ae484f942fc8ba2bd6a5366daa4",
            "baaf90e4d85049df97b5ea8d828fccf8",
            "6cbc56045d8d40b2bfad1e17edc35395",
            "adef127045414cf68104e584166ca800",
            "dcdeb3d774194ffebfae5a49afaadcf0",
            "17fed8310f7c4ffebcbbbc5b58b680ba",
            "b5380afd14934543940d9f274472fd16",
            "aef5269ea55546efa89958b0affd5873",
            "d79dc655285f4738890f6ba7242e0d71",
            "ab2cd9b296244fe0bf359fb9ab1e744b",
            "21107c820e86479bb72738348e91577a",
            "7b6f78d1bb3b4c41bd275af9c2b1c786",
            "8a4c397e22e143f98f525da7c723d78d",
            "8798d6ae8773469cbf51e7de0436f128",
            "be9adda726fa447aaf333614b1a08626",
            "6c8fc1c0f16f4544ab4dfc944e9f8ef6",
            "2a3ce94a781c46d7bc913631808db1f1",
            "6196cabb508b45729a25c8d25cf38119",
            "249eea800a194dd6b6d5d784f7dbbaaa",
            "11d09c7828584dd5a76d36950f82f30e",
            "4ca4b9779fe340688e3555ba8ac2c965",
            "76817856bd6e4b8a914fcfb15d0e9e09",
            "6c17e6436e85462a859581592401dbe1",
            "4bae43b66aee4670bdfbcd3420541724",
            "6063c9a03c1f4c2499aa7499b675818f",
            "0a84689e542340d88568e27ca57671bf",
            "e66d53c210ec401e82dc29349067e7bc",
            "697ee44860c84467a879f115cfaf896b",
            "0028d3a2d9e943f28484be907a16791c",
            "e349f7dbcaeb46a893f0b9db22adf576",
            "c7b1aecfc2de4b79b911dc9d69e06455",
            "71a60c3b131546a9b330f219bb2c8a73",
            "467c47a4cb874b5c9551d8935d2d24eb",
            "22d485e8204d4d8e9fb8377ec1a9772d",
            "0cdd608e628f43999ea04e43eb6ad7e7",
            "bacf72cca2e549e2a547572f3ca833b5",
            "121ea4c4b45648de99e0d078d8521cf2",
            "79e7b4e05bc0431db731f45b5e789a21",
            "404f0373348049ec9b8f7e4b05c8555b",
            "fd9f20114a4f48b8bbb3c5412c7da67c",
            "e4517bd43aec4e86b64cdeb1ea862c18",
            "9125a34dda074dceba27e6c54513c0e6",
            "9ad240a1ebe34e5ab2924474d5e3c2ae",
            "fe3734cc16474bdea1dcb6615c76f486",
            "14d10a26c46d40ac9b3e6eddfb1a26ba",
            "42c1d92d4c2548a9b59537f9cd40b001",
            "fb9c37c0f03f4bde86c5970b3f60cd86",
            "c3a0b91b9e28494e853f80f7ae4f9e24",
            "33573c8e86344d3794895b15e0f21a3d",
            "3acb58b3314a49718e7c22a6a540b9fe",
            "445b0f7a3c514a5989ca4bbb094086dc",
            "85f64a38f92940c9bf5f6f21a1c99e27",
            "755c40a2dd2c41ad84bb188c8c48abf2",
            "813030e15c4e4d0caf2e5e24e7774773",
            "ca50451ca44145be948d1eca81f5840e",
            "0ba15b0d80644bcda0726c1c344077a4",
            "fe474c732afb4984856eeee6106b843c",
            "adc46bce95d441128ba350cf9d63aa45",
            "855db93780664f838bc70ab62e750c4c",
            "a346cecf936f43ad91fa117c61a7799e",
            "9379608a59ea41298ce0833394075f6e",
            "9cc7e1dbf4e64fe795d88c82c7b8c579",
            "73b3ed4251664a23b92f36c7e40248cb",
            "1e52e40f557f49fdb65fd36d3a63a5ad",
            "c5ecc26e6dc0407785d837a5bf6ae4b5",
            "8cc9db429bc548d980f438cd4510fcca",
            "3343ec65bf994dfc89089c0e63a9bd09",
            "aa55f560be054362bb31cd40e4c11343",
            "d36af1f404bd48e8b849f00605da37fa",
            "a0eb821c3c6b4baa992da3a39a9bd5d9",
            "e4aeaf3a2efb47739104685e1544123e",
            "6e29c77d40714dd3b03d61a02189dd04",
            "b7ce3e41aad04132901301915906b212",
            "c70774ae9c284e539c4c9008e808ca4f",
            "9d2340330db94ed68b8e113840bae72a",
            "5316128a14c448a7a7c7c4b4897c1155",
            "d999e077806b45299e03ad837a5c2ab9",
            "9f28ceb97d3c46f5a52cb4e3a8b0c3ad",
            "c736bff62f39413da50702697a3db16c",
            "0391e9de3a294d87876553878dbd6d3c",
            "d255ed34a27d4047a73effdd3dacdd38",
            "e653a4c2719d4cae9449c48aebf8d008",
            "a0a2655b4b5f4926aaac699d56f00203",
            "c9582612fb3541839c4fa888ad9863a9",
            "642dc73a9c904173bf247ca366350b68",
            "f1bf69685f1f439ebb0fc98029e48c8c",
            "9303a86ceb6543e0ac8bd82726612bd4",
            "7edeed2c612447bdb6202f08d8ea5a2d",
            "be729396cbdd4281b833e759c9863742",
            "3a8caf2cbad34b69aca5a0e0d4dfc388",
            "df18ce77d7b240449d68af8a8b6bb56f",
            "5464c8a373104a3c8aede90bfd72e026",
            "ba551959eca345a3bc8423782276e70b",
            "a6ddc8c7359d420983eb67f944cf1a07",
            "c174f5958a6841b582a51e508faaba8c",
            "8e55041e173c434bbb54f4821ed68257",
            "4a480a7ad1244ab3972e601bf80e460e",
            "64c4dcdcd68842be8e26acdc06b0cc2b",
            "62f2abc4619649449efa02d0e0f164a7",
            "fd70cdff9dd4400ab1801d4c152e33b6",
            "e48fc82c6c9b457c94681c2987d55613",
            "c414b7c9ab0a4a098f089c43c78d2a4c",
            "68f304949dc640e096e65652637c8276",
            "55b7ac635e06445f85bf172467cb666f",
            "4613212bd5d746df935979d8bf0f8eb2",
            "38afa0a9f1a845588782739cfa63df3f",
            "c8acc82a6bde4ae98e392d7956b79758",
            "3bb93c57f762410e8a24fb21dc1b51bc",
            "e919ee9021cc46a3b218670525239ea2",
            "b2c2b78747da490ba12459f7c9097d5e"
          ]
        },
        "id": "yjy6TN5HaHZh",
        "outputId": "917a14fa-38a2-4d1c-dd98-94cf4f4a3cc4"
      },
      "source": [
        "from sklearn.model_selection import StratifiedKFold, KFold\n",
        "\n",
        "orig = '/content/trainset/'\n",
        "\n",
        "df = pd.read_csv(\"clinical_annotation.csv\")\n",
        "df = df.drop('Unnamed: 0',axis=1)\n",
        "df.DOB = pd.to_datetime(df.DOB)\n",
        "df['AGE'] = pd.to_datetime('today').normalize() - pd.to_datetime(df.DOB)\n",
        "df.AGE = df.AGE.astype(\"timedelta64[Y]\")\n",
        "df = df[df.LABEL > -0.5].reset_index(drop=True)\n",
        "\n",
        "criterion = nn.BCELoss()\n",
        "\n",
        "n_splits= 3\n",
        "current_split= 1\n",
        "skf = StratifiedKFold(n_splits=n_splits,random_state=42)\n",
        "\n",
        "n_epochs = 20\n",
        "\n",
        "list_best_models = []\n",
        "list_dict = []\n",
        "\n",
        "for train_id_patient, val_id_patient in skf.split(df.ID.tolist(),df.LABEL.tolist()):\n",
        "    print('Split {}/{}'.format(current_split,n_splits))\n",
        "    best_model = None\n",
        "    data_train = return_data(df.set_index(['ID']), df.ID.to_numpy()[train_id_patient])\n",
        "    #data_train = return_data(df.set_index(['ID']), train_id_patient)  \n",
        "\n",
        "    img_list, ages, concentration, labels = data_train['indice'], data_train['age'], data_train['concentration'], data_train['label']\n",
        "    train = LymphoDataset(orig, img_list, ages, concentration, labels, get_transform(True))\n",
        "    train_loader = torch.utils.data.DataLoader(\n",
        "        train, batch_size=1, shuffle=True, num_workers=8, collate_fn=custom_fn)\n",
        "    \n",
        "\n",
        "    data_valid = return_data(df.set_index(['ID']), df.ID.to_numpy()[val_id_patient])\n",
        "    img_list, ages, concentration, labels = data_valid['indice'], data_valid['age'], data_valid['concentration'], data_valid['label']\n",
        "    valid = LymphoDataset(orig, img_list, ages, concentration, labels, get_transform(False))\n",
        "    valid_loader = torch.utils.data.DataLoader(\n",
        "        valid, batch_size=1, shuffle=False, num_workers=8, collate_fn=custom_fn) \n",
        "\n",
        "\n",
        "    model = GatedAttention().cuda()\n",
        "    for param in model.feature_extractor_part1.parameters():\n",
        "      param.requires_grad = False\n",
        "\n",
        "    optimizer = torch.optim.Adam(model.parameters(), lr=0.00005, betas=(0.9, 0.999))\n",
        "\n",
        "    best_model = train_attention(model,epoch=n_epochs)\n",
        "    #best_model , training_dict = train_walk_around(train_loader, model= model, epochs= 20, batch_size= 1, criterion= criterion, optimizer= optimizer)\n",
        "    list_best_models.append(best_model)\n",
        "    list_dict.append(training_dict)\n",
        "\n",
        "    current_split+=1\n",
        "\n",
        "\n",
        "\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Split 1/3\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "2a62da2d56964555a5152f2da201dc60",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "HBox(children=(FloatProgress(value=0.0, max=108.0), HTML(value='')))"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 1, Loss: 0.5955, Train error: 0.3056, Accuracy: 69.44444444444444\n",
            "Test Set, Loss: 0.5065, Test error: 0.3091, Accuracy: 69.0909090909091\n",
            "\n",
            "model successfully savec\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "3253bc34f4414e50892e59991ff90298",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "HBox(children=(FloatProgress(value=0.0, max=108.0), HTML(value='')))"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 2, Loss: 0.5175, Train error: 0.2870, Accuracy: 71.29629629629629\n",
            "Test Set, Loss: 0.5069, Test error: 0.3091, Accuracy: 69.0909090909091\n",
            "\n",
            "model successfully savec\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "a17f267672e04372a28a3a1fe4b810de",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "HBox(children=(FloatProgress(value=0.0, max=108.0), HTML(value='')))"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 3, Loss: 0.5018, Train error: 0.2870, Accuracy: 71.29629629629629\n",
            "Test Set, Loss: 0.4473, Test error: 0.2727, Accuracy: 72.72727272727273\n",
            "\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "65bbb0514907488185361bebc85caa09",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "HBox(children=(FloatProgress(value=0.0, max=108.0), HTML(value='')))"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 4, Loss: 0.4729, Train error: 0.2315, Accuracy: 76.85185185185185\n",
            "Test Set, Loss: 0.4306, Test error: 0.2364, Accuracy: 76.36363636363636\n",
            "\n",
            "model successfully savec\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "556306a98979421a9ff717cbea96fe87",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "HBox(children=(FloatProgress(value=0.0, max=108.0), HTML(value='')))"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 5, Loss: 0.4706, Train error: 0.2593, Accuracy: 74.07407407407408\n",
            "Test Set, Loss: 0.4136, Test error: 0.2182, Accuracy: 78.18181818181819\n",
            "\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "e168e7a1ee364980b9412689d363eb58",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "HBox(children=(FloatProgress(value=0.0, max=108.0), HTML(value='')))"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 6, Loss: 0.4548, Train error: 0.2315, Accuracy: 76.85185185185185\n",
            "Test Set, Loss: 0.4004, Test error: 0.1636, Accuracy: 83.63636363636364\n",
            "\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "b5380afd14934543940d9f274472fd16",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "HBox(children=(FloatProgress(value=0.0, max=108.0), HTML(value='')))"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 7, Loss: 0.4400, Train error: 0.1574, Accuracy: 84.25925925925925\n",
            "Test Set, Loss: 0.3968, Test error: 0.2182, Accuracy: 78.18181818181819\n",
            "\n",
            "model successfully savec\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "be9adda726fa447aaf333614b1a08626",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "HBox(children=(FloatProgress(value=0.0, max=108.0), HTML(value='')))"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 8, Loss: 0.4376, Train error: 0.1852, Accuracy: 81.48148148148148\n",
            "Test Set, Loss: 0.3873, Test error: 0.2182, Accuracy: 78.18181818181819\n",
            "\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "6c17e6436e85462a859581592401dbe1",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "HBox(children=(FloatProgress(value=0.0, max=108.0), HTML(value='')))"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 9, Loss: 0.4144, Train error: 0.1852, Accuracy: 81.48148148148148\n",
            "Test Set, Loss: 0.4112, Test error: 0.2364, Accuracy: 76.36363636363636\n",
            "\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "c7b1aecfc2de4b79b911dc9d69e06455",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "HBox(children=(FloatProgress(value=0.0, max=108.0), HTML(value='')))"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 10, Loss: 0.4269, Train error: 0.1667, Accuracy: 83.33333333333333\n",
            "Test Set, Loss: 0.3655, Test error: 0.2000, Accuracy: 80.0\n",
            "\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "404f0373348049ec9b8f7e4b05c8555b",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "HBox(children=(FloatProgress(value=0.0, max=108.0), HTML(value='')))"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 11, Loss: 0.4128, Train error: 0.1759, Accuracy: 82.4074074074074\n",
            "Test Set, Loss: 0.3514, Test error: 0.0909, Accuracy: 90.9090909090909\n",
            "\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "fb9c37c0f03f4bde86c5970b3f60cd86",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "HBox(children=(FloatProgress(value=0.0, max=108.0), HTML(value='')))"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 12, Loss: 0.4065, Train error: 0.2130, Accuracy: 78.70370370370371\n",
            "Test Set, Loss: 0.3463, Test error: 0.1455, Accuracy: 85.45454545454545\n",
            "\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "ca50451ca44145be948d1eca81f5840e",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "HBox(children=(FloatProgress(value=0.0, max=108.0), HTML(value='')))"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 13, Loss: 0.3925, Train error: 0.1574, Accuracy: 84.25925925925925\n",
            "Test Set, Loss: 0.3345, Test error: 0.1091, Accuracy: 89.0909090909091\n",
            "\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "73b3ed4251664a23b92f36c7e40248cb",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "HBox(children=(FloatProgress(value=0.0, max=108.0), HTML(value='')))"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 14, Loss: 0.3955, Train error: 0.1852, Accuracy: 81.48148148148148\n",
            "Test Set, Loss: 0.3290, Test error: 0.1273, Accuracy: 87.27272727272727\n",
            "\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "e4aeaf3a2efb47739104685e1544123e",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "HBox(children=(FloatProgress(value=0.0, max=108.0), HTML(value='')))"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 15, Loss: 0.3904, Train error: 0.1574, Accuracy: 84.25925925925925\n",
            "Test Set, Loss: 0.3204, Test error: 0.0909, Accuracy: 90.9090909090909\n",
            "\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "c736bff62f39413da50702697a3db16c",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "HBox(children=(FloatProgress(value=0.0, max=108.0), HTML(value='')))"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 16, Loss: 0.3954, Train error: 0.1481, Accuracy: 85.18518518518519\n",
            "Test Set, Loss: 0.3137, Test error: 0.1091, Accuracy: 89.0909090909091\n",
            "\n",
            "model successfully savec\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "9303a86ceb6543e0ac8bd82726612bd4",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "HBox(children=(FloatProgress(value=0.0, max=108.0), HTML(value='')))"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 17, Loss: 0.3870, Train error: 0.1481, Accuracy: 85.18518518518519\n",
            "Test Set, Loss: 0.3439, Test error: 0.2000, Accuracy: 80.0\n",
            "\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "c174f5958a6841b582a51e508faaba8c",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "HBox(children=(FloatProgress(value=0.0, max=108.0), HTML(value='')))"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 18, Loss: 0.3873, Train error: 0.1667, Accuracy: 83.33333333333333\n",
            "Test Set, Loss: 0.3154, Test error: 0.1091, Accuracy: 89.0909090909091\n",
            "\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "68f304949dc640e096e65652637c8276",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "HBox(children=(FloatProgress(value=0.0, max=108.0), HTML(value='')))"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 19, Loss: 0.3671, Train error: 0.1481, Accuracy: 85.18518518518519\n",
            "Test Set, Loss: 0.3614, Test error: 0.2182, Accuracy: 78.18181818181819\n",
            "\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-17-7304b08229b2>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     49\u001b[0m     \u001b[0;31m#best_model , training_dict = train_walk_around(train_loader, model= model, epochs= 20, batch_size= 1, criterion= criterion, optimizer= optimizer)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     50\u001b[0m     \u001b[0mlist_best_models\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbest_model\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 51\u001b[0;31m     \u001b[0mlist_dict\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtraining_dict\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     52\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     53\u001b[0m     \u001b[0mcurrent_split\u001b[0m\u001b[0;34m+=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name 'training_dict' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 66,
          "referenced_widgets": [
            "f3ac5e792d0c4f3199c3b1548f92e263",
            "58103776f95c4eaead4eb632b124f7de",
            "ab189b0799a0406487746d6b3ba1bef4",
            "4a29f97d6839456991f6a24fc7f26da2",
            "a1a562c9624b49ec91b94226755f9c8a",
            "6f2ea68201b948559369f07582d1a81e",
            "509cf3243641429ab93dd827be39fb26",
            "b15115b19712440f97fc6cdac5f9ff1f"
          ]
        },
        "id": "DG325pswa34h",
        "outputId": "4790623e-4445-428a-96db-442b800f018c"
      },
      "source": [
        "df_concat = []\n",
        "\n",
        "for model in tqdm(list_best_models):\n",
        "  df_concat.append(submission(model,criterion))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "f3ac5e792d0c4f3199c3b1548f92e263",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "HBox(children=(FloatProgress(value=0.0, max=5.0), HTML(value='')))"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "9CNNKoeza34i"
      },
      "source": [
        "from functools import reduce\n",
        "\n",
        "df_merged = reduce(lambda  left,right: pd.merge(left,right,on=['Id'],\n",
        "                                            how='outer'), df_concat)\n",
        "\n",
        "print(df_merged)\n",
        "df_merged.set_index('Id')\n",
        "df_merged = df_merged.set_index('Id').mode(axis=1)[0].to_frame()\n",
        "df_merged = df_merged.rename(columns={0:\"Predicted\"})\n",
        "df_merged.Predicted = df_merged.Predicted.astype(int)\n",
        "df_merged.to_csv('baseline_cv.csv')"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Em0lQhVpe3OV"
      },
      "source": [
        "#Baseline + SVM"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "xWXnLZhDe6Fa"
      },
      "source": [
        "class Embeding(nn.Module):\n",
        "  def __init__(self):\n",
        "    super(Embeding, self).__init__()\n",
        "\n",
        "    model_resnet = models.resnet152(pretrained=True)\n",
        "    num_ftrs = model_resnet.fc.in_features\n",
        "\n",
        "    model_resnet.fc = nn.Identity()\n",
        "  \n",
        "    self.model = model_resnet\n",
        "\n",
        "    self.avgpool = nn.AdaptiveAvgPool1d(1)\n",
        "  \n",
        "  def forward(self, x):\n",
        "    img = x[0]\n",
        "    age, concentration = x[1], x[2]\n",
        "    x = self.model(img)\n",
        "    x = torch.transpose(x, 0, 1)\n",
        "    x = torch.unsqueeze(x,dim=0)\n",
        "    x = self.avgpool(x)\n",
        "    x = torch.squeeze(x,dim=-1)\n",
        "    x = torch.cat([x,concentration,age],axis=-1)\n",
        "    \n",
        "    return x"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "nf58y3PypJPk"
      },
      "source": [
        "orig = 'trainset/'\n",
        "train_id_patient, val_id_patient = train_test_split(df.ID.tolist(), test_size=0.25, random_state=42)\n",
        "data_train = return_data(df.set_index(['ID']), train_id_patient)\n",
        "\n",
        "img_list, ages, concentration, labels = data_train['indice'], data_train['age'], data_train['concentration'], data_train['label']\n",
        "train = LymphoDataset(orig, img_list, ages, concentration, labels, get_transform(True))\n",
        "train_loader = torch.utils.data.DataLoader(\n",
        "    train, batch_size=1, shuffle=True, num_workers=8, collate_fn=custom_fn)\n",
        "\n",
        "data_valid = return_data(df.set_index(['ID']), val_id_patient)\n",
        "img_list, ages, concentration, labels = data_valid['indice'], data_valid['age'], data_valid['concentration'], data_valid['label']\n",
        "valid = LymphoDataset(orig, img_list, ages, concentration, labels, get_transform(False))\n",
        "valid_loader = torch.utils.data.DataLoader(\n",
        "    valid, batch_size=1, shuffle=False, num_workers=8, collate_fn=custom_fn)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "9UGgkeKks2pS"
      },
      "source": [
        "model = Embeding().cuda()\n",
        "for param in model.model.parameters():\n",
        "  param.requires_grad = False"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "g5Erje78fjAc",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 116,
          "referenced_widgets": [
            "de4e4043d56b420a98ad8dd21cff0de6",
            "ef50ad892712451da288fc2bf1f97fd3",
            "80cfa06e9b314441a988a056c37ccd28",
            "48bab0796441471787d205b160c86811",
            "b693cdb3c4534616b0c726354c5b3121",
            "8f450abaafb74f5790ae1568dba03223",
            "137c99f89d16495d9cdee90c166afc7d",
            "f9df2fc0033c49ab85eeab3a209d566a",
            "c83bf918a5004228a63b268c72b6c164",
            "6d5d911e34fc43c79779ae122f2abb0f",
            "384e3f0e1e234ebf81337dd1c33eb3c8",
            "8ba62a4e80b94898aa8fd29eb4df8a2b",
            "423fb31722a84fe09249bcea8b26ef22",
            "de1ffa8ef32c48d5bde38949af0202ed",
            "21292bd0747d4bd996adc37a30f4cb29",
            "3abac90fe2374db59922ab1a7a50c073"
          ]
        },
        "outputId": "cd17bb19-8101-4d19-f624-e917477dc704"
      },
      "source": [
        "model = Embeding().cuda()\n",
        "for param in model.model.parameters():\n",
        "  param.requires_grad = False\n",
        "\n",
        "X = np.zeros(shape=(len(train_loader),2050))\n",
        "Y = np.zeros(shape=(len(train_loader),))\n",
        "id=0\n",
        "for batch in tqdm(train_loader):\n",
        "    img, bag_label, age, concentration  = batch['images'].cuda(), batch['label'].cuda(), batch['age'].cuda(), batch['concentration'].cuda()\n",
        "    x = [img, age, concentration]\n",
        "    vec = model(x)\n",
        "    X[id,:] = vec.cpu().detach().numpy()\n",
        "    Y[id] = bag_label\n",
        "    id+=1\n",
        "\n",
        "X_val = np.zeros(shape=(len(valid_loader),2050))\n",
        "Y_val = np.zeros(shape=(len(valid_loader),))\n",
        "id=0\n",
        "for batch in tqdm(valid_loader):\n",
        "    img, bag_label, age, concentration  = batch['images'].cuda(), batch['label'].cuda(), batch['age'].cuda(), batch['concentration'].cuda()\n",
        "    x = [img, age, concentration]\n",
        "    vec = model(x)\n",
        "    X_val[id,:] = vec.cpu().detach().numpy()\n",
        "    Y_val[id] = bag_label\n",
        "    id+=1"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "de4e4043d56b420a98ad8dd21cff0de6",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "HBox(children=(FloatProgress(value=0.0, max=122.0), HTML(value='')))"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "c83bf918a5004228a63b268c72b6c164",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "HBox(children=(FloatProgress(value=0.0, max=41.0), HTML(value='')))"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 66,
          "referenced_widgets": [
            "e83a141705d64be59c90f092ecb93ebf",
            "554bb6d871324ecea9e65567a12c154f",
            "07b0eb7ce4ea45aab18356334d35af06",
            "0123d39981434cd9886fb4b37dbc151f",
            "9cda6a4bc385415e9b7214ec6464224c",
            "ca24881a36f24368a886b2c1e904a256",
            "d3f0a43c83854a64aaee884ec6632698",
            "155e9c7a287b46fa9e1f6d485d9355be"
          ]
        },
        "id": "X0K63I28pyFf",
        "outputId": "10d76204-8e28-44ae-c094-2898cd95f446"
      },
      "source": [
        "X_test = np.zeros(shape=(len(test_loader),2050))\n",
        "Y_test = np.zeros(shape=(len(test_loader),))\n",
        "id=0\n",
        "for batch in tqdm(test_loader):\n",
        "    img, bag_label, age, concentration  = batch['images'].cuda(), batch['label'].cuda(), batch['age'].cuda(), batch['concentration'].cuda()\n",
        "    x = [img, age, concentration]\n",
        "    vec = model(x)\n",
        "    X_test[id,:] = vec.cpu().detach().numpy()\n",
        "    Y_test[id] = bag_label\n",
        "    id+=1"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "e83a141705d64be59c90f092ecb93ebf",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "HBox(children=(FloatProgress(value=0.0, max=42.0), HTML(value='')))"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FEvEl5eznGEi",
        "outputId": "7f176f30-153c-45d6-ad54-b346bdd3bc09"
      },
      "source": [
        "from sklearn import svm\n",
        "from sklearn.model_selection import StratifiedKFold, KFold, train_test_split\n",
        "\n",
        "\n",
        "classifier = svm.SVC(kernel='rbf')\n",
        "classifier.fit(X,Y)\n",
        "pred = classifier.predict(X_val)\n",
        "np.mean(pred == Y_val)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.8536585365853658"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 101
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "LcTnbfi1oNg_"
      },
      "source": [
        "pred = classifier.predict(X_test)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "9HDcDB2aoW3T"
      },
      "source": [
        "def submission_svm(model_embeding,svm):\n",
        "  ID = []\n",
        "  X_test = np.zeros(shape=(len(test_loader),2050))\n",
        "  Y_test = np.zeros(shape=(len(test_loader),))\n",
        "  for idx, batch in enumerate(test_loader):\n",
        "    data, name, bag_label, age, concentration = batch['images'].cuda(), batch['name'] , batch['label'].cuda(), batch['age'].cuda(), batch['concentration'].cuda()\n",
        "    ID.append(name[0])\n",
        "    x = [data, age, concentration]\n",
        "    #print(predicted_label.item())\n",
        "    vec = model_embeding(x)\n",
        "    X_test[idx,:] = vec.cpu().detach().numpy()\n",
        "    Y_test[idx] = bag_label\n",
        "  \n",
        "  pred = svm.predict(X_test)\n",
        "\n",
        "  df = pd.DataFrame({'Id': ID,'Predicted':pred.as_type('int')})\n",
        "  return df"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "azPBZiBksa2n"
      },
      "source": [
        "df = submission_svm(model,classifier)\n",
        "df"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ItGNpZXnuj-d"
      },
      "source": [
        "df.Predicted = df.Predicted.astype('int')"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rOD-ee94s5JF",
        "outputId": "27feb6b5-28c1-4306-9e0b-ae62f1050f96"
      },
      "source": [
        "torch.cuda.empty_cache()\n",
        "gc.collect()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "456"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 122
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "KNnjgj53O80X"
      },
      "source": [
        "#Baseline + XGBOOST"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "cesAMHMCPArk"
      },
      "source": [
        "##Embedding"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bRBL-q97PAwA"
      },
      "source": [
        "class Embeding(nn.Module):\n",
        "  def __init__(self):\n",
        "    super(Embeding, self).__init__()\n",
        "\n",
        "    model_resnet = models.resnet152(pretrained=True)\n",
        "    num_ftrs = model_resnet.fc.in_features\n",
        "\n",
        "    model_resnet.fc = nn.Identity()\n",
        "  \n",
        "    self.model = model_resnet\n",
        "\n",
        "    self.avgpool = nn.AdaptiveAvgPool1d(1)\n",
        "  \n",
        "  def forward(self, x):\n",
        "    img = x[0]\n",
        "    age, concentration = x[1], x[2]\n",
        "    x = self.model(img)\n",
        "    x = torch.transpose(x, 0, 1)\n",
        "    x = torch.unsqueeze(x,dim=0)\n",
        "    x = self.avgpool(x)\n",
        "    x = torch.squeeze(x,dim=-1)\n",
        "    x = torch.cat([x,concentration,age],axis=-1)\n",
        "    \n",
        "    return x"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bEptksYfPAwA"
      },
      "source": [
        "orig = 'trainset/'\n",
        "train_id_patient, val_id_patient = train_test_split(df.ID.tolist(), test_size=0.25, random_state=42)\n",
        "data_train = return_data(df.set_index(['ID']), train_id_patient)\n",
        "\n",
        "img_list, ages, concentration, labels = data_train['indice'], data_train['age'], data_train['concentration'], data_train['label']\n",
        "train = LymphoDataset(orig, img_list, ages, concentration, labels, get_transform(True))\n",
        "train_loader = torch.utils.data.DataLoader(\n",
        "    train, batch_size=1, shuffle=True, num_workers=8, collate_fn=custom_fn)\n",
        "\n",
        "data_valid = return_data(df.set_index(['ID']), val_id_patient)\n",
        "img_list, ages, concentration, labels = data_valid['indice'], data_valid['age'], data_valid['concentration'], data_valid['label']\n",
        "valid = LymphoDataset(orig, img_list, ages, concentration, labels, get_transform(False))\n",
        "valid_loader = torch.utils.data.DataLoader(\n",
        "    valid, batch_size=1, shuffle=False, num_workers=8, collate_fn=custom_fn)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "XFDbESRUPAwA"
      },
      "source": [
        "model = Embeding().cuda()\n",
        "for param in model.model.parameters():\n",
        "  param.requires_grad = False"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 116,
          "referenced_widgets": [
            "de4e4043d56b420a98ad8dd21cff0de6",
            "ef50ad892712451da288fc2bf1f97fd3",
            "80cfa06e9b314441a988a056c37ccd28",
            "48bab0796441471787d205b160c86811",
            "b693cdb3c4534616b0c726354c5b3121",
            "8f450abaafb74f5790ae1568dba03223",
            "137c99f89d16495d9cdee90c166afc7d",
            "f9df2fc0033c49ab85eeab3a209d566a",
            "c83bf918a5004228a63b268c72b6c164",
            "6d5d911e34fc43c79779ae122f2abb0f",
            "384e3f0e1e234ebf81337dd1c33eb3c8",
            "8ba62a4e80b94898aa8fd29eb4df8a2b",
            "423fb31722a84fe09249bcea8b26ef22",
            "de1ffa8ef32c48d5bde38949af0202ed",
            "21292bd0747d4bd996adc37a30f4cb29",
            "3abac90fe2374db59922ab1a7a50c073"
          ]
        },
        "id": "2E8JdqPZPAwB",
        "outputId": "cd17bb19-8101-4d19-f624-e917477dc704"
      },
      "source": [
        "model = Embeding().cuda()\n",
        "for param in model.model.parameters():\n",
        "  param.requires_grad = False\n",
        "\n",
        "X = np.zeros(shape=(len(train_loader),2050))\n",
        "Y = np.zeros(shape=(len(train_loader),))\n",
        "id=0\n",
        "for batch in tqdm(train_loader):\n",
        "    img, bag_label, age, concentration  = batch['images'].cuda(), batch['label'].cuda(), batch['age'].cuda(), batch['concentration'].cuda()\n",
        "    x = [img, age, concentration]\n",
        "    vec = model(x)\n",
        "    X[id,:] = vec.cpu().detach().numpy()\n",
        "    Y[id] = bag_label\n",
        "    id+=1\n",
        "\n",
        "X_val = np.zeros(shape=(len(valid_loader),2050))\n",
        "Y_val = np.zeros(shape=(len(valid_loader),))\n",
        "id=0\n",
        "for batch in tqdm(valid_loader):\n",
        "    img, bag_label, age, concentration  = batch['images'].cuda(), batch['label'].cuda(), batch['age'].cuda(), batch['concentration'].cuda()\n",
        "    x = [img, age, concentration]\n",
        "    vec = model(x)\n",
        "    X_val[id,:] = vec.cpu().detach().numpy()\n",
        "    Y_val[id] = bag_label\n",
        "    id+=1"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "de4e4043d56b420a98ad8dd21cff0de6",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "HBox(children=(FloatProgress(value=0.0, max=122.0), HTML(value='')))"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "c83bf918a5004228a63b268c72b6c164",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "HBox(children=(FloatProgress(value=0.0, max=41.0), HTML(value='')))"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 66,
          "referenced_widgets": [
            "e83a141705d64be59c90f092ecb93ebf",
            "554bb6d871324ecea9e65567a12c154f",
            "07b0eb7ce4ea45aab18356334d35af06",
            "0123d39981434cd9886fb4b37dbc151f",
            "9cda6a4bc385415e9b7214ec6464224c",
            "ca24881a36f24368a886b2c1e904a256",
            "d3f0a43c83854a64aaee884ec6632698",
            "155e9c7a287b46fa9e1f6d485d9355be"
          ]
        },
        "id": "GpFNjwrXPAwB",
        "outputId": "10d76204-8e28-44ae-c094-2898cd95f446"
      },
      "source": [
        "X_test = np.zeros(shape=(len(test_loader),2050))\n",
        "Y_test = np.zeros(shape=(len(test_loader),))\n",
        "id=0\n",
        "for batch in tqdm(test_loader):\n",
        "    img, bag_label, age, concentration  = batch['images'].cuda(), batch['label'].cuda(), batch['age'].cuda(), batch['concentration'].cuda()\n",
        "    x = [img, age, concentration]\n",
        "    vec = model(x)\n",
        "    X_test[id,:] = vec.cpu().detach().numpy()\n",
        "    Y_test[id] = bag_label\n",
        "    id+=1"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "e83a141705d64be59c90f092ecb93ebf",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "HBox(children=(FloatProgress(value=0.0, max=42.0), HTML(value='')))"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "UhRBHGOzPEk1"
      },
      "source": [
        "##Classifier"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "RvTgDSYGvJkG"
      },
      "source": [
        "from sklearn.preprocessing import MinMaxScaler\n",
        "from xgboost import XGBClassifier\n",
        "\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "a_IIhqLUv5U4"
      },
      "source": [
        "X[:,-1] = (X[:,-1] - X[:,-1].min())/X[:,-1].max()\n",
        "X[:,-2] = (X[:,-2] - X[:,-2].min())/X[:,-2].max()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7cRHanZ3wQVd"
      },
      "source": [
        "X_val[:,-1] = (X_val[:,-1] - X_val[:,-1].min())/X_val[:,-1].max()\n",
        "X_val[:,-2] = (X_val[:,-2] - X_val[:,-2].min())/X_val[:,-2].max()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "iDj4REoCwYr-"
      },
      "source": [
        "X_test[:,-1] = (X_test[:,-1] - X_test[:,-1].min())/X_test[:,-1].max()\n",
        "X_test[:,-2] = (X_test[:,-2] - X_test[:,-2].min())/X_test[:,-2].max()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bePnhEpdwt6x"
      },
      "source": [
        "XGBClassifier?"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-Ofa1ih9vSrJ",
        "outputId": "f6963c9c-dd99-4826-d7a5-4f349709c7d6"
      },
      "source": [
        "boost = XGBClassifier()\n",
        "boost.fit(X, Y)\n",
        "p_boost = boost.predict(X)\n",
        "print (\"Score Train -->\", round(boost.score(X, Y) *100,2), \" %\")"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Score Train --> 100.0  %\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IUcdQVUevdKK",
        "outputId": "33300052-354a-4af2-adbc-7b01af182a48"
      },
      "source": [
        "print (\"Score Train -->\", round(boost.score(X_val, Y_val) *100,2), \" %\")"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Score Train --> 80.49  %\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ZJ5fndw8xVHV"
      },
      "source": [
        "p_boost = boost.predict(X_test)\n",
        "p_boost = p_boost.astype('int')"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "wQ6O6Ng1xah6"
      },
      "source": [
        "def submission_svm(model_embeding,svm):\n",
        "  ID = []\n",
        "  X_test = np.zeros(shape=(len(test_loader),2050))\n",
        "  Y_test = np.zeros(shape=(len(test_loader),))\n",
        "  for idx, batch in enumerate(test_loader):\n",
        "    data, name, bag_label, age, concentration = batch['images'].cuda(), batch['name'] , batch['label'].cuda(), batch['age'].cuda(), batch['concentration'].cuda()\n",
        "    ID.append(name[0])\n",
        "    x = [data, age, concentration]\n",
        "    #print(predicted_label.item())\n",
        "    vec = model_embeding(x)\n",
        "    X_test[idx,:] = vec.cpu().detach().numpy()\n",
        "    Y_test[idx] = bag_label\n",
        "  \n",
        "  X_test[:,-1] = (X_test[:,-1] - X_test[:,-1].min())/X_test[:,-1].max()\n",
        "  X_test[:,-2] = (X_test[:,-2] - X_test[:,-2].min())/X_test[:,-2].max()\n",
        "  pred = svm.predict(X_test)\n",
        "\n",
        "  df = pd.DataFrame({'Id': ID,'Predicted':pred.astype('int')})\n",
        "  return df"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "VzMs7uKCxqgK",
        "outputId": "c317b4f4-d468-4f5a-c6b6-d4090efc3faa"
      },
      "source": [
        "df = submission_svm(model,boost)\n",
        "df"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Id</th>\n",
              "      <th>Predicted</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>P152</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>P120</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>P71</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>P114</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>P98</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>P32</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>P148</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>P57</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>P195</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>P188</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>P139</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>P197</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>P68</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>P56</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>P18</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>P69</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>P9</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>P86</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>P178</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>P132</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20</th>\n",
              "      <td>P49</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21</th>\n",
              "      <td>P108</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>22</th>\n",
              "      <td>P133</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>23</th>\n",
              "      <td>P24</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24</th>\n",
              "      <td>P92</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25</th>\n",
              "      <td>P75</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>26</th>\n",
              "      <td>P81</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>27</th>\n",
              "      <td>P14</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>28</th>\n",
              "      <td>P58</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>29</th>\n",
              "      <td>P4</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>30</th>\n",
              "      <td>P175</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>31</th>\n",
              "      <td>P138</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>32</th>\n",
              "      <td>P143</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>33</th>\n",
              "      <td>P203</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>34</th>\n",
              "      <td>P196</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>35</th>\n",
              "      <td>P170</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>36</th>\n",
              "      <td>P172</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>37</th>\n",
              "      <td>P73</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>38</th>\n",
              "      <td>P93</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>39</th>\n",
              "      <td>P7</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>40</th>\n",
              "      <td>P16</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>41</th>\n",
              "      <td>P119</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "      Id  Predicted\n",
              "0   P152          1\n",
              "1   P120          1\n",
              "2    P71          0\n",
              "3   P114          0\n",
              "4    P98          0\n",
              "5    P32          1\n",
              "6   P148          0\n",
              "7    P57          0\n",
              "8   P195          1\n",
              "9   P188          1\n",
              "10  P139          1\n",
              "11  P197          0\n",
              "12   P68          0\n",
              "13   P56          0\n",
              "14   P18          1\n",
              "15   P69          1\n",
              "16    P9          1\n",
              "17   P86          0\n",
              "18  P178          0\n",
              "19  P132          1\n",
              "20   P49          1\n",
              "21  P108          0\n",
              "22  P133          1\n",
              "23   P24          0\n",
              "24   P92          1\n",
              "25   P75          1\n",
              "26   P81          1\n",
              "27   P14          1\n",
              "28   P58          0\n",
              "29    P4          0\n",
              "30  P175          1\n",
              "31  P138          1\n",
              "32  P143          1\n",
              "33  P203          1\n",
              "34  P196          1\n",
              "35  P170          1\n",
              "36  P172          1\n",
              "37   P73          1\n",
              "38   P93          1\n",
              "39    P7          0\n",
              "40   P16          1\n",
              "41  P119          1"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 169
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "uGSwA9lQPPiI"
      },
      "source": [
        "df.to_csv('SXGBOOSTVM.csv',index=False)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "xHXXo0V6FSLl"
      },
      "source": [
        "#OLD"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "xw1J3fxQFSLp"
      },
      "source": [
        "from torchvision import models\n",
        "import copy\n",
        "#optimizer = torch.optim.SGD(model_conv.fc.parameters(), lr=0.001, momentum=0.9)\n",
        "\n",
        "def train_model(model,epoch):\n",
        "    best_model_wts = copy.deepcopy(model.state_dict())\n",
        "    best_acc_test = 0.0\n",
        "    best_acc_train = 0.0\n",
        "    best_loss_test = 1000.0\n",
        "\n",
        "    for epoch_ in range(1,epoch):\n",
        "      correct = 0\n",
        "      total = 0\n",
        "      model.train()\n",
        "      train_loss = 0.\n",
        "      train_error = 0.\n",
        "      outputs = [] # List to store the outputs of the model \n",
        "      labels = [] # List to store the true label \n",
        "\n",
        "      #for batch_idx, (data, label) in enumerate(train_loader):\n",
        "      for idx, batch in enumerate(train_loader):\n",
        "          data, bag_label = batch['images'].cuda(), batch['label'].cuda()\n",
        "          #bag_label = label[0]\n",
        "          #if args.cuda:\n",
        "          #    data, bag_label = data.cuda(), bag_label.cuda()\n",
        "          #data, bag_label = Variable(data), Variable(bag_label)\n",
        "\n",
        "          # reset gradients\n",
        "          optimizer.zero_grad()\n",
        "          # calculate loss and metrics\n",
        "          loss, _ = model.calculate_objective(data, bag_label)\n",
        "          train_loss += loss.data[0]\n",
        "          error, output = model.calculate_classification_error(data, bag_label)\n",
        "          train_error += error\n",
        "\n",
        "          outputs.append(output) # store it in outputs\n",
        "          labels.append(bag_label) \n",
        "          # backward pass\n",
        "          loss.backward()\n",
        "          # step\n",
        "          optimizer.step()\n",
        "\n",
        "      # calculate loss and error for epoch\n",
        "      train_loss /= len(train_loader)\n",
        "      train_error /= len(train_loader)\n",
        "\n",
        "\n",
        "      total = len(labels)\n",
        "      outputs= np.asarray(outputs)\n",
        "      labels= np.asarray(labels)\n",
        "\n",
        "      correct += (outputs == labels).sum().item()\n",
        "\n",
        "      acc = 100 * correct / total\n",
        "\n",
        "      print('Epoch: {}, Loss: {:.4f}, Train error: {:.4f}, Accuracy: {}'.format(epoch_, train_loss.cpu().numpy()[0], train_error, acc))\n",
        "\n",
        "      test_loss , test_acc = test()\n",
        "\n",
        "      if test_loss < best_loss_test:\n",
        "        best_loss_test = test_loss\n",
        "        best_model_wts = copy.deepcopy(model.state_dict())\n",
        "        print(\"model successfully saved\")\n",
        "\n",
        "    model.load_state_dict(best_model_wts)\n",
        "\n",
        "    return model\n",
        "\n",
        "def test():\n",
        "    correct = 0\n",
        "    total = 0\n",
        "\n",
        "    outputs = [] # List to store the outputs of the model \n",
        "    labels = [] # List to store the true label \n",
        "\n",
        "    model.eval()\n",
        "    test_loss = 0.\n",
        "    test_error = 0.\n",
        "    #for batch_idx, (data, label) in enumerate(test_loader):\n",
        "    for idx, batch in enumerate(valid_loader):\n",
        "        data, bag_label = batch['images'].cuda(), batch['label'].cuda()\n",
        "\n",
        "        loss, attention_weights = model.calculate_objective(data, bag_label)\n",
        "        test_loss += loss.data[0]\n",
        "        error, predicted_label = model.calculate_classification_error(data, bag_label)\n",
        "        test_error += error\n",
        "\n",
        "        if idx < 5:  # plot bag labels and instance labels for first 5 bags\n",
        "            bag_level = (bag_label.cpu().data.numpy()[0], int(predicted_label.cpu().data.numpy()[0][0]))\n",
        "            #instance_level = list(zip(instance_labels.numpy()[0].tolist(),\n",
        "            #                     np.round(attention_weights.cpu().data.numpy()[0], decimals=3).tolist()))\n",
        "\n",
        "            #print('\\nTrue Bag Label, Predicted Bag Label: {}\\n'\n",
        "            #      'True Instance Labels, Attention Weights: {}'.format(bag_level, instance_level))\n",
        "        outputs.append(predicted_label) # store it in outputs\n",
        "        labels.append(bag_label) \n",
        "\n",
        "    test_error /= len(valid_loader)\n",
        "    test_loss /= len(valid_loader)\n",
        "\n",
        "    total = len(labels)\n",
        "    outputs= np.asarray(outputs)\n",
        "    labels= np.asarray(labels)\n",
        "\n",
        "    correct += (outputs == labels).sum().item()\n",
        "\n",
        "    print('Test Set, Loss: {:.4f}, Test error: {:.4f}, Accuracy: {}\\n'.format(test_loss.cpu().numpy()[0], test_error,  100 * correct / total))\n",
        "\n",
        "    return test_loss.cpu().numpy()[0] , 100 * correct / total\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "wtA3nyCqFSLq"
      },
      "source": [
        "import torch\n",
        "import torch.nn as nn\n",
        "import torch.nn.functional as F\n",
        "\n",
        "\n",
        "class Attention(nn.Module):\n",
        "    def __init__(self):\n",
        "        super(Attention, self).__init__()\n",
        "        self.L = 500\n",
        "        self.D = 128\n",
        "        self.K = 1\n",
        "\n",
        "        self.feature_extractor_part1 = nn.Sequential(\n",
        "            nn.Conv2d(1, 20, kernel_size=5),\n",
        "            nn.ReLU(),\n",
        "            nn.MaxPool2d(2, stride=2),\n",
        "            nn.Conv2d(20, 50, kernel_size=5),\n",
        "            nn.ReLU(),\n",
        "            nn.MaxPool2d(2, stride=2)\n",
        "        )\n",
        "\n",
        "        self.feature_extractor_part2 = nn.Sequential(\n",
        "            nn.Linear(50 * 4 * 4, self.L),\n",
        "            nn.ReLU(),\n",
        "        )\n",
        "\n",
        "        self.attention = nn.Sequential(\n",
        "            nn.Linear(self.L, self.D),\n",
        "            nn.Tanh(),\n",
        "            nn.Linear(self.D, self.K)\n",
        "        )\n",
        "\n",
        "        self.classifier = nn.Sequential(\n",
        "            nn.Linear(self.L*self.K, 1),\n",
        "            nn.Sigmoid()\n",
        "        )\n",
        "\n",
        "    def forward(self, x):\n",
        "        x = x.squeeze(0)\n",
        "\n",
        "        H = self.feature_extractor_part1(x)\n",
        "        H = H.view(-1, 50 * 4 * 4)\n",
        "        H = self.feature_extractor_part2(H)  # NxL\n",
        "\n",
        "        A = self.attention(H)  # NxK\n",
        "        A = torch.transpose(A, 1, 0)  # KxN\n",
        "        A = F.softmax(A, dim=1)  # softmax over N\n",
        "\n",
        "        M = torch.mm(A, H)  # KxL\n",
        "\n",
        "        Y_prob = self.classifier(M)\n",
        "        Y_hat = torch.ge(Y_prob, 0.5).float()\n",
        "\n",
        "        return Y_prob, Y_hat, A\n",
        "\n",
        "    # AUXILIARY METHODS\n",
        "    def calculate_classification_error(self, X, Y):\n",
        "        Y = Y.float()\n",
        "        _, Y_hat, _ = self.forward(X)\n",
        "        error = 1. - Y_hat.eq(Y).cpu().float().mean().data[0]\n",
        "\n",
        "        return error, Y_hat\n",
        "\n",
        "    def calculate_objective(self, X, Y):\n",
        "        Y = Y.float()\n",
        "        Y_prob, _, A = self.forward(X)\n",
        "        Y_prob = torch.clamp(Y_prob, min=1e-5, max=1. - 1e-5)\n",
        "        neg_log_likelihood = -1. * (Y * torch.log(Y_prob) + (1. - Y) * torch.log(1. - Y_prob))  # negative log bernoulli\n",
        "\n",
        "        return neg_log_likelihood, A\n",
        "\n",
        "class GatedAttention(nn.Module):\n",
        "    def __init__(self):\n",
        "        super(GatedAttention, self).__init__()\n",
        "        self.L = 500\n",
        "        self.D = 128\n",
        "        self.K = 1\n",
        "\n",
        "        \"\"\"\n",
        "        self.feature_extractor_part1 = nn.Sequential(\n",
        "            nn.Conv2d(1, 20, kernel_size=5),\n",
        "            nn.ReLU(),\n",
        "            nn.MaxPool2d(2, stride=2),\n",
        "            nn.Conv2d(20, 50, kernel_size=5),\n",
        "            nn.ReLU(),\n",
        "            nn.MaxPool2d(2, stride=2)\n",
        "        )\n",
        "        \"\"\"\n",
        "\n",
        "        #model_conv = models.resnet152(pretrained=True)\n",
        "        model_conv = models.resnet50(pretrained=True)\n",
        "\n",
        "\n",
        "        #model_conv.fc.out_features\n",
        "        # Parameters of newly constructed modules have requires_grad=True by default\n",
        "        #num_ftrs = model_conv.fc.in_features\n",
        "        #del model_conv.fc\n",
        "        #model_conv.fc = None\n",
        "\n",
        "        self.feature_extractor_part1 = model_conv\n",
        "        \n",
        "        num_ftrs = 1000\n",
        "\n",
        "        self.feature_extractor_part2 = nn.Sequential(\n",
        "            nn.Linear(num_ftrs, self.L),\n",
        "            nn.ReLU(),\n",
        "            nn.Dropout(0.5)\n",
        "        )\n",
        "\n",
        "        self.attention_V = nn.Sequential(\n",
        "            nn.Linear(self.L, self.D),\n",
        "            nn.Tanh()\n",
        "        )\n",
        "\n",
        "        self.attention_U = nn.Sequential(\n",
        "            nn.Linear(self.L, self.D),\n",
        "            nn.Sigmoid()\n",
        "        )\n",
        "\n",
        "        self.attention_weights = nn.Linear(self.D, self.K)\n",
        "\n",
        "        self.classifier = nn.Sequential(\n",
        "            nn.Linear(self.L*self.K, 1),\n",
        "            nn.Sigmoid()\n",
        "        )\n",
        "\n",
        "    def forward(self, x):\n",
        "        x = x.squeeze(0)\n",
        "\n",
        "        H = self.feature_extractor_part1(x)\n",
        "        #print(H.shape)\n",
        "        #H = H.view(-1, num_ftrs)\n",
        "        H = self.feature_extractor_part2(H)  # NxL\n",
        "\n",
        "        A_V = self.attention_V(H)  # NxD\n",
        "        A_U = self.attention_U(H)  # NxD\n",
        "        A = self.attention_weights(A_V * A_U) # element wise multiplication # NxK\n",
        "        A = torch.transpose(A, 1, 0)  # KxN\n",
        "        A = F.softmax(A, dim=1)  # softmax over N\n",
        "\n",
        "        M = torch.mm(A, H)  # KxL\n",
        "\n",
        "        Y_prob = self.classifier(M)\n",
        "        Y_hat = torch.ge(Y_prob, 0.5).float()\n",
        "\n",
        "        return Y_prob, Y_hat, A\n",
        "\n",
        "    # AUXILIARY METHODS\n",
        "    def calculate_classification_error(self, X, Y):\n",
        "        Y = Y.float()\n",
        "        _, Y_hat, _ = self.forward(X)\n",
        "        error = 1. - Y_hat.eq(Y).cpu().float().mean().item()\n",
        "\n",
        "        return error, Y_hat\n",
        "\n",
        "    def calculate_objective(self, X, Y):\n",
        "        Y = Y.float()\n",
        "        Y_prob, _, A = self.forward(X)\n",
        "        Y_prob = torch.clamp(Y_prob, min=1e-5, max=1. - 1e-5)\n",
        "        neg_log_likelihood = -1. * (Y * torch.log(Y_prob) + (1. - Y) * torch.log(1. - Y_prob))  # negative log bernoulli\n",
        "\n",
        "        return neg_log_likelihood, A"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "FKB2Ul9fFSLv"
      },
      "source": [
        "from imblearn.under_sampling import RandomUnderSampler \n",
        "from imblearn.over_sampling import  RandomOverSampler\n",
        "\n",
        "rus = RandomUnderSampler(return_indices=True)\n",
        "X_rus, y_rus, id_rus = rus.fit_sample(df.ID.to_numpy().reshape(-1, 1), df.LABEL.to_numpy().reshape(-1, 1))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "lmGtUKQxFSLy"
      },
      "source": [
        "##All patients"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "3cPkgzgPFSLy"
      },
      "source": [
        "from sklearn.model_selection import StratifiedKFold, KFold\n",
        "from imblearn.under_sampling import RandomUnderSampler \n",
        "from imblearn.over_sampling import  RandomOverSampler\n",
        "\n",
        "\n",
        "orig = '/content/trainset/'\n",
        "\n",
        "df = pd.read_csv(\"clinical_annotation.csv\")\n",
        "df = df[df.LABEL > -0.5].reset_index(drop=True) # patient ID with label = -1 are the one that belongs to the test file\n",
        "df = df.drop('Unnamed: 0',axis=1)\n",
        "df.DOB = pd.to_datetime(df.DOB)\n",
        "df['AGE'] = pd.to_datetime('today').normalize() - pd.to_datetime(df.DOB)\n",
        "df.AGE = df.AGE.astype(\"timedelta64[Y]\")\n",
        "df = df[df.AGE > 62.]\n",
        "\n",
        "rus = RandomUnderSampler(return_indices=True)\n",
        "X_rus, y_rus, id_rus = rus.fit_sample(df.ID.to_numpy().reshape(-1, 1), df.LABEL.to_numpy().reshape(-1, 1))\n",
        "X_rus = np.squeeze(X_rus)\n",
        "y_rus = np.squeeze(y_rus)\n",
        "\n",
        "print(X_rus)\n",
        "print(y_rus)\n",
        "\n",
        "\n",
        "n_splits= 3\n",
        "current_split= 1\n",
        "skf = StratifiedKFold(n_splits=n_splits)\n",
        "\n",
        "list_best_models = []\n",
        "\n",
        "for train_id_patient, val_id_patient in skf.split(X_rus,y_rus):\n",
        "    print(X_rus[train_id_patient])\n",
        "    print(y_rus[train_id_patient])\n",
        "    print(X_rus[val_id_patient])\n",
        "    print(y_rus[val_id_patient])\n",
        "    print('Split {}/{}'.format(current_split,n_splits))\n",
        "    best_model = None\n",
        "    #data_train = return_data(df.set_index(['ID']), df.ID.to_numpy()[train_id_patient])\n",
        "    data_train = return_data(df.set_index(['ID']), X_rus[train_id_patient])\n",
        "\n",
        "    img_list,  concentration, labels = data_train['indice'], data_train['concentration'], data_train['label']\n",
        "    train = LymphoDataset(orig, img_list, concentration, labels, get_transform(True))\n",
        "    train_loader = torch.utils.data.DataLoader(\n",
        "        train, batch_size=1, shuffle=True, num_workers=8, collate_fn=custom_fn)\n",
        "    \n",
        "\n",
        "    data_valid = return_data(df.set_index(['ID']), df.ID.to_numpy()[val_id_patient])\n",
        "    img_list, concentration, labels = data_valid['indice'], data_valid['concentration'], data_valid['label']\n",
        "    valid = LymphoDataset(orig, img_list, concentration, labels, get_transform(False))\n",
        "    valid_loader = torch.utils.data.DataLoader(\n",
        "        valid, batch_size=1, shuffle=False, num_workers=8, collate_fn=custom_fn)    \n",
        "    \n",
        "    model = GatedAttention().cuda()\n",
        "    for param in model.feature_extractor_part1.parameters():\n",
        "      param.requires_grad = False\n",
        "    for param in model.feature_extractor_part1.fc.parameters():\n",
        "      param.requires_grad = True\n",
        "\n",
        "    optimizer = torch.optim.Adam(model.parameters(), lr=0.00005, betas=(0.9, 0.999),weight_decay=0.000005)\n",
        "    best_model = train_model(model,epoch=15)\n",
        "    list_best_models.append(best_model)\n",
        "\n",
        "    current_split+=1"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "2PSVx879FSLy"
      },
      "source": [
        "##Downsampling"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "04ipTp9XFSLy"
      },
      "source": [
        "from sklearn.model_selection import StratifiedKFold, KFold\n",
        "from imblearn.under_sampling import RandomUnderSampler \n",
        "from imblearn.over_sampling import  RandomOverSampler\n",
        "\n",
        "\n",
        "orig = '/content/trainset/'\n",
        "\n",
        "df = pd.read_csv(\"clinical_annotation.csv\")\n",
        "df = df[df.LABEL > -0.5].reset_index(drop=True) # patient ID with label = -1 are the one that belongs to the test file\n",
        "df = df.drop('Unnamed: 0',axis=1)\n",
        "df.DOB = pd.to_datetime(df.DOB)\n",
        "df['AGE'] = pd.to_datetime('today').normalize() - pd.to_datetime(df.DOB)\n",
        "df.AGE = df.AGE.astype(\"timedelta64[Y]\")\n",
        "df = df[df.AGE > 62.]\n",
        "\n",
        "rus = RandomUnderSampler(return_indices=True)\n",
        "X_rus, y_rus, id_rus = rus.fit_sample(df.ID.to_numpy().reshape(-1, 1), df.LABEL.to_numpy().reshape(-1, 1))\n",
        "X_rus = np.squeeze(X_rus)\n",
        "y_rus = np.squeeze(y_rus)\n",
        "\n",
        "print(X_rus)\n",
        "print(y_rus)\n",
        "\n",
        "\n",
        "n_splits= 3\n",
        "current_split= 1\n",
        "skf = StratifiedKFold(n_splits=n_splits)\n",
        "\n",
        "list_best_models = []\n",
        "\n",
        "for train_id_patient, val_id_patient in skf.split(X_rus,y_rus):\n",
        "    print(X_rus[train_id_patient])\n",
        "    print(y_rus[train_id_patient])\n",
        "    print(X_rus[val_id_patient])\n",
        "    print(y_rus[val_id_patient])\n",
        "    print('Split {}/{}'.format(current_split,n_splits))\n",
        "    best_model = None\n",
        "    #data_train = return_data(df.set_index(['ID']), df.ID.to_numpy()[train_id_patient])\n",
        "    data_train = return_data(df.set_index(['ID']), X_rus[train_id_patient])\n",
        "\n",
        "    img_list,  concentration, labels = data_train['indice'], data_train['concentration'], data_train['label']\n",
        "    train = LymphoDataset(orig, img_list, concentration, labels, get_transform(True))\n",
        "    train_loader = torch.utils.data.DataLoader(\n",
        "        train, batch_size=1, shuffle=True, num_workers=8, collate_fn=custom_fn)\n",
        "    \n",
        "\n",
        "    data_valid = return_data(df.set_index(['ID']), df.ID.to_numpy()[val_id_patient])\n",
        "    img_list, concentration, labels = data_valid['indice'], data_valid['concentration'], data_valid['label']\n",
        "    valid = LymphoDataset(orig, img_list, concentration, labels, get_transform(False))\n",
        "    valid_loader = torch.utils.data.DataLoader(\n",
        "        valid, batch_size=1, shuffle=False, num_workers=8, collate_fn=custom_fn)    \n",
        "    \n",
        "    model = GatedAttention().cuda()\n",
        "    for param in model.feature_extractor_part1.parameters():\n",
        "      param.requires_grad = False\n",
        "    for param in model.feature_extractor_part1.fc.parameters():\n",
        "      param.requires_grad = True\n",
        "\n",
        "    optimizer = torch.optim.Adam(model.parameters(), lr=0.00005, betas=(0.9, 0.999),weight_decay=0.000005)\n",
        "    best_model = train_model(model,epoch=15)\n",
        "    list_best_models.append(best_model)\n",
        "\n",
        "    current_split+=1"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "YBgryRaVFSLz"
      },
      "source": [
        "df_test = pd.read_csv(\"testset/testset_data.csv\")\n",
        "\n",
        "data_test = return_data(df_test.set_index(['ID']), df_test.ID.to_list())\n",
        "\n",
        "orig = 'testset/'\n",
        "\n",
        "img_list,  concentration, labels = data_test['indice'], data_test['concentration'], data_test['label']\n",
        "test = LymphoDataset(orig, img_list, concentration, labels, get_transform(True))\n",
        "test_loader = torch.utils.data.DataLoader(\n",
        "    test, batch_size=1, shuffle=True, num_workers=8, collate_fn=custom_fn)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "g5cLWItVFSLz"
      },
      "source": [
        "def submission(model):\n",
        "  ID = []\n",
        "  outputs = []\n",
        "  model.eval()\n",
        "\n",
        "  for idx, batch in enumerate(test_loader):\n",
        "    data, name, bag_label = batch['images'].cuda(), batch['name'] , batch['label'].cuda()\n",
        "    ID.append(name[0])\n",
        "    _, predicted_label = model.calculate_classification_error(data, bag_label)\n",
        "    outputs.append(int(predicted_label.data.cpu().numpy()[0][0]))\n",
        "\n",
        "  df = pd.DataFrame({'Id': ID,'Predicted':outputs})\n",
        "  return df"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 66,
          "referenced_widgets": [
            "07f4c71ac64f41d48ed4e907587864de",
            "292117b49c1f49638b20372333f247ea",
            "c41b9676ecd14376ac29988e26cd8a03",
            "645b57ac05294609899ae18f3a6a8849",
            "66dafe411598436f92cc775139c5a59a",
            "15f3ecdaec3a4585a1f20fbcc942081f",
            "ae5a72671f1f4b46a57514923b6da812",
            "83c14482f0a7459cb05d3443b01b9784"
          ]
        },
        "id": "FGFb0iosFSL0",
        "outputId": "f4fc565c-a478-40b4-8802-cbc62ebd3faf"
      },
      "source": [
        "df_concat = []\n",
        "\n",
        "for model in tqdm(list_best_models):\n",
        "  df_concat.append(submission(model))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "07f4c71ac64f41d48ed4e907587864de",
              "version_major": 2,
              "version_minor": 0
            },
            "text/plain": [
              "HBox(children=(FloatProgress(value=0.0, max=3.0), HTML(value='')))"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2JP04bVBFSL0",
        "outputId": "5ae1c1d6-88bb-48c5-c238-a7a70130ae0e"
      },
      "source": [
        "from functools import reduce\n",
        "\n",
        "df_merged = reduce(lambda  left,right: pd.merge(left,right,on=['Id'],\n",
        "                                            how='outer'), df_concat)\n",
        "\n",
        "print(df_merged)\n",
        "df_merged.set_index('Id')\n",
        "df_merged = df_merged.set_index('Id').mode(axis=1)[0].to_frame()\n",
        "df_merged = df_merged.rename(columns={0:\"Predicted\"})\n",
        "df_merged.Predicted = df_merged.Predicted.astype(int)\n",
        "df_merged.to_csv('pred3.csv')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "      Id  Predicted_x  Predicted_y  Predicted\n",
            "0    P24            1            1          1\n",
            "1    P69            1            1          1\n",
            "2     P9            1            1          1\n",
            "3     P4            1            1          1\n",
            "4   P195            1            1          1\n",
            "5   P108            0            1          1\n",
            "6    P92            0            1          1\n",
            "7    P58            1            1          1\n",
            "8    P75            1            1          1\n",
            "9   P132            0            1          1\n",
            "10   P18            1            1          1\n",
            "11  P120            1            1          1\n",
            "12   P81            1            1          1\n",
            "13  P196            1            1          1\n",
            "14  P203            1            1          1\n",
            "15   P14            1            1          1\n",
            "16  P148            1            1          1\n",
            "17  P188            1            1          1\n",
            "18   P71            0            1          1\n",
            "19   P68            1            1          1\n",
            "20  P133            1            1          1\n",
            "21  P119            1            1          1\n",
            "22   P32            0            1          1\n",
            "23   P49            1            1          1\n",
            "24  P143            1            1          1\n",
            "25   P98            1            1          1\n",
            "26  P197            0            1          1\n",
            "27   P93            1            1          1\n",
            "28   P57            1            1          1\n",
            "29  P152            1            1          1\n",
            "30   P86            1            1          1\n",
            "31  P172            1            1          1\n",
            "32  P170            1            1          1\n",
            "33  P178            0            1          1\n",
            "34   P56            1            1          1\n",
            "35  P175            1            1          1\n",
            "36  P138            1            1          1\n",
            "37    P7            1            1          1\n",
            "38  P114            1            1          1\n",
            "39  P139            0            1          1\n",
            "40   P73            1            1          1\n",
            "41   P16            1            1          1\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "VoKgMlyDFSL0",
        "outputId": "45cc1279-575a-45c5-ab1c-bb29b53242af"
      },
      "source": [
        "df_merged"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Id</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>P170</th>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>P68</th>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>P49</th>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>P16</th>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>P4</th>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>P196</th>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>P175</th>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>P9</th>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>P58</th>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>P114</th>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>P81</th>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>P120</th>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>P56</th>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>P152</th>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>P108</th>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>P197</th>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>P132</th>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>P98</th>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>P86</th>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>P178</th>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>P203</th>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>P92</th>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>P93</th>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>P188</th>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>P148</th>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>P32</th>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>P14</th>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>P119</th>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>P139</th>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>P138</th>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>P7</th>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>P71</th>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>P143</th>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>P18</th>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>P69</th>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>P75</th>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>P133</th>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>P57</th>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>P195</th>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>P73</th>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>P24</th>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>P172</th>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "        0\n",
              "Id       \n",
              "P170  1.0\n",
              "P68   1.0\n",
              "P49   1.0\n",
              "P16   1.0\n",
              "P4    0.0\n",
              "P196  1.0\n",
              "P175  1.0\n",
              "P9    1.0\n",
              "P58   1.0\n",
              "P114  1.0\n",
              "P81   1.0\n",
              "P120  1.0\n",
              "P56   1.0\n",
              "P152  1.0\n",
              "P108  0.0\n",
              "P197  1.0\n",
              "P132  0.0\n",
              "P98   1.0\n",
              "P86   1.0\n",
              "P178  0.0\n",
              "P203  1.0\n",
              "P92   1.0\n",
              "P93   0.0\n",
              "P188  1.0\n",
              "P148  1.0\n",
              "P32   1.0\n",
              "P14   1.0\n",
              "P119  1.0\n",
              "P139  1.0\n",
              "P138  1.0\n",
              "P7    1.0\n",
              "P71   1.0\n",
              "P143  1.0\n",
              "P18   1.0\n",
              "P69   1.0\n",
              "P75   1.0\n",
              "P133  0.0\n",
              "P57   1.0\n",
              "P195  1.0\n",
              "P73   1.0\n",
              "P24   1.0\n",
              "P172  1.0"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 113
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "OIrbm_v0FSL0"
      },
      "source": [
        "##Oversampling"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "YL6rFUdpFSL1"
      },
      "source": [
        "from sklearn.model_selection import StratifiedKFold, KFold\n",
        "from imblearn.under_sampling import RandomUnderSampler \n",
        "from imblearn.over_sampling import  RandomOverSampler\n",
        "\n",
        "\n",
        "orig = '/content/trainset/'\n",
        "\n",
        "df = pd.read_csv(\"clinical_annotation.csv\")\n",
        "df = df[df.LABEL > -0.5].reset_index(drop=True) # patient ID with label = -1 are the one that belongs to the test file\n",
        "df = df.drop('Unnamed: 0',axis=1)\n",
        "df.DOB = pd.to_datetime(df.DOB)\n",
        "df['AGE'] = pd.to_datetime('today').normalize() - pd.to_datetime(df.DOB)\n",
        "df.AGE = df.AGE.astype(\"timedelta64[Y]\")\n",
        "df = df[df.AGE > 62.]\n",
        "\n",
        "ros = RandomOverSampler()\n",
        "X_rus, y_rus = ros.fit_sample(df.ID.to_numpy().reshape(-1, 1), df.LABEL.to_numpy().reshape(-1, 1))\n",
        "X_rus = np.squeeze(X_rus)\n",
        "y_rus = np.squeeze(y_rus)\n",
        "\n",
        "\n",
        "n_splits= 3\n",
        "current_split= 1\n",
        "skf = StratifiedKFold(n_splits=n_splits)\n",
        "\n",
        "list_best_models = []\n",
        "\n",
        "for train_id_patient, val_id_patient in skf.split(X_rus,y_rus):\n",
        "\n",
        "    print('Split {}/{}'.format(current_split,n_splits))\n",
        "    best_model = None\n",
        "    #data_train = return_data(df.set_index(['ID']), df.ID.to_numpy()[train_id_patient])\n",
        "    data_train = return_data(df.set_index(['ID']), X_rus[train_id_patient])\n",
        "\n",
        "    img_list,  concentration, labels = data_train['indice'], data_train['concentration'], data_train['label']\n",
        "    train = LymphoDataset(orig, img_list, concentration, labels, get_transform(True))\n",
        "    train_loader = torch.utils.data.DataLoader(\n",
        "        train, batch_size=1, shuffle=True, num_workers=8, collate_fn=custom_fn)\n",
        "    \n",
        "\n",
        "    data_valid = return_data(df.set_index(['ID']), X_rus[val_id_patient])\n",
        "    img_list, concentration, labels = data_valid['indice'], data_valid['concentration'], data_valid['label']\n",
        "    valid = LymphoDataset(orig, img_list, concentration, labels, get_transform(False))\n",
        "    valid_loader = torch.utils.data.DataLoader(\n",
        "        valid, batch_size=1, shuffle=False, num_workers=8, collate_fn=custom_fn)    \n",
        "    \n",
        "    model = GatedAttention().cuda()\n",
        "    for param in model.feature_extractor_part1.parameters():\n",
        "      param.requires_grad = False\n",
        "    for param in model.feature_extractor_part1.fc.parameters():\n",
        "      param.requires_grad = True\n",
        "\n",
        "    optimizer = torch.optim.Adam(model.parameters(), lr=0.00005, betas=(0.9, 0.999),weight_decay=0.000005)\n",
        "    best_model = train_model(model,epoch=15)\n",
        "    list_best_models.append(best_model)\n",
        "\n",
        "    current_split+=1"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "xFjoyrz9FSL1"
      },
      "source": [
        "df_test = pd.read_csv(\"testset/testset_data.csv\")\n",
        "\n",
        "data_test = return_data(df_test.set_index(['ID']), df_test.ID.to_list())\n",
        "\n",
        "orig = 'testset/'\n",
        "\n",
        "img_list,  concentration, labels = data_test['indice'], data_test['concentration'], data_test['label']\n",
        "test = LymphoDataset(orig, img_list, concentration, labels, get_transform(True))\n",
        "test_loader = torch.utils.data.DataLoader(\n",
        "    test, batch_size=1, shuffle=True, num_workers=8, collate_fn=custom_fn)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Xctzq0GZFSL1"
      },
      "source": [
        "def submission(model):\n",
        "  ID = []\n",
        "  outputs = []\n",
        "  model.eval()\n",
        "\n",
        "  for idx, batch in enumerate(test_loader):\n",
        "    data, name, bag_label = batch['images'].cuda(), batch['name'] , batch['label'].cuda()\n",
        "    ID.append(name[0])\n",
        "    _, predicted_label = model.calculate_classification_error(data, bag_label)\n",
        "    outputs.append(int(predicted_label.data.cpu().numpy()[0][0]))\n",
        "\n",
        "  df = pd.DataFrame({'Id': ID,'Predicted':outputs})\n",
        "  return df"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 66,
          "referenced_widgets": [
            "399bfbe17ae049f181bf6ffd2d3a06aa",
            "ad28dc5162ed47f5b4fb32dafdbd39cb",
            "b2b123465b304759a61e5b988403bd74",
            "31d97e74bdc94d7aa47fd005f11f3604",
            "84b8216f084c465893b7613a92899c9f",
            "782f252224344e62aea9baf60362e358",
            "52817edcf9ad4de09393588723d231c9",
            "fae0c6e23b5c44b2a0d3f4b9b5419fe0"
          ]
        },
        "id": "oc96Kc7ZFSL1",
        "outputId": "8c161e43-19d7-4d9b-e6b3-e533b2d70128"
      },
      "source": [
        "df_concat = []\n",
        "\n",
        "for model in tqdm(list_best_models):\n",
        "  df_concat.append(submission(model))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "399bfbe17ae049f181bf6ffd2d3a06aa",
              "version_major": 2,
              "version_minor": 0
            },
            "text/plain": [
              "HBox(children=(FloatProgress(value=0.0, max=3.0), HTML(value='')))"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "dUojlIeGFSL1"
      },
      "source": [
        "from functools import reduce\n",
        "\n",
        "df_merged = reduce(lambda  left,right: pd.merge(left,right,on=['Id'],\n",
        "                                            how='outer'), df_concat[:-1])\n",
        "\n",
        "print(df_merged)\n",
        "df_merged.set_index('Id')\n",
        "df_merged = df_merged.set_index('Id').mode(axis=1)[0].to_frame()\n",
        "df_merged = df_merged.rename(columns={0:\"Predicted\"})\n",
        "df_merged.Predicted = df_merged.Predicted.astype(int)\n",
        "df_merged.to_csv('pred3.csv')"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ud4GOuZFFSL2",
        "outputId": "288b55f4-a0e0-4556-d2b2-aafb68841eab"
      },
      "source": [
        "z# You can have a look on the output of each file\n",
        "train_id_patient[:3]"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['P131', 'P64', 'P147']"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 118
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "B0JcKmULFSL2"
      },
      "source": [
        "# For the train set\n",
        "data_train = return_data(df.set_index(['ID']), train_id_patient)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gSMQt2JcFSL2",
        "outputId": "717ab71e-fbf0-43ed-d8c0-8f42df2f2fa7"
      },
      "source": [
        "# Have a look on data_train (it is a dict with 4 keys (indice, age, concentration, label))\n",
        "print(data_train['indice'][:10])\n",
        "#print(data_train['age'][:3])\n",
        "print(data_train['concentration'][:10])\n",
        "print(data_train['label'][:10])"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "['P131', 'P64', 'P147', 'P96', 'P38', 'P2', 'P46', 'P146', 'P31', 'P41']\n",
            "[4.43, 4.28, 175.71, 21.27, 5.29, 30.83, 39.84, 5.72, 6.31, 4.25]\n",
            "[1, 0, 1, 1, 1, 1, 1, 0, 1, 0]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "v8MbHH1LFSL2"
      },
      "source": [
        "# Now creating the train_loader\n",
        "#img_list, ages, concentration, labels = data_train['indice'], data_train['age'], data_train['concentration'], data_train['label']\n",
        "img_list,  concentration, labels = data_train['indice'], data_train['concentration'], data_train['label']\n",
        "train = LymphoDataset(orig, img_list, concentration, labels, get_transform(True))\n",
        "train_loader = torch.utils.data.DataLoader(\n",
        "    train, batch_size=1, shuffle=True, num_workers=8, collate_fn=custom_fn)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "G6jZUJgqFSL2"
      },
      "source": [
        "I set batch_size to 1 because you'll have a memory issue otherwise. Indeed, there are some patient that have more than 100 images (the maximum is 198 images). but there is a walk around to work with larger batch size, you'll see :)"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "4QM3XCKxFSL3"
      },
      "source": [
        "iter = iter(train_loader)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "fj9dsBC3FSL3"
      },
      "source": [
        "test = next(iter)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NZ6ExkR4FSL3",
        "outputId": "7d45c8dc-721f-4257-bf29-360c38cf4986"
      },
      "source": [
        "test['images'].shape"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "torch.Size([104, 3, 224, 224])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 22
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ryg9MMBQFSL3"
      },
      "source": [
        "# We can do the same thing with validation \n",
        "data_valid = return_data(df.set_index(['ID']), val_id_patient)\n",
        "img_list, concentration, labels = data_valid['indice'], data_valid['concentration'], data_valid['label']\n",
        "valid = LymphoDataset(orig, img_list, concentration, labels, get_transform(False))\n",
        "valid_loader = torch.utils.data.DataLoader(\n",
        "    valid, batch_size=1, shuffle=False, num_workers=8, collate_fn=custom_fn)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "oqxs8cVyFSL3",
        "outputId": "fcad34ba-ee52-4110-ef71-e666f78219a0"
      },
      "source": [
        "### EXAMPLES ###\n",
        "start = time.time()\n",
        "for idx, batch in enumerate(train_loader):\n",
        "  test = batch\n",
        "print(f\"Time for loading all the train images : {round(time.time() - start, 4)} seconds\")"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Time for loading all the train images : 10.6299 seconds\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "DVEVkohxFSL3"
      },
      "source": [
        "It will probably took 30/40 seconds if you add data augmentation :) \\\n",
        "Now let's have a look on one of the element returned by train_loader"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "IslQXPA2FSL3"
      },
      "source": [
        "Now let's imagine you want to use mini batch gradient descent (backward on multiple element (batch_size > 1)) instead of a stochastic gradient descent (batch_size = 1)), I will show you a walk around to do that :)"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "29zX_zz3FSL3"
      },
      "source": [
        "def train_walk_around(train_loader, model, epochs, batch_size, criterion, optimizer):\n",
        "  for epoch_no in range(epochs):  \n",
        "    model.train()\n",
        "    total_loss = 0\n",
        "    outputs = []\n",
        "    labels = []\n",
        "    i = 0\n",
        "    for idx, batch in enumerate(train_loader):\n",
        "      img, label = batch['images'].cuda(), batch['label'].cuda()\n",
        "      #output, _ = model.get_outputs(img)\n",
        "      #output, _ = model(img)\n",
        "      output, Y_hat, A = model(img)\n",
        "      outputs.append(output)\n",
        "      labels.append(label)\n",
        "      i += 1\n",
        "      if i < batch_size and idx < len(train_loader)-1: \n",
        "          continue\n",
        "      outputs = torch.cat(outputs, dim=0)\n",
        "      labels = torch.cat(labels, dim=0)\n",
        "      loss = criterion(outputs, labels)\n",
        "      loss.backward()\n",
        "      optimizer.step()\n",
        "      optimizer.zero_grad()\n",
        "\n",
        "      total_loss += loss.item()\n",
        "\n",
        "      outputs = []\n",
        "      labels = []\n",
        "      i = 0"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "i48VCNGNFSL4"
      },
      "source": [
        "How does it work ? \\\n",
        "Code Explanation"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "RII2Uh8zFSL4"
      },
      "source": [
        "def train_walk_around(train_loader, model, epochs, batch_size, criterion, optimizer):\n",
        "  for epoch_no in range(self.epochs):  \n",
        "    model.train()\n",
        "    total_loss = 0\n",
        "    outputs = [] # List to store the outputs of the model \n",
        "    labels = [] # List to store the true label \n",
        "    i = 0 # For incrementation\n",
        "    for idx, batch in enumerate(train_loader):\n",
        "      img, label = batch['images'].cuda(), batch['label'].cuda() # Get the images and the label and transfer to GPU\n",
        "      output = model.get_outputs(img) # Get the output of the model \n",
        "      outputs.append(output) # store it in outputs\n",
        "      labels.append(label) # store it in labels\n",
        "      i += 1 # Incrementation\n",
        "      if i < batch_size and idx < len(train_loader)-1: \n",
        "        # Now if the number of patient (representend by bag of images) on which we ran the model\n",
        "        # is less than the batch size, we won't backpropagate and we will skip the lines of code below\n",
        "        # and move to the next patient\n",
        "        continue\n",
        "      # Now that we have ran our model on batch_size patients we can backpropagate.\n",
        "      outputs = torch.cat(outputs, dim=0)\n",
        "      labels = torch.cat(labels, dim=0)\n",
        "      loss = criterion(outputs, labels)\n",
        "      loss.backward()\n",
        "      optimizer.step()\n",
        "      optimizer.zero_grad()\n",
        "\n",
        "      total_loss += loss.item()\n",
        "\n",
        "      outputs = []\n",
        "      labels = []\n",
        "      i = 0"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "s3HXtxqYFSL4"
      },
      "source": [
        "So this is the naive framework, the issue here is that you need a small model (resnet34 for instance) if you have less than 16/17 gb of VRAM (GPU RAM). \\"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 104,
          "referenced_widgets": [
            "159f81c68bda465c8f6f7db35ad6c78d",
            "98b477c8c17f438c8525b4bbb0f3aae1",
            "ccc4fb232ed941a2ba2164ccb39dad31",
            "5ecd1fb1058d4e42be82814736ed6c34",
            "d1a60de5ec3e4a86a8d108f4f4c46d8c",
            "e580cdf302a748528a9a059230684b97",
            "8158a197c13240ebb34dde656cb967cf",
            "77ba8e6aac194fde9774a7775bd65c9f"
          ]
        },
        "id": "Wg50NWo5FSL4",
        "outputId": "6361b7ef-b747-4650-cafc-39526d60a2a4"
      },
      "source": [
        "model_conv = models.resnet50(pretrained=True)\n",
        "for param in model_conv.parameters():\n",
        "    param.requires_grad = False\n",
        "\n",
        "# Parameters of newly constructed modules have requires_grad=True by default\n",
        "num_ftrs = model_conv.fc.out_features\n",
        "\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Downloading: \"https://download.pytorch.org/models/resnet50-19c8e357.pth\" to /root/.cache/torch/hub/checkpoints/resnet50-19c8e357.pth\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "159f81c68bda465c8f6f7db35ad6c78d",
              "version_major": 2,
              "version_minor": 0
            },
            "text/plain": [
              "HBox(children=(FloatProgress(value=0.0, max=102502400.0), HTML(value='')))"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "yOHM_ThfFSL4"
      },
      "source": [
        "        model_conv = models.resnet18(pretrained=True)\n",
        "        #model_conv = model_conv.to(device)\n",
        "        #model_conv = model_conv\n",
        "        for param in model_conv.parameters():\n",
        "            param.requires_grad = False\n",
        "\n",
        "\n",
        "        #model_conv.fc.out_features\n",
        "        # Parameters of newly constructed modules have requires_grad=True by default\n",
        "        num_ftrs = model_conv.fc.in_features\n",
        "        del model_conv.fc"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "596RYHJuFSL4"
      },
      "source": [
        "from torchvision import models\n",
        "device = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "P0eN50qNFSL4"
      },
      "source": [
        "from torchvision import models\n",
        "import copy\n",
        "#optimizer = torch.optim.SGD(model_conv.fc.parameters(), lr=0.001, momentum=0.9)\n",
        "\n",
        "def train(model,epoch):\n",
        "    best_model_wts = copy.deepcopy(model.state_dict())\n",
        "    best_acc_test = 0.0\n",
        "    best_acc_train = 0.0\n",
        "\n",
        "    for epoch_ in range(1,epoch):\n",
        "      correct = 0\n",
        "      total = 0\n",
        "      model.train()\n",
        "      train_loss = 0.\n",
        "      train_error = 0.\n",
        "      outputs = [] # List to store the outputs of the model \n",
        "      labels = [] # List to store the true label \n",
        "\n",
        "      #for batch_idx, (data, label) in enumerate(train_loader):\n",
        "      for idx, batch in enumerate(train_loader):\n",
        "          data, bag_label = batch['images'].cuda(), batch['label'].cuda()\n",
        "          #bag_label = label[0]\n",
        "          #if args.cuda:\n",
        "          #    data, bag_label = data.cuda(), bag_label.cuda()\n",
        "          #data, bag_label = Variable(data), Variable(bag_label)\n",
        "\n",
        "          # reset gradients\n",
        "          optimizer.zero_grad()\n",
        "          # calculate loss and metrics\n",
        "          loss, _ = model.calculate_objective(data, bag_label)\n",
        "          train_loss += loss.data[0]\n",
        "          error, output = model.calculate_classification_error(data, bag_label)\n",
        "          train_error += error\n",
        "\n",
        "          outputs.append(output) # store it in outputs\n",
        "          labels.append(bag_label) \n",
        "          # backward pass\n",
        "          loss.backward()\n",
        "          # step\n",
        "          optimizer.step()\n",
        "\n",
        "      # calculate loss and error for epoch\n",
        "      train_loss /= len(train_loader)\n",
        "      train_error /= len(train_loader)\n",
        "\n",
        "\n",
        "      total = len(labels)\n",
        "      outputs= np.asarray(outputs)\n",
        "      labels= np.asarray(labels)\n",
        "\n",
        "      correct += (outputs == labels).sum().item()\n",
        "\n",
        "      acc = 100 * correct / total\n",
        "\n",
        "      print('Epoch: {}, Loss: {:.4f}, Train error: {:.4f}, Accuracy: {}'.format(epoch_, train_loss.cpu().numpy()[0], train_error, acc))\n",
        "\n",
        "      test_loss , test_acc = test()\n",
        "\n",
        "      if test_acc >= best_acc_test and acc > best_acc_train:\n",
        "        best_acc_test = test_acc\n",
        "        best_acc_train = acc\n",
        "        best_model_wts = copy.deepcopy(model.state_dict())\n",
        "        print(\"model successfully savec\")\n",
        "\n",
        "    model.load_state_dict(best_model_wts)\n",
        "\n",
        "    return model\n",
        "\n",
        "def test():\n",
        "    correct = 0\n",
        "    total = 0\n",
        "\n",
        "    outputs = [] # List to store the outputs of the model \n",
        "    labels = [] # List to store the true label \n",
        "\n",
        "    model.eval()\n",
        "    test_loss = 0.\n",
        "    test_error = 0.\n",
        "    #for batch_idx, (data, label) in enumerate(test_loader):\n",
        "    for idx, batch in enumerate(valid_loader):\n",
        "        data, bag_label = batch['images'].cuda(), batch['label'].cuda()\n",
        "\n",
        "        loss, attention_weights = model.calculate_objective(data, bag_label)\n",
        "        test_loss += loss.data[0]\n",
        "        error, predicted_label = model.calculate_classification_error(data, bag_label)\n",
        "        test_error += error\n",
        "\n",
        "        if idx < 5:  # plot bag labels and instance labels for first 5 bags\n",
        "            bag_level = (bag_label.cpu().data.numpy()[0], int(predicted_label.cpu().data.numpy()[0][0]))\n",
        "            #instance_level = list(zip(instance_labels.numpy()[0].tolist(),\n",
        "            #                     np.round(attention_weights.cpu().data.numpy()[0], decimals=3).tolist()))\n",
        "\n",
        "            #print('\\nTrue Bag Label, Predicted Bag Label: {}\\n'\n",
        "            #      'True Instance Labels, Attention Weights: {}'.format(bag_level, instance_level))\n",
        "        outputs.append(predicted_label) # store it in outputs\n",
        "        labels.append(bag_label) \n",
        "\n",
        "    test_error /= len(valid_loader)\n",
        "    test_loss /= len(valid_loader)\n",
        "\n",
        "    total = len(labels)\n",
        "    outputs= np.asarray(outputs)\n",
        "    labels= np.asarray(labels)\n",
        "\n",
        "    correct += (outputs == labels).sum().item()\n",
        "\n",
        "    print('Test Set, Loss: {:.4f}, Test error: {:.4f}, Accuracy: {}\\n'.format(test_loss.cpu().numpy()[0], test_error,  100 * correct / total))\n",
        "\n",
        "    return test_loss.cpu().numpy()[0] , 100 * correct / total\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "SHa89c9rFSL4"
      },
      "source": [
        "import torch\n",
        "import torch.nn as nn\n",
        "import torch.nn.functional as F\n",
        "\n",
        "\n",
        "class Attention(nn.Module):\n",
        "    def __init__(self):\n",
        "        super(Attention, self).__init__()\n",
        "        self.L = 500\n",
        "        self.D = 128\n",
        "        self.K = 1\n",
        "\n",
        "        self.feature_extractor_part1 = nn.Sequential(\n",
        "            nn.Conv2d(1, 20, kernel_size=5),\n",
        "            nn.ReLU(),\n",
        "            nn.MaxPool2d(2, stride=2),\n",
        "            nn.Conv2d(20, 50, kernel_size=5),\n",
        "            nn.ReLU(),\n",
        "            nn.MaxPool2d(2, stride=2)\n",
        "        )\n",
        "\n",
        "        self.feature_extractor_part2 = nn.Sequential(\n",
        "            nn.Linear(50 * 4 * 4, self.L),\n",
        "            nn.ReLU(),\n",
        "        )\n",
        "\n",
        "        self.attention = nn.Sequential(\n",
        "            nn.Linear(self.L, self.D),\n",
        "            nn.Tanh(),\n",
        "            nn.Linear(self.D, self.K)\n",
        "        )\n",
        "\n",
        "        self.classifier = nn.Sequential(\n",
        "            nn.Linear(self.L*self.K, 1),\n",
        "            nn.Sigmoid()\n",
        "        )\n",
        "\n",
        "    def forward(self, x):\n",
        "        x = x.squeeze(0)\n",
        "\n",
        "        H = self.feature_extractor_part1(x)\n",
        "        H = H.view(-1, 50 * 4 * 4)\n",
        "        H = self.feature_extractor_part2(H)  # NxL\n",
        "\n",
        "        A = self.attention(H)  # NxK\n",
        "        A = torch.transpose(A, 1, 0)  # KxN\n",
        "        A = F.softmax(A, dim=1)  # softmax over N\n",
        "\n",
        "        M = torch.mm(A, H)  # KxL\n",
        "\n",
        "        Y_prob = self.classifier(M)\n",
        "        Y_hat = torch.ge(Y_prob, 0.5).float()\n",
        "\n",
        "        return Y_prob, Y_hat, A\n",
        "\n",
        "    # AUXILIARY METHODS\n",
        "    def calculate_classification_error(self, X, Y):\n",
        "        Y = Y.float()\n",
        "        _, Y_hat, _ = self.forward(X)\n",
        "        error = 1. - Y_hat.eq(Y).cpu().float().mean().data[0]\n",
        "\n",
        "        return error, Y_hat\n",
        "\n",
        "    def calculate_objective(self, X, Y):\n",
        "        Y = Y.float()\n",
        "        Y_prob, _, A = self.forward(X)\n",
        "        Y_prob = torch.clamp(Y_prob, min=1e-5, max=1. - 1e-5)\n",
        "        neg_log_likelihood = -1. * (Y * torch.log(Y_prob) + (1. - Y) * torch.log(1. - Y_prob))  # negative log bernoulli\n",
        "\n",
        "        return neg_log_likelihood, A\n",
        "\n",
        "class GatedAttention(nn.Module):\n",
        "    def __init__(self):\n",
        "        super(GatedAttention, self).__init__()\n",
        "        self.L = 500\n",
        "        self.D = 128\n",
        "        self.K = 1\n",
        "\n",
        "        \"\"\"\n",
        "        self.feature_extractor_part1 = nn.Sequential(\n",
        "            nn.Conv2d(1, 20, kernel_size=5),\n",
        "            nn.ReLU(),\n",
        "            nn.MaxPool2d(2, stride=2),\n",
        "            nn.Conv2d(20, 50, kernel_size=5),\n",
        "            nn.ReLU(),\n",
        "            nn.MaxPool2d(2, stride=2)\n",
        "        )\n",
        "        \"\"\"\n",
        "\n",
        "        #model_conv = models.resnet152(pretrained=True)\n",
        "        model_conv = models.resnet50(pretrained=True)\n",
        "\n",
        "\n",
        "        #model_conv.fc.out_features\n",
        "        # Parameters of newly constructed modules have requires_grad=True by default\n",
        "        #num_ftrs = model_conv.fc.in_features\n",
        "        #del model_conv.fc\n",
        "        #model_conv.fc = None\n",
        "\n",
        "        self.feature_extractor_part1 = model_conv\n",
        "        \n",
        "        num_ftrs = 1000\n",
        "\n",
        "        self.feature_extractor_part2 = nn.Sequential(\n",
        "            nn.Linear(num_ftrs, self.L),\n",
        "            nn.ReLU(),\n",
        "            nn.Dropout(0.5)\n",
        "        )\n",
        "\n",
        "        self.attention_V = nn.Sequential(\n",
        "            nn.Linear(self.L, self.D),\n",
        "            nn.Tanh()\n",
        "        )\n",
        "\n",
        "        self.attention_U = nn.Sequential(\n",
        "            nn.Linear(self.L, self.D),\n",
        "            nn.Sigmoid()\n",
        "        )\n",
        "\n",
        "        self.attention_weights = nn.Linear(self.D, self.K)\n",
        "\n",
        "        self.classifier = nn.Sequential(\n",
        "            nn.Linear(self.L*self.K, 1),\n",
        "            nn.Sigmoid()\n",
        "        )\n",
        "\n",
        "    def forward(self, x):\n",
        "        x = x.squeeze(0)\n",
        "\n",
        "        H = self.feature_extractor_part1(x)\n",
        "        #print(H.shape)\n",
        "        #H = H.view(-1, num_ftrs)\n",
        "        H = self.feature_extractor_part2(H)  # NxL\n",
        "\n",
        "        A_V = self.attention_V(H)  # NxD\n",
        "        A_U = self.attention_U(H)  # NxD\n",
        "        A = self.attention_weights(A_V * A_U) # element wise multiplication # NxK\n",
        "        A = torch.transpose(A, 1, 0)  # KxN\n",
        "        A = F.softmax(A, dim=1)  # softmax over N\n",
        "\n",
        "        M = torch.mm(A, H)  # KxL\n",
        "\n",
        "        Y_prob = self.classifier(M)\n",
        "        Y_hat = torch.ge(Y_prob, 0.5).float()\n",
        "\n",
        "        return Y_prob, Y_hat, A\n",
        "\n",
        "    # AUXILIARY METHODS\n",
        "    def calculate_classification_error(self, X, Y):\n",
        "        Y = Y.float()\n",
        "        _, Y_hat, _ = self.forward(X)\n",
        "        error = 1. - Y_hat.eq(Y).cpu().float().mean().item()\n",
        "\n",
        "        return error, Y_hat\n",
        "\n",
        "    def calculate_objective(self, X, Y):\n",
        "        Y = Y.float()\n",
        "        Y_prob, _, A = self.forward(X)\n",
        "        Y_prob = torch.clamp(Y_prob, min=1e-5, max=1. - 1e-5)\n",
        "        neg_log_likelihood = -1. * (Y * torch.log(Y_prob) + (1. - Y) * torch.log(1. - Y_prob))  # negative log bernoulli\n",
        "\n",
        "        return neg_log_likelihood, A"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "9FN-4Nr7FSL4"
      },
      "source": [
        "model = GatedAttention().cuda()\n",
        "for param in model.feature_extractor_part1.parameters():\n",
        "  param.requires_grad = False\n",
        "for param in model.feature_extractor_part1.fc.parameters():\n",
        "  param.requires_grad = True"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "M5dlI073FSL5"
      },
      "source": [
        "from torchsummary import summary\n",
        "\n",
        "summary(model,input_size=(3,224,224))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "n4mITAPqFSL5",
        "outputId": "00834b5e-e7b3-47bc-9aea-b29c92ba1603"
      },
      "source": [
        "#optimizer = torch.optim.Adam(model.parameters(), lr=0.0005, betas=(0.9, 0.999),weight_decay=0.05)\n",
        "model = GatedAttention().cuda()\n",
        "for param in model.feature_extractor_part1.parameters():\n",
        "  param.requires_grad = False\n",
        "for param in model.feature_extractor_part1.fc.parameters():\n",
        "  param.requires_grad = True\n",
        "\n",
        "\n",
        "optimizer = torch.optim.Adam(model.parameters(), lr=0.00005, betas=(0.9, 0.999),weight_decay=0.000005)\n",
        "best_model = train(model,epoch=15)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Epoch: 1, Loss: 0.6706, Train error: 0.3361, Accuracy: 66.39344262295081\n",
            "Test Set, Loss: 0.5148, Test error: 0.2195, Accuracy: 78.04878048780488\n",
            "\n",
            "model successfully savec\n",
            "Epoch: 2, Loss: 0.6578, Train error: 0.3361, Accuracy: 66.39344262295081\n",
            "Test Set, Loss: 0.5521, Test error: 0.2195, Accuracy: 78.04878048780488\n",
            "\n",
            "Epoch: 3, Loss: 0.6332, Train error: 0.3852, Accuracy: 61.47540983606557\n",
            "Test Set, Loss: 0.5200, Test error: 0.2195, Accuracy: 78.04878048780488\n",
            "\n",
            "Epoch: 4, Loss: 0.6229, Train error: 0.3361, Accuracy: 66.39344262295081\n",
            "Test Set, Loss: 0.5621, Test error: 0.2195, Accuracy: 78.04878048780488\n",
            "\n",
            "Epoch: 5, Loss: 0.6075, Train error: 0.3361, Accuracy: 66.39344262295081\n",
            "Test Set, Loss: 0.6433, Test error: 0.3171, Accuracy: 68.29268292682927\n",
            "\n",
            "Epoch: 6, Loss: 0.6001, Train error: 0.3115, Accuracy: 68.85245901639344\n",
            "Test Set, Loss: 0.6186, Test error: 0.2439, Accuracy: 75.60975609756098\n",
            "\n",
            "Epoch: 7, Loss: 0.5848, Train error: 0.3115, Accuracy: 68.85245901639344\n",
            "Test Set, Loss: 0.5647, Test error: 0.1707, Accuracy: 82.92682926829268\n",
            "\n",
            "model successfully savec\n",
            "Epoch: 8, Loss: 0.5232, Train error: 0.1803, Accuracy: 81.9672131147541\n",
            "Test Set, Loss: 0.5233, Test error: 0.2195, Accuracy: 78.04878048780488\n",
            "\n",
            "Epoch: 9, Loss: 0.4913, Train error: 0.2295, Accuracy: 77.04918032786885\n",
            "Test Set, Loss: 0.5104, Test error: 0.1707, Accuracy: 82.92682926829268\n",
            "\n",
            "model successfully savec\n",
            "Epoch: 10, Loss: 0.3708, Train error: 0.1557, Accuracy: 84.42622950819673\n",
            "Test Set, Loss: 0.6822, Test error: 0.3902, Accuracy: 60.97560975609756\n",
            "\n",
            "Epoch: 11, Loss: 0.2835, Train error: 0.1230, Accuracy: 87.70491803278688\n",
            "Test Set, Loss: 0.5945, Test error: 0.2683, Accuracy: 73.17073170731707\n",
            "\n",
            "Epoch: 12, Loss: 0.2513, Train error: 0.0492, Accuracy: 95.08196721311475\n",
            "Test Set, Loss: 0.4661, Test error: 0.2683, Accuracy: 73.17073170731707\n",
            "\n",
            "Epoch: 13, Loss: 0.1853, Train error: 0.0328, Accuracy: 96.72131147540983\n",
            "Test Set, Loss: 0.8378, Test error: 0.4146, Accuracy: 58.53658536585366\n",
            "\n",
            "Epoch: 14, Loss: 0.1419, Train error: 0.0246, Accuracy: 97.54098360655738\n",
            "Test Set, Loss: 0.8603, Test error: 0.3659, Accuracy: 63.41463414634146\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "W4VdYXzdFSL5",
        "outputId": "a37649e9-9a72-49bd-f1c2-1d4189e75311"
      },
      "source": [
        "test()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Test Set, Loss: 0.5104, Test error: 0.1707, Accuracy: 82.92682926829268\n",
            "\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(0.51040226, 82.92682926829268)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 126
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "o3acDwTQ1n1c"
      },
      "source": [
        "from torchvision import models\n",
        "import copy\n",
        "#optimizer = torch.optim.SGD(model_conv.fc.parameters(), lr=0.001, momentum=0.9)\n",
        "\n",
        "def train_model(model,epoch):\n",
        "    best_model_wts = copy.deepcopy(model.state_dict())\n",
        "    best_acc_test = 0.0\n",
        "    best_acc_train = 0.0\n",
        "    best_loss_test = 1000.0\n",
        "\n",
        "    for epoch_ in range(1,epoch):\n",
        "      correct = 0\n",
        "      total = 0\n",
        "      model.train()\n",
        "      train_loss = 0.\n",
        "      train_error = 0.\n",
        "      outputs = [] # List to store the outputs of the model \n",
        "      labels = [] # List to store the true label \n",
        "\n",
        "      #for batch_idx, (data, label) in enumerate(train_loader):\n",
        "      for idx, batch in enumerate(train_loader):\n",
        "          data, bag_label, age, concentration  = batch['images'].cuda(), batch['label'].cuda(), batch['age'].cuda(), batch['concentration'].cuda()\n",
        "          #bag_label = label[0]\n",
        "          #if args.cuda:\n",
        "          #    data, bag_label = data.cuda(), bag_label.cuda()\n",
        "          #data, bag_label = Variable(data), Variable(bag_label)\n",
        "\n",
        "          # reset gradients\n",
        "          optimizer.zero_grad()\n",
        "          # calculate loss and metrics\n",
        "          loss, _ = model.calculate_objective(data, bag_label)\n",
        "          train_loss += loss.data[0]\n",
        "          error, output = model.calculate_classification_error(data, bag_label)\n",
        "          train_error += error\n",
        "\n",
        "          outputs.append(output) # store it in outputs\n",
        "          labels.append(bag_label) \n",
        "          # backward pass\n",
        "          loss.backward()\n",
        "          # step\n",
        "          optimizer.step()\n",
        "\n",
        "      # calculate loss and error for epoch\n",
        "      train_loss /= len(train_loader)\n",
        "      train_error /= len(train_loader)\n",
        "\n",
        "\n",
        "      total = len(labels)\n",
        "      outputs= np.asarray(outputs)\n",
        "      labels= np.asarray(labels)\n",
        "\n",
        "      correct += (outputs == labels).sum().item()\n",
        "\n",
        "      acc = 100 * correct / total\n",
        "\n",
        "      print('Epoch: {}, Loss: {:.4f}, Train error: {:.4f}, Accuracy: {}'.format(epoch_, train_loss.cpu().numpy()[0], train_error, acc))\n",
        "\n",
        "      test_loss , test_acc = test()\n",
        "\n",
        "      if test_loss < best_loss_test:\n",
        "        best_loss_test = test_loss\n",
        "        best_model_wts = copy.deepcopy(model.state_dict())\n",
        "        print(\"model successfully saved\")\n",
        "\n",
        "    model.load_state_dict(best_model_wts)\n",
        "\n",
        "    return model\n",
        "\n",
        "def test():\n",
        "    correct = 0\n",
        "    total = 0\n",
        "\n",
        "    outputs = [] # List to store the outputs of the model \n",
        "    labels = [] # List to store the true label \n",
        "\n",
        "    model.eval()\n",
        "    test_loss = 0.\n",
        "    test_error = 0.\n",
        "    #for batch_idx, (data, label) in enumerate(test_loader):\n",
        "    for idx, batch in enumerate(valid_loader):\n",
        "        data, bag_label = batch['images'].cuda(), batch['label'].cuda()\n",
        "\n",
        "        loss, attention_weights = model.calculate_objective(data, bag_label)\n",
        "        test_loss += loss.data[0]\n",
        "        error, predicted_label = model.calculate_classification_error(data, bag_label)\n",
        "        test_error += error\n",
        "\n",
        "        if idx < 5:  # plot bag labels and instance labels for first 5 bags\n",
        "            bag_level = (bag_label.cpu().data.numpy()[0], int(predicted_label.cpu().data.numpy()[0][0]))\n",
        "            #instance_level = list(zip(instance_labels.numpy()[0].tolist(),\n",
        "            #                     np.round(attention_weights.cpu().data.numpy()[0], decimals=3).tolist()))\n",
        "\n",
        "            #print('\\nTrue Bag Label, Predicted Bag Label: {}\\n'\n",
        "            #      'True Instance Labels, Attention Weights: {}'.format(bag_level, instance_level))\n",
        "        outputs.append(predicted_label) # store it in outputs\n",
        "        labels.append(bag_label) \n",
        "\n",
        "    test_error /= len(valid_loader)\n",
        "    test_loss /= len(valid_loader)\n",
        "\n",
        "    total = len(labels)\n",
        "    outputs= np.asarray(outputs)\n",
        "    labels= np.asarray(labels)\n",
        "\n",
        "    correct += (outputs == labels).sum().item()\n",
        "\n",
        "    print('Test Set, Loss: {:.4f}, Test error: {:.4f}, Accuracy: {}\\n'.format(test_loss.cpu().numpy()[0], test_error,  100 * correct / total))\n",
        "\n",
        "    return test_loss.cpu().numpy()[0] , 100 * correct / total\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "q01YLaTz1n1q"
      },
      "source": [
        "import torch\n",
        "import torch.nn as nn\n",
        "import torch.nn.functional as F\n",
        "\n",
        "\n",
        "\n",
        "class GatedAttention(nn.Module):\n",
        "    def __init__(self):\n",
        "        super(GatedAttention, self).__init__()\n",
        "        self.L = 500\n",
        "        self.D = 128\n",
        "        self.K = 1\n",
        "\n",
        "        \"\"\"\n",
        "        self.feature_extractor_part1 = nn.Sequential(\n",
        "            nn.Conv2d(1, 20, kernel_size=5),\n",
        "            nn.ReLU(),\n",
        "            nn.MaxPool2d(2, stride=2),\n",
        "            nn.Conv2d(20, 50, kernel_size=5),\n",
        "            nn.ReLU(),\n",
        "            nn.MaxPool2d(2, stride=2)\n",
        "        )\n",
        "        \"\"\"\n",
        "\n",
        "        #model_conv = models.resnet152(pretrained=True)\n",
        "        model_conv = models.resnet50(pretrained=True)\n",
        "\n",
        "\n",
        "        #model_conv.fc.out_features\n",
        "        # Parameters of newly constructed modules have requires_grad=True by default\n",
        "        #num_ftrs = model_conv.fc.in_features\n",
        "        #del model_conv.fc\n",
        "        #model_conv.fc = None\n",
        "\n",
        "        self.feature_extractor_part1 = model_conv\n",
        "        \n",
        "        num_ftrs = 1000\n",
        "\n",
        "        self.feature_extractor_part2 = nn.Sequential(\n",
        "            nn.Linear(num_ftrs, self.L),\n",
        "            nn.ReLU(),\n",
        "            nn.Dropout(0.5)\n",
        "        )\n",
        "\n",
        "        self.attention_V = nn.Sequential(\n",
        "            nn.Linear(self.L, self.D),\n",
        "            nn.Tanh()\n",
        "        )\n",
        "\n",
        "        self.attention_U = nn.Sequential(\n",
        "            nn.Linear(self.L, self.D),\n",
        "            nn.Sigmoid()\n",
        "        )\n",
        "\n",
        "        self.attention_weights = nn.Linear(self.D, self.K)\n",
        "\n",
        "        self.classifier = nn.Sequential(\n",
        "            nn.Linear(self.L*self.K, 1),\n",
        "            nn.Sigmoid()\n",
        "        )\n",
        "\n",
        "    def forward(self, x):\n",
        "        x = x.squeeze(0)\n",
        "\n",
        "        H = self.feature_extractor_part1(x)\n",
        "        #print(H.shape)\n",
        "        #H = H.view(-1, num_ftrs)\n",
        "        H = self.feature_extractor_part2(H)  # NxL\n",
        "\n",
        "        A_V = self.attention_V(H)  # NxD\n",
        "        A_U = self.attention_U(H)  # NxD\n",
        "        A = self.attention_weights(A_V * A_U) # element wise multiplication # NxK\n",
        "        A = torch.transpose(A, 1, 0)  # KxN\n",
        "        A = F.softmax(A, dim=1)  # softmax over N\n",
        "\n",
        "        M = torch.mm(A, H)  # KxL\n",
        "\n",
        "        Y_prob = self.classifier(M)\n",
        "        Y_hat = torch.ge(Y_prob, 0.5).float()\n",
        "\n",
        "        return Y_prob, Y_hat, A\n",
        "\n",
        "    # AUXILIARY METHODS\n",
        "    def calculate_classification_error(self, X, Y):\n",
        "        Y = Y.float()\n",
        "        _, Y_hat, _ = self.forward(X)\n",
        "        error = 1. - Y_hat.eq(Y).cpu().float().mean().item()\n",
        "\n",
        "        return error, Y_hat\n",
        "\n",
        "    def calculate_objective(self, X, Y):\n",
        "        Y = Y.float()\n",
        "        Y_prob, _, A = self.forward(X)\n",
        "        Y_prob = torch.clamp(Y_prob, min=1e-5, max=1. - 1e-5)\n",
        "        neg_log_likelihood = -1. * (Y * torch.log(Y_prob) + (1. - Y) * torch.log(1. - Y_prob))  # negative log bernoulli\n",
        "\n",
        "        return neg_log_likelihood, A"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "kB9UkqEj1YBC"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "B7R1UDCKmSXK",
        "outputId": "381af2bd-b2f4-4bcc-d825-b0c65e0582c0"
      },
      "source": [
        "df = pd.read_csv(\"clinical_annotation.csv\")\n",
        "df = df.drop('Unnamed: 0',axis=1)\n",
        "df.DOB = pd.to_datetime(df.DOB)\n",
        "df['AGE'] = pd.to_datetime('today').normalize() - pd.to_datetime(df.DOB)\n",
        "df.AGE = df.AGE.astype(\"timedelta64[Y]\")\n",
        "\n",
        "diagnoses = np.unique(df.LABEL.values)\n",
        "population_df = pd.DataFrame(index=diagnoses,\n",
        "                                columns=['N', 'AGE', 'GENDER', 'LYMPH_COUNT'])\n",
        "\n",
        "merged_df = df.set_index(['ID'], drop=True)\n",
        "df = df.set_index(['ID'], drop=True)\n",
        "sub_merged_df = merged_df.loc[df.index]\n",
        "\n",
        "for diagnosis in population_df.index.values:\n",
        "    diagnosis_df = sub_merged_df[df.LABEL == diagnosis]\n",
        "    population_df.loc[diagnosis, 'N'] = len(diagnosis_df)\n",
        "    \n",
        "    # Age\n",
        "    mean_age = np.mean(diagnosis_df.AGE)\n",
        "    std_age = np.std(diagnosis_df.AGE)\n",
        "    population_df.loc[diagnosis, 'AGE'] = '%.1f ± %.1f' % (mean_age, std_age)\n",
        "    # Sex\n",
        "    population_df.loc[diagnosis, 'GENDER'] = round((len(diagnosis_df[diagnosis_df.GENDER == 'F']) / len(diagnosis_df)) * 100, 1)\n",
        "    # Lymph count\n",
        "    mean_lymph = np.mean(diagnosis_df.LYMPH_COUNT)\n",
        "    std_lymph = np.std(diagnosis_df.LYMPH_COUNT)\n",
        "    population_df.loc[diagnosis, 'LYMPH_COUNT'] = '%.1f ± %.1f' % (mean_lymph, std_lymph)\n",
        "print(population_df)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "      N          AGE GENDER  LYMPH_COUNT\n",
            "-1   42  65.8 ± 19.4   42.9  24.4 ± 43.6\n",
            " 0   50  54.3 ± 19.6     52    5.0 ± 1.0\n",
            " 1  113  75.4 ± 12.0   47.8  35.9 ± 53.3\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "siUUVfLZ94Zk",
        "outputId": "546d6cf7-19c7-4d62-ffdd-dccca472434e"
      },
      "source": [
        "df = pd.read_csv(\"clinical_annotation.csv\")\n",
        "df = df.drop('Unnamed: 0',axis=1)\n",
        "df.DOB = pd.to_datetime(df.DOB)\n",
        "df['AGE'] = pd.to_datetime('today').normalize() - pd.to_datetime(df.DOB)\n",
        "df.AGE = df.AGE.astype(\"timedelta64[Y]\")\n",
        "df = df[df.AGE > 62.]\n",
        "\n",
        "diagnoses = np.unique(df.LABEL.values)\n",
        "population_df = pd.DataFrame(index=diagnoses,\n",
        "                                columns=['N', 'AGE', 'GENDER', 'LYMPH_COUNT'])\n",
        "\n",
        "merged_df = df.set_index(['ID'], drop=True)\n",
        "df = df.set_index(['ID'], drop=True)\n",
        "sub_merged_df = merged_df.loc[df.index]\n",
        "\n",
        "for diagnosis in population_df.index.values:\n",
        "    diagnosis_df = sub_merged_df[df.LABEL == diagnosis]\n",
        "    population_df.loc[diagnosis, 'N'] = len(diagnosis_df)\n",
        "    \n",
        "    # Age\n",
        "    mean_age = np.mean(diagnosis_df.AGE)\n",
        "    std_age = np.std(diagnosis_df.AGE)\n",
        "    population_df.loc[diagnosis, 'AGE'] = '%.1f ± %.1f' % (mean_age, std_age)\n",
        "    # Sex\n",
        "    population_df.loc[diagnosis, 'GENDER'] = round((len(diagnosis_df[diagnosis_df.GENDER == 'F']) / len(diagnosis_df)) * 100, 1)\n",
        "    # Lymph count\n",
        "    mean_lymph = np.mean(diagnosis_df.LYMPH_COUNT)\n",
        "    std_lymph = np.std(diagnosis_df.LYMPH_COUNT)\n",
        "    population_df.loc[diagnosis, 'LYMPH_COUNT'] = '%.1f ± %.1f' % (mean_lymph, std_lymph)\n",
        "print(population_df)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "     N         AGE GENDER  LYMPH_COUNT\n",
            "-1  24  79.9 ± 9.5   45.8  25.2 ± 38.6\n",
            " 0  17  77.2 ± 7.5   58.8    5.1 ± 1.0\n",
            " 1  96  78.9 ± 8.5     50  34.2 ± 52.8\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 197
        },
        "id": "BZgPFCnwvGP2",
        "outputId": "e730c017-2d40-4051-da55-9617be71cf76"
      },
      "source": [
        "df.head(4)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>LABEL</th>\n",
              "      <th>GENDER</th>\n",
              "      <th>DOB</th>\n",
              "      <th>LYMPH_COUNT</th>\n",
              "      <th>AGE</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>ID</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>P26</th>\n",
              "      <td>1</td>\n",
              "      <td>M</td>\n",
              "      <td>1933-11-03</td>\n",
              "      <td>11.2</td>\n",
              "      <td>87.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>P183</th>\n",
              "      <td>1</td>\n",
              "      <td>M</td>\n",
              "      <td>1942-05-15</td>\n",
              "      <td>12.8</td>\n",
              "      <td>78.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>P89</th>\n",
              "      <td>1</td>\n",
              "      <td>M</td>\n",
              "      <td>1935-06-19</td>\n",
              "      <td>9.6</td>\n",
              "      <td>85.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>P123</th>\n",
              "      <td>1</td>\n",
              "      <td>M</td>\n",
              "      <td>1931-01-27</td>\n",
              "      <td>122.6</td>\n",
              "      <td>90.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "      LABEL GENDER        DOB  LYMPH_COUNT   AGE\n",
              "ID                                              \n",
              "P26       1      M 1933-11-03         11.2  87.0\n",
              "P183      1      M 1942-05-15         12.8  78.0\n",
              "P89       1      M 1935-06-19          9.6  85.0\n",
              "P123      1      M 1931-01-27        122.6  90.0"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "G4Eb7lquGyk1"
      },
      "source": [
        "df[df.LABEL == 0]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "QO53DF05Gn1j"
      },
      "source": [
        "df[df.LABEL == -1]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 347
        },
        "id": "FDfVTn2CvRMH",
        "outputId": "88f879ba-6ff7-4f8c-c00d-59c3cdf360ba"
      },
      "source": [
        "# Now I will consider only the training data\n",
        "df = pd.read_csv(\"clinical_annotation.csv\")\n",
        "df = df[df.LABEL > -0.5].reset_index(drop=True) # patient ID with label = -1 are the one that belongs to the test file\n",
        "df = df.drop('Unnamed: 0',axis=1)\n",
        "df.DOB = pd.to_datetime(df.DOB)\n",
        "df['AGE'] = pd.to_datetime('today').normalize() - pd.to_datetime(df.DOB)\n",
        "df.AGE = df.AGE.astype(\"timedelta64[Y]\")\n",
        "df = df[df.AGE > 62.]\n",
        "df.tail(10)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>ID</th>\n",
              "      <th>LABEL</th>\n",
              "      <th>GENDER</th>\n",
              "      <th>DOB</th>\n",
              "      <th>LYMPH_COUNT</th>\n",
              "      <th>AGE</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>141</th>\n",
              "      <td>P131</td>\n",
              "      <td>1</td>\n",
              "      <td>M</td>\n",
              "      <td>1943-05-03</td>\n",
              "      <td>4.43</td>\n",
              "      <td>77.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>143</th>\n",
              "      <td>P101</td>\n",
              "      <td>0</td>\n",
              "      <td>F</td>\n",
              "      <td>1940-12-19</td>\n",
              "      <td>4.34</td>\n",
              "      <td>80.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>145</th>\n",
              "      <td>P185</td>\n",
              "      <td>0</td>\n",
              "      <td>M</td>\n",
              "      <td>1948-08-09</td>\n",
              "      <td>5.19</td>\n",
              "      <td>72.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>147</th>\n",
              "      <td>P87</td>\n",
              "      <td>0</td>\n",
              "      <td>F</td>\n",
              "      <td>1945-05-08</td>\n",
              "      <td>7.68</td>\n",
              "      <td>75.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>148</th>\n",
              "      <td>P77</td>\n",
              "      <td>0</td>\n",
              "      <td>F</td>\n",
              "      <td>1946-11-03</td>\n",
              "      <td>4.25</td>\n",
              "      <td>74.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>152</th>\n",
              "      <td>P72</td>\n",
              "      <td>0</td>\n",
              "      <td>F</td>\n",
              "      <td>1953-02-03</td>\n",
              "      <td>4.02</td>\n",
              "      <td>68.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>156</th>\n",
              "      <td>P149</td>\n",
              "      <td>1</td>\n",
              "      <td>M</td>\n",
              "      <td>1954-01-16</td>\n",
              "      <td>5.58</td>\n",
              "      <td>67.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>157</th>\n",
              "      <td>P204</td>\n",
              "      <td>0</td>\n",
              "      <td>M</td>\n",
              "      <td>1945-06-19</td>\n",
              "      <td>6.45</td>\n",
              "      <td>75.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>158</th>\n",
              "      <td>P135</td>\n",
              "      <td>1</td>\n",
              "      <td>M</td>\n",
              "      <td>1951-08-27</td>\n",
              "      <td>9.45</td>\n",
              "      <td>69.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>160</th>\n",
              "      <td>P130</td>\n",
              "      <td>0</td>\n",
              "      <td>F</td>\n",
              "      <td>1943-05-16</td>\n",
              "      <td>4.17</td>\n",
              "      <td>77.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "       ID  LABEL GENDER        DOB  LYMPH_COUNT   AGE\n",
              "141  P131      1      M 1943-05-03         4.43  77.0\n",
              "143  P101      0      F 1940-12-19         4.34  80.0\n",
              "145  P185      0      M 1948-08-09         5.19  72.0\n",
              "147   P87      0      F 1945-05-08         7.68  75.0\n",
              "148   P77      0      F 1946-11-03         4.25  74.0\n",
              "152   P72      0      F 1953-02-03         4.02  68.0\n",
              "156  P149      1      M 1954-01-16         5.58  67.0\n",
              "157  P204      0      M 1945-06-19         6.45  75.0\n",
              "158  P135      1      M 1951-08-27         9.45  69.0\n",
              "160  P130      0      F 1943-05-16         4.17  77.0"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 25
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "fRn5g-dRBZgU"
      },
      "source": [
        "##KFOLD Cross validation"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "udi8EVL6st_v"
      },
      "source": [
        "from torchvision import models\n",
        "import copy\n",
        "#optimizer = torch.optim.SGD(model_conv.fc.parameters(), lr=0.001, momentum=0.9)\n",
        "\n",
        "def train_model(model,epoch):\n",
        "    best_model_wts = copy.deepcopy(model.state_dict())\n",
        "    best_acc_test = 0.0\n",
        "    best_acc_train = 0.0\n",
        "    best_loss_test = 1000.0\n",
        "\n",
        "    for epoch_ in range(1,epoch):\n",
        "      correct = 0\n",
        "      total = 0\n",
        "      model.train()\n",
        "      train_loss = 0.\n",
        "      train_error = 0.\n",
        "      outputs = [] # List to store the outputs of the model \n",
        "      labels = [] # List to store the true label \n",
        "\n",
        "      #for batch_idx, (data, label) in enumerate(train_loader):\n",
        "      for idx, batch in enumerate(train_loader):\n",
        "          data, bag_label = batch['images'].cuda(), batch['label'].cuda()\n",
        "          #bag_label = label[0]\n",
        "          #if args.cuda:\n",
        "          #    data, bag_label = data.cuda(), bag_label.cuda()\n",
        "          #data, bag_label = Variable(data), Variable(bag_label)\n",
        "\n",
        "          # reset gradients\n",
        "          optimizer.zero_grad()\n",
        "          # calculate loss and metrics\n",
        "          loss, _ = model.calculate_objective(data, bag_label)\n",
        "          train_loss += loss.data[0]\n",
        "          error, output = model.calculate_classification_error(data, bag_label)\n",
        "          train_error += error\n",
        "\n",
        "          outputs.append(output) # store it in outputs\n",
        "          labels.append(bag_label) \n",
        "          # backward pass\n",
        "          loss.backward()\n",
        "          # step\n",
        "          optimizer.step()\n",
        "\n",
        "      # calculate loss and error for epoch\n",
        "      train_loss /= len(train_loader)\n",
        "      train_error /= len(train_loader)\n",
        "\n",
        "\n",
        "      total = len(labels)\n",
        "      outputs= np.asarray(outputs)\n",
        "      labels= np.asarray(labels)\n",
        "\n",
        "      correct += (outputs == labels).sum().item()\n",
        "\n",
        "      acc = 100 * correct / total\n",
        "\n",
        "      print('Epoch: {}, Loss: {:.4f}, Train error: {:.4f}, Accuracy: {}'.format(epoch_, train_loss.cpu().numpy()[0], train_error, acc))\n",
        "\n",
        "      test_loss , test_acc = test()\n",
        "\n",
        "      if test_loss < best_loss_test:\n",
        "        best_loss_test = test_loss\n",
        "        best_model_wts = copy.deepcopy(model.state_dict())\n",
        "        print(\"model successfully saved\")\n",
        "\n",
        "    model.load_state_dict(best_model_wts)\n",
        "\n",
        "    return model\n",
        "\n",
        "def test():\n",
        "    correct = 0\n",
        "    total = 0\n",
        "\n",
        "    outputs = [] # List to store the outputs of the model \n",
        "    labels = [] # List to store the true label \n",
        "\n",
        "    model.eval()\n",
        "    test_loss = 0.\n",
        "    test_error = 0.\n",
        "    #for batch_idx, (data, label) in enumerate(test_loader):\n",
        "    for idx, batch in enumerate(valid_loader):\n",
        "        data, bag_label = batch['images'].cuda(), batch['label'].cuda()\n",
        "\n",
        "        loss, attention_weights = model.calculate_objective(data, bag_label)\n",
        "        test_loss += loss.data[0]\n",
        "        error, predicted_label = model.calculate_classification_error(data, bag_label)\n",
        "        test_error += error\n",
        "\n",
        "        if idx < 5:  # plot bag labels and instance labels for first 5 bags\n",
        "            bag_level = (bag_label.cpu().data.numpy()[0], int(predicted_label.cpu().data.numpy()[0][0]))\n",
        "            #instance_level = list(zip(instance_labels.numpy()[0].tolist(),\n",
        "            #                     np.round(attention_weights.cpu().data.numpy()[0], decimals=3).tolist()))\n",
        "\n",
        "            #print('\\nTrue Bag Label, Predicted Bag Label: {}\\n'\n",
        "            #      'True Instance Labels, Attention Weights: {}'.format(bag_level, instance_level))\n",
        "        outputs.append(predicted_label) # store it in outputs\n",
        "        labels.append(bag_label) \n",
        "\n",
        "    test_error /= len(valid_loader)\n",
        "    test_loss /= len(valid_loader)\n",
        "\n",
        "    total = len(labels)\n",
        "    outputs= np.asarray(outputs)\n",
        "    labels= np.asarray(labels)\n",
        "\n",
        "    correct += (outputs == labels).sum().item()\n",
        "\n",
        "    print('Test Set, Loss: {:.4f}, Test error: {:.4f}, Accuracy: {}\\n'.format(test_loss.cpu().numpy()[0], test_error,  100 * correct / total))\n",
        "\n",
        "    return test_loss.cpu().numpy()[0] , 100 * correct / total\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "91MsqqNBst_9"
      },
      "source": [
        "import torch\n",
        "import torch.nn as nn\n",
        "import torch.nn.functional as F\n",
        "\n",
        "\n",
        "class Attention(nn.Module):\n",
        "    def __init__(self):\n",
        "        super(Attention, self).__init__()\n",
        "        self.L = 500\n",
        "        self.D = 128\n",
        "        self.K = 1\n",
        "\n",
        "        self.feature_extractor_part1 = nn.Sequential(\n",
        "            nn.Conv2d(1, 20, kernel_size=5),\n",
        "            nn.ReLU(),\n",
        "            nn.MaxPool2d(2, stride=2),\n",
        "            nn.Conv2d(20, 50, kernel_size=5),\n",
        "            nn.ReLU(),\n",
        "            nn.MaxPool2d(2, stride=2)\n",
        "        )\n",
        "\n",
        "        self.feature_extractor_part2 = nn.Sequential(\n",
        "            nn.Linear(50 * 4 * 4, self.L),\n",
        "            nn.ReLU(),\n",
        "        )\n",
        "\n",
        "        self.attention = nn.Sequential(\n",
        "            nn.Linear(self.L, self.D),\n",
        "            nn.Tanh(),\n",
        "            nn.Linear(self.D, self.K)\n",
        "        )\n",
        "\n",
        "        self.classifier = nn.Sequential(\n",
        "            nn.Linear(self.L*self.K, 1),\n",
        "            nn.Sigmoid()\n",
        "        )\n",
        "\n",
        "    def forward(self, x):\n",
        "        x = x.squeeze(0)\n",
        "\n",
        "        H = self.feature_extractor_part1(x)\n",
        "        H = H.view(-1, 50 * 4 * 4)\n",
        "        H = self.feature_extractor_part2(H)  # NxL\n",
        "\n",
        "        A = self.attention(H)  # NxK\n",
        "        A = torch.transpose(A, 1, 0)  # KxN\n",
        "        A = F.softmax(A, dim=1)  # softmax over N\n",
        "\n",
        "        M = torch.mm(A, H)  # KxL\n",
        "\n",
        "        Y_prob = self.classifier(M)\n",
        "        Y_hat = torch.ge(Y_prob, 0.5).float()\n",
        "\n",
        "        return Y_prob, Y_hat, A\n",
        "\n",
        "    # AUXILIARY METHODS\n",
        "    def calculate_classification_error(self, X, Y):\n",
        "        Y = Y.float()\n",
        "        _, Y_hat, _ = self.forward(X)\n",
        "        error = 1. - Y_hat.eq(Y).cpu().float().mean().data[0]\n",
        "\n",
        "        return error, Y_hat\n",
        "\n",
        "    def calculate_objective(self, X, Y):\n",
        "        Y = Y.float()\n",
        "        Y_prob, _, A = self.forward(X)\n",
        "        Y_prob = torch.clamp(Y_prob, min=1e-5, max=1. - 1e-5)\n",
        "        neg_log_likelihood = -1. * (Y * torch.log(Y_prob) + (1. - Y) * torch.log(1. - Y_prob))  # negative log bernoulli\n",
        "\n",
        "        return neg_log_likelihood, A\n",
        "\n",
        "class GatedAttention(nn.Module):\n",
        "    def __init__(self):\n",
        "        super(GatedAttention, self).__init__()\n",
        "        self.L = 500\n",
        "        self.D = 128\n",
        "        self.K = 1\n",
        "\n",
        "        \"\"\"\n",
        "        self.feature_extractor_part1 = nn.Sequential(\n",
        "            nn.Conv2d(1, 20, kernel_size=5),\n",
        "            nn.ReLU(),\n",
        "            nn.MaxPool2d(2, stride=2),\n",
        "            nn.Conv2d(20, 50, kernel_size=5),\n",
        "            nn.ReLU(),\n",
        "            nn.MaxPool2d(2, stride=2)\n",
        "        )\n",
        "        \"\"\"\n",
        "\n",
        "        #model_conv = models.resnet152(pretrained=True)\n",
        "        model_conv = models.resnet50(pretrained=True)\n",
        "\n",
        "\n",
        "        #model_conv.fc.out_features\n",
        "        # Parameters of newly constructed modules have requires_grad=True by default\n",
        "        #num_ftrs = model_conv.fc.in_features\n",
        "        #del model_conv.fc\n",
        "        #model_conv.fc = None\n",
        "\n",
        "        self.feature_extractor_part1 = model_conv\n",
        "        \n",
        "        num_ftrs = 1000\n",
        "\n",
        "        self.feature_extractor_part2 = nn.Sequential(\n",
        "            nn.Linear(num_ftrs, self.L),\n",
        "            nn.ReLU(),\n",
        "            nn.Dropout(0.5)\n",
        "        )\n",
        "\n",
        "        self.attention_V = nn.Sequential(\n",
        "            nn.Linear(self.L, self.D),\n",
        "            nn.Tanh()\n",
        "        )\n",
        "\n",
        "        self.attention_U = nn.Sequential(\n",
        "            nn.Linear(self.L, self.D),\n",
        "            nn.Sigmoid()\n",
        "        )\n",
        "\n",
        "        self.attention_weights = nn.Linear(self.D, self.K)\n",
        "\n",
        "        self.classifier = nn.Sequential(\n",
        "            nn.Linear(self.L*self.K, 1),\n",
        "            nn.Sigmoid()\n",
        "        )\n",
        "\n",
        "    def forward(self, x):\n",
        "        x = x.squeeze(0)\n",
        "\n",
        "        H = self.feature_extractor_part1(x)\n",
        "        #print(H.shape)\n",
        "        #H = H.view(-1, num_ftrs)\n",
        "        H = self.feature_extractor_part2(H)  # NxL\n",
        "\n",
        "        A_V = self.attention_V(H)  # NxD\n",
        "        A_U = self.attention_U(H)  # NxD\n",
        "        A = self.attention_weights(A_V * A_U) # element wise multiplication # NxK\n",
        "        A = torch.transpose(A, 1, 0)  # KxN\n",
        "        A = F.softmax(A, dim=1)  # softmax over N\n",
        "\n",
        "        M = torch.mm(A, H)  # KxL\n",
        "\n",
        "        Y_prob = self.classifier(M)\n",
        "        Y_hat = torch.ge(Y_prob, 0.5).float()\n",
        "\n",
        "        return Y_prob, Y_hat, A\n",
        "\n",
        "    # AUXILIARY METHODS\n",
        "    def calculate_classification_error(self, X, Y):\n",
        "        Y = Y.float()\n",
        "        _, Y_hat, _ = self.forward(X)\n",
        "        error = 1. - Y_hat.eq(Y).cpu().float().mean().item()\n",
        "\n",
        "        return error, Y_hat\n",
        "\n",
        "    def calculate_objective(self, X, Y):\n",
        "        Y = Y.float()\n",
        "        Y_prob, _, A = self.forward(X)\n",
        "        Y_prob = torch.clamp(Y_prob, min=1e-5, max=1. - 1e-5)\n",
        "        neg_log_likelihood = -1. * (Y * torch.log(Y_prob) + (1. - Y) * torch.log(1. - Y_prob))  # negative log bernoulli\n",
        "\n",
        "        return neg_log_likelihood, A"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "yDenBK3hGlgF"
      },
      "source": [
        "from imblearn.under_sampling import RandomUnderSampler \n",
        "from imblearn.over_sampling import  RandomOverSampler\n",
        "\n",
        "rus = RandomUnderSampler(return_indices=True)\n",
        "X_rus, y_rus, id_rus = rus.fit_sample(df.ID.to_numpy().reshape(-1, 1), df.LABEL.to_numpy().reshape(-1, 1))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "wRNf1IS9HJSV"
      },
      "source": [
        "##All patients"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "F8wotyT5HYKx"
      },
      "source": [
        "from sklearn.model_selection import StratifiedKFold, KFold\n",
        "from imblearn.under_sampling import RandomUnderSampler \n",
        "from imblearn.over_sampling import  RandomOverSampler\n",
        "\n",
        "\n",
        "orig = '/content/trainset/'\n",
        "\n",
        "df = pd.read_csv(\"clinical_annotation.csv\")\n",
        "df = df[df.LABEL > -0.5].reset_index(drop=True) # patient ID with label = -1 are the one that belongs to the test file\n",
        "df = df.drop('Unnamed: 0',axis=1)\n",
        "df.DOB = pd.to_datetime(df.DOB)\n",
        "df['AGE'] = pd.to_datetime('today').normalize() - pd.to_datetime(df.DOB)\n",
        "df.AGE = df.AGE.astype(\"timedelta64[Y]\")\n",
        "df = df[df.AGE > 62.]\n",
        "\n",
        "rus = RandomUnderSampler(return_indices=True)\n",
        "X_rus, y_rus, id_rus = rus.fit_sample(df.ID.to_numpy().reshape(-1, 1), df.LABEL.to_numpy().reshape(-1, 1))\n",
        "X_rus = np.squeeze(X_rus)\n",
        "y_rus = np.squeeze(y_rus)\n",
        "\n",
        "print(X_rus)\n",
        "print(y_rus)\n",
        "\n",
        "\n",
        "n_splits= 3\n",
        "current_split= 1\n",
        "skf = StratifiedKFold(n_splits=n_splits)\n",
        "\n",
        "list_best_models = []\n",
        "\n",
        "for train_id_patient, val_id_patient in skf.split(X_rus,y_rus):\n",
        "    print(X_rus[train_id_patient])\n",
        "    print(y_rus[train_id_patient])\n",
        "    print(X_rus[val_id_patient])\n",
        "    print(y_rus[val_id_patient])\n",
        "    print('Split {}/{}'.format(current_split,n_splits))\n",
        "    best_model = None\n",
        "    #data_train = return_data(df.set_index(['ID']), df.ID.to_numpy()[train_id_patient])\n",
        "    data_train = return_data(df.set_index(['ID']), X_rus[train_id_patient])\n",
        "\n",
        "    img_list,  concentration, labels = data_train['indice'], data_train['concentration'], data_train['label']\n",
        "    train = LymphoDataset(orig, img_list, concentration, labels, get_transform(True))\n",
        "    train_loader = torch.utils.data.DataLoader(\n",
        "        train, batch_size=1, shuffle=True, num_workers=8, collate_fn=custom_fn)\n",
        "    \n",
        "\n",
        "    data_valid = return_data(df.set_index(['ID']), df.ID.to_numpy()[val_id_patient])\n",
        "    img_list, concentration, labels = data_valid['indice'], data_valid['concentration'], data_valid['label']\n",
        "    valid = LymphoDataset(orig, img_list, concentration, labels, get_transform(False))\n",
        "    valid_loader = torch.utils.data.DataLoader(\n",
        "        valid, batch_size=1, shuffle=False, num_workers=8, collate_fn=custom_fn)    \n",
        "    \n",
        "    model = GatedAttention().cuda()\n",
        "    for param in model.feature_extractor_part1.parameters():\n",
        "      param.requires_grad = False\n",
        "    for param in model.feature_extractor_part1.fc.parameters():\n",
        "      param.requires_grad = True\n",
        "\n",
        "    optimizer = torch.optim.Adam(model.parameters(), lr=0.00005, betas=(0.9, 0.999),weight_decay=0.000005)\n",
        "    best_model = train_model(model,epoch=15)\n",
        "    list_best_models.append(best_model)\n",
        "\n",
        "    current_split+=1"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "LLebnlWHLjbv"
      },
      "source": [
        "##Downsampling"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CgKmFD0qqbp3",
        "outputId": "70c6fca5-66b8-4eb7-962c-9a5b6e3b6c9c"
      },
      "source": [
        "from sklearn.model_selection import StratifiedKFold, KFold\n",
        "from imblearn.under_sampling import RandomUnderSampler \n",
        "from imblearn.over_sampling import  RandomOverSampler\n",
        "\n",
        "\n",
        "orig = '/content/trainset/'\n",
        "\n",
        "df = pd.read_csv(\"clinical_annotation.csv\")\n",
        "df = df[df.LABEL > -0.5].reset_index(drop=True) # patient ID with label = -1 are the one that belongs to the test file\n",
        "df = df.drop('Unnamed: 0',axis=1)\n",
        "df.DOB = pd.to_datetime(df.DOB)\n",
        "df['AGE'] = pd.to_datetime('today').normalize() - pd.to_datetime(df.DOB)\n",
        "df.AGE = df.AGE.astype(\"timedelta64[Y]\")\n",
        "df = df[df.AGE > 62.]\n",
        "\n",
        "rus = RandomUnderSampler(return_indices=True)\n",
        "X_rus, y_rus, id_rus = rus.fit_sample(df.ID.to_numpy().reshape(-1, 1), df.LABEL.to_numpy().reshape(-1, 1))\n",
        "X_rus = np.squeeze(X_rus)\n",
        "y_rus = np.squeeze(y_rus)\n",
        "\n",
        "print(X_rus)\n",
        "print(y_rus)\n",
        "\n",
        "\n",
        "n_splits= 3\n",
        "current_split= 1\n",
        "skf = StratifiedKFold(n_splits=n_splits)\n",
        "\n",
        "list_best_models = []\n",
        "\n",
        "for train_id_patient, val_id_patient in skf.split(X_rus,y_rus):\n",
        "    print(X_rus[train_id_patient])\n",
        "    print(y_rus[train_id_patient])\n",
        "    print(X_rus[val_id_patient])\n",
        "    print(y_rus[val_id_patient])\n",
        "    print('Split {}/{}'.format(current_split,n_splits))\n",
        "    best_model = None\n",
        "    #data_train = return_data(df.set_index(['ID']), df.ID.to_numpy()[train_id_patient])\n",
        "    data_train = return_data(df.set_index(['ID']), X_rus[train_id_patient])\n",
        "\n",
        "    img_list,  concentration, labels = data_train['indice'], data_train['concentration'], data_train['label']\n",
        "    train = LymphoDataset(orig, img_list, concentration, labels, get_transform(True))\n",
        "    train_loader = torch.utils.data.DataLoader(\n",
        "        train, batch_size=1, shuffle=True, num_workers=8, collate_fn=custom_fn)\n",
        "    \n",
        "\n",
        "    data_valid = return_data(df.set_index(['ID']), df.ID.to_numpy()[val_id_patient])\n",
        "    img_list, concentration, labels = data_valid['indice'], data_valid['concentration'], data_valid['label']\n",
        "    valid = LymphoDataset(orig, img_list, concentration, labels, get_transform(False))\n",
        "    valid_loader = torch.utils.data.DataLoader(\n",
        "        valid, batch_size=1, shuffle=False, num_workers=8, collate_fn=custom_fn)    \n",
        "    \n",
        "    model = GatedAttention().cuda()\n",
        "    for param in model.feature_extractor_part1.parameters():\n",
        "      param.requires_grad = False\n",
        "    for param in model.feature_extractor_part1.fc.parameters():\n",
        "      param.requires_grad = True\n",
        "\n",
        "    optimizer = torch.optim.Adam(model.parameters(), lr=0.00005, betas=(0.9, 0.999),weight_decay=0.000005)\n",
        "    best_model = train_model(model,epoch=15)\n",
        "    list_best_models.append(best_model)\n",
        "\n",
        "    current_split+=1"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "['P137' 'P140' 'P129' 'P173' 'P6' 'P45' 'P182' 'P52' 'P78' 'P146' 'P101'\n",
            " 'P185' 'P87' 'P77' 'P72' 'P204' 'P130' 'P50' 'P157' 'P163' 'P85' 'P61'\n",
            " 'P171' 'P21' 'P112' 'P186' 'P30' 'P1' 'P66' 'P167' 'P123' 'P115' 'P27'\n",
            " 'P150']\n",
            "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]\n",
            "['P182' 'P52' 'P78' 'P146' 'P101' 'P185' 'P87' 'P77' 'P72' 'P204' 'P130'\n",
            " 'P21' 'P112' 'P186' 'P30' 'P1' 'P66' 'P167' 'P123' 'P115' 'P27' 'P150']\n",
            "[0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1]\n",
            "['P137' 'P140' 'P129' 'P173' 'P6' 'P45' 'P50' 'P157' 'P163' 'P85' 'P61'\n",
            " 'P171']\n",
            "[0 0 0 0 0 0 1 1 1 1 1 1]\n",
            "Split 1/3\n",
            "Epoch: 1, Loss: 0.7297, Train error: 0.7727, Accuracy: 22.727272727272727\n",
            "Test Set, Loss: 0.6469, Test error: 0.1667, Accuracy: 83.33333333333333\n",
            "\n",
            "model successfully saved\n",
            "Epoch: 2, Loss: 0.7346, Train error: 0.5455, Accuracy: 45.45454545454545\n",
            "Test Set, Loss: 0.5665, Test error: 0.0833, Accuracy: 91.66666666666667\n",
            "\n",
            "model successfully saved\n",
            "Epoch: 3, Loss: 0.7224, Train error: 0.4545, Accuracy: 54.54545454545455\n",
            "Test Set, Loss: 0.7125, Test error: 0.6667, Accuracy: 33.333333333333336\n",
            "\n",
            "Epoch: 4, Loss: 0.6862, Train error: 0.4545, Accuracy: 54.54545454545455\n",
            "Test Set, Loss: 0.6493, Test error: 0.0833, Accuracy: 91.66666666666667\n",
            "\n",
            "Epoch: 5, Loss: 0.6997, Train error: 0.5000, Accuracy: 50.0\n",
            "Test Set, Loss: 0.6820, Test error: 0.4167, Accuracy: 58.333333333333336\n",
            "\n",
            "Epoch: 6, Loss: 0.6522, Train error: 0.2727, Accuracy: 72.72727272727273\n",
            "Test Set, Loss: 0.5855, Test error: 0.0833, Accuracy: 91.66666666666667\n",
            "\n",
            "Epoch: 7, Loss: 0.6675, Train error: 0.4091, Accuracy: 59.09090909090909\n",
            "Test Set, Loss: 0.5457, Test error: 0.0833, Accuracy: 91.66666666666667\n",
            "\n",
            "model successfully saved\n",
            "Epoch: 8, Loss: 0.6899, Train error: 0.4545, Accuracy: 54.54545454545455\n",
            "Test Set, Loss: 0.6523, Test error: 0.1667, Accuracy: 83.33333333333333\n",
            "\n",
            "Epoch: 9, Loss: 0.6420, Train error: 0.2273, Accuracy: 77.27272727272727\n",
            "Test Set, Loss: 0.5575, Test error: 0.0833, Accuracy: 91.66666666666667\n",
            "\n",
            "Epoch: 10, Loss: 0.6434, Train error: 0.5000, Accuracy: 50.0\n",
            "Test Set, Loss: 0.6710, Test error: 0.3333, Accuracy: 66.66666666666667\n",
            "\n",
            "Epoch: 11, Loss: 0.6337, Train error: 0.1818, Accuracy: 81.81818181818181\n",
            "Test Set, Loss: 0.5755, Test error: 0.0833, Accuracy: 91.66666666666667\n",
            "\n",
            "Epoch: 12, Loss: 0.6133, Train error: 0.0909, Accuracy: 90.9090909090909\n",
            "Test Set, Loss: 0.5300, Test error: 0.0833, Accuracy: 91.66666666666667\n",
            "\n",
            "model successfully saved\n",
            "Epoch: 13, Loss: 0.5930, Train error: 0.0909, Accuracy: 90.9090909090909\n",
            "Test Set, Loss: 0.5439, Test error: 0.0833, Accuracy: 91.66666666666667\n",
            "\n",
            "Epoch: 14, Loss: 0.6216, Train error: 0.3182, Accuracy: 68.18181818181819\n",
            "Test Set, Loss: 0.4989, Test error: 0.0833, Accuracy: 91.66666666666667\n",
            "\n",
            "model successfully saved\n",
            "['P137' 'P140' 'P129' 'P173' 'P6' 'P45' 'P87' 'P77' 'P72' 'P204' 'P130'\n",
            " 'P50' 'P157' 'P163' 'P85' 'P61' 'P171' 'P66' 'P167' 'P123' 'P115' 'P27'\n",
            " 'P150']\n",
            "[0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1]\n",
            "['P182' 'P52' 'P78' 'P146' 'P101' 'P185' 'P21' 'P112' 'P186' 'P30' 'P1']\n",
            "[0 0 0 0 0 0 1 1 1 1 1]\n",
            "Split 2/3\n",
            "Epoch: 1, Loss: 0.7708, Train error: 0.5652, Accuracy: 43.47826086956522\n",
            "Test Set, Loss: 0.3923, Test error: 0.0000, Accuracy: 100.0\n",
            "\n",
            "model successfully saved\n",
            "Epoch: 2, Loss: 0.7491, Train error: 0.7826, Accuracy: 21.73913043478261\n",
            "Test Set, Loss: 0.5480, Test error: 0.0000, Accuracy: 100.0\n",
            "\n",
            "Epoch: 3, Loss: 0.6904, Train error: 0.4783, Accuracy: 52.17391304347826\n",
            "Test Set, Loss: 0.5910, Test error: 0.0000, Accuracy: 100.0\n",
            "\n",
            "Epoch: 4, Loss: 0.6992, Train error: 0.6087, Accuracy: 39.130434782608695\n",
            "Test Set, Loss: 0.5738, Test error: 0.0000, Accuracy: 100.0\n",
            "\n",
            "Epoch: 5, Loss: 0.6810, Train error: 0.4783, Accuracy: 52.17391304347826\n",
            "Test Set, Loss: 0.5560, Test error: 0.0000, Accuracy: 100.0\n",
            "\n",
            "Epoch: 6, Loss: 0.6731, Train error: 0.4783, Accuracy: 52.17391304347826\n",
            "Test Set, Loss: 0.5306, Test error: 0.0000, Accuracy: 100.0\n",
            "\n",
            "Epoch: 7, Loss: 0.6639, Train error: 0.3913, Accuracy: 60.869565217391305\n",
            "Test Set, Loss: 0.7719, Test error: 1.0000, Accuracy: 0.0\n",
            "\n",
            "Epoch: 8, Loss: 0.6670, Train error: 0.5217, Accuracy: 47.82608695652174\n",
            "Test Set, Loss: 0.5613, Test error: 0.0000, Accuracy: 100.0\n",
            "\n",
            "Epoch: 9, Loss: 0.6455, Train error: 0.0870, Accuracy: 91.30434782608695\n",
            "Test Set, Loss: 0.6405, Test error: 0.0909, Accuracy: 90.9090909090909\n",
            "\n",
            "Epoch: 10, Loss: 0.6335, Train error: 0.3913, Accuracy: 60.869565217391305\n",
            "Test Set, Loss: 0.5253, Test error: 0.0000, Accuracy: 100.0\n",
            "\n",
            "Epoch: 11, Loss: 0.6447, Train error: 0.2174, Accuracy: 78.26086956521739\n",
            "Test Set, Loss: 0.5901, Test error: 0.0000, Accuracy: 100.0\n",
            "\n",
            "Epoch: 12, Loss: 0.6644, Train error: 0.3913, Accuracy: 60.869565217391305\n",
            "Test Set, Loss: 0.5273, Test error: 0.0000, Accuracy: 100.0\n",
            "\n",
            "Epoch: 13, Loss: 0.6060, Train error: 0.1304, Accuracy: 86.95652173913044\n",
            "Test Set, Loss: 0.6979, Test error: 0.6364, Accuracy: 36.36363636363637\n",
            "\n",
            "Epoch: 14, Loss: 0.6055, Train error: 0.2174, Accuracy: 78.26086956521739\n",
            "Test Set, Loss: 0.6222, Test error: 0.3636, Accuracy: 63.63636363636363\n",
            "\n",
            "['P137' 'P140' 'P129' 'P173' 'P6' 'P45' 'P182' 'P52' 'P78' 'P146' 'P101'\n",
            " 'P185' 'P50' 'P157' 'P163' 'P85' 'P61' 'P171' 'P21' 'P112' 'P186' 'P30'\n",
            " 'P1']\n",
            "[0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1]\n",
            "['P87' 'P77' 'P72' 'P204' 'P130' 'P66' 'P167' 'P123' 'P115' 'P27' 'P150']\n",
            "[0 0 0 0 0 1 1 1 1 1 1]\n",
            "Split 3/3\n",
            "Epoch: 1, Loss: 0.7365, Train error: 0.6087, Accuracy: 39.130434782608695\n",
            "Test Set, Loss: 0.8781, Test error: 1.0000, Accuracy: 0.0\n",
            "\n",
            "model successfully saved\n",
            "Epoch: 2, Loss: 0.7312, Train error: 0.6957, Accuracy: 30.434782608695652\n",
            "Test Set, Loss: 0.7523, Test error: 0.8182, Accuracy: 18.181818181818183\n",
            "\n",
            "model successfully saved\n",
            "Epoch: 3, Loss: 0.6867, Train error: 0.3478, Accuracy: 65.21739130434783\n",
            "Test Set, Loss: 0.7397, Test error: 0.8182, Accuracy: 18.181818181818183\n",
            "\n",
            "model successfully saved\n",
            "Epoch: 4, Loss: 0.7067, Train error: 0.4783, Accuracy: 52.17391304347826\n",
            "Test Set, Loss: 0.6841, Test error: 0.3636, Accuracy: 63.63636363636363\n",
            "\n",
            "model successfully saved\n",
            "Epoch: 5, Loss: 0.6913, Train error: 0.3913, Accuracy: 60.869565217391305\n",
            "Test Set, Loss: 0.5909, Test error: 0.0000, Accuracy: 100.0\n",
            "\n",
            "model successfully saved\n",
            "Epoch: 6, Loss: 0.7093, Train error: 0.5217, Accuracy: 47.82608695652174\n",
            "Test Set, Loss: 0.5622, Test error: 0.0000, Accuracy: 100.0\n",
            "\n",
            "model successfully saved\n",
            "Epoch: 7, Loss: 0.6761, Train error: 0.4783, Accuracy: 52.17391304347826\n",
            "Test Set, Loss: 0.8961, Test error: 1.0000, Accuracy: 0.0\n",
            "\n",
            "Epoch: 8, Loss: 0.6816, Train error: 0.3478, Accuracy: 65.21739130434783\n",
            "Test Set, Loss: 0.7764, Test error: 0.9091, Accuracy: 9.090909090909092\n",
            "\n",
            "Epoch: 9, Loss: 0.6369, Train error: 0.4348, Accuracy: 56.52173913043478\n",
            "Test Set, Loss: 0.7417, Test error: 0.7273, Accuracy: 27.272727272727273\n",
            "\n",
            "Epoch: 10, Loss: 0.6274, Train error: 0.1304, Accuracy: 86.95652173913044\n",
            "Test Set, Loss: 0.5963, Test error: 0.0000, Accuracy: 100.0\n",
            "\n",
            "Epoch: 11, Loss: 0.6130, Train error: 0.2609, Accuracy: 73.91304347826087\n",
            "Test Set, Loss: 0.5886, Test error: 0.0000, Accuracy: 100.0\n",
            "\n",
            "Epoch: 12, Loss: 0.6065, Train error: 0.1739, Accuracy: 82.6086956521739\n",
            "Test Set, Loss: 0.7259, Test error: 0.6364, Accuracy: 36.36363636363637\n",
            "\n",
            "Epoch: 13, Loss: 0.5962, Train error: 0.2609, Accuracy: 73.91304347826087\n",
            "Test Set, Loss: 0.6720, Test error: 0.2727, Accuracy: 72.72727272727273\n",
            "\n",
            "Epoch: 14, Loss: 0.5953, Train error: 0.0870, Accuracy: 91.30434782608695\n",
            "Test Set, Loss: 0.6057, Test error: 0.2727, Accuracy: 72.72727272727273\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "-IXhfE7-BOm5"
      },
      "source": [
        "df_test = pd.read_csv(\"testset/testset_data.csv\")\n",
        "\n",
        "data_test = return_data(df_test.set_index(['ID']), df_test.ID.to_list())\n",
        "\n",
        "orig = 'testset/'\n",
        "\n",
        "img_list,  concentration, labels = data_test['indice'], data_test['concentration'], data_test['label']\n",
        "test = LymphoDataset(orig, img_list, concentration, labels, get_transform(True))\n",
        "test_loader = torch.utils.data.DataLoader(\n",
        "    test, batch_size=1, shuffle=True, num_workers=8, collate_fn=custom_fn)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "igR_00XVBOm6"
      },
      "source": [
        "def submission(model):\n",
        "  ID = []\n",
        "  outputs = []\n",
        "  model.eval()\n",
        "\n",
        "  for idx, batch in enumerate(test_loader):\n",
        "    data, name, bag_label = batch['images'].cuda(), batch['name'] , batch['label'].cuda()\n",
        "    ID.append(name[0])\n",
        "    _, predicted_label = model.calculate_classification_error(data, bag_label)\n",
        "    outputs.append(int(predicted_label.data.cpu().numpy()[0][0]))\n",
        "\n",
        "  df = pd.DataFrame({'Id': ID,'Predicted':outputs})\n",
        "  return df"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 66,
          "referenced_widgets": [
            "07f4c71ac64f41d48ed4e907587864de",
            "292117b49c1f49638b20372333f247ea",
            "c41b9676ecd14376ac29988e26cd8a03",
            "645b57ac05294609899ae18f3a6a8849",
            "66dafe411598436f92cc775139c5a59a",
            "15f3ecdaec3a4585a1f20fbcc942081f",
            "ae5a72671f1f4b46a57514923b6da812",
            "83c14482f0a7459cb05d3443b01b9784"
          ]
        },
        "id": "bbHEXFbKAvct",
        "outputId": "f4fc565c-a478-40b4-8802-cbc62ebd3faf"
      },
      "source": [
        "df_concat = []\n",
        "\n",
        "for model in tqdm(list_best_models):\n",
        "  df_concat.append(submission(model))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "07f4c71ac64f41d48ed4e907587864de",
              "version_major": 2,
              "version_minor": 0
            },
            "text/plain": [
              "HBox(children=(FloatProgress(value=0.0, max=3.0), HTML(value='')))"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ICZLm5LXFmxs",
        "outputId": "5ae1c1d6-88bb-48c5-c238-a7a70130ae0e"
      },
      "source": [
        "from functools import reduce\n",
        "\n",
        "df_merged = reduce(lambda  left,right: pd.merge(left,right,on=['Id'],\n",
        "                                            how='outer'), df_concat)\n",
        "\n",
        "print(df_merged)\n",
        "df_merged.set_index('Id')\n",
        "df_merged = df_merged.set_index('Id').mode(axis=1)[0].to_frame()\n",
        "df_merged = df_merged.rename(columns={0:\"Predicted\"})\n",
        "df_merged.Predicted = df_merged.Predicted.astype(int)\n",
        "df_merged.to_csv('pred3.csv')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "      Id  Predicted_x  Predicted_y  Predicted\n",
            "0    P24            1            1          1\n",
            "1    P69            1            1          1\n",
            "2     P9            1            1          1\n",
            "3     P4            1            1          1\n",
            "4   P195            1            1          1\n",
            "5   P108            0            1          1\n",
            "6    P92            0            1          1\n",
            "7    P58            1            1          1\n",
            "8    P75            1            1          1\n",
            "9   P132            0            1          1\n",
            "10   P18            1            1          1\n",
            "11  P120            1            1          1\n",
            "12   P81            1            1          1\n",
            "13  P196            1            1          1\n",
            "14  P203            1            1          1\n",
            "15   P14            1            1          1\n",
            "16  P148            1            1          1\n",
            "17  P188            1            1          1\n",
            "18   P71            0            1          1\n",
            "19   P68            1            1          1\n",
            "20  P133            1            1          1\n",
            "21  P119            1            1          1\n",
            "22   P32            0            1          1\n",
            "23   P49            1            1          1\n",
            "24  P143            1            1          1\n",
            "25   P98            1            1          1\n",
            "26  P197            0            1          1\n",
            "27   P93            1            1          1\n",
            "28   P57            1            1          1\n",
            "29  P152            1            1          1\n",
            "30   P86            1            1          1\n",
            "31  P172            1            1          1\n",
            "32  P170            1            1          1\n",
            "33  P178            0            1          1\n",
            "34   P56            1            1          1\n",
            "35  P175            1            1          1\n",
            "36  P138            1            1          1\n",
            "37    P7            1            1          1\n",
            "38  P114            1            1          1\n",
            "39  P139            0            1          1\n",
            "40   P73            1            1          1\n",
            "41   P16            1            1          1\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "un1yWf_HLzsq",
        "outputId": "45cc1279-575a-45c5-ab1c-bb29b53242af"
      },
      "source": [
        "df_merged"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Id</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>P170</th>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>P68</th>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>P49</th>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>P16</th>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>P4</th>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>P196</th>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>P175</th>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>P9</th>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>P58</th>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>P114</th>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>P81</th>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>P120</th>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>P56</th>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>P152</th>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>P108</th>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>P197</th>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>P132</th>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>P98</th>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>P86</th>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>P178</th>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>P203</th>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>P92</th>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>P93</th>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>P188</th>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>P148</th>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>P32</th>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>P14</th>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>P119</th>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>P139</th>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>P138</th>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>P7</th>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>P71</th>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>P143</th>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>P18</th>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>P69</th>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>P75</th>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>P133</th>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>P57</th>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>P195</th>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>P73</th>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>P24</th>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>P172</th>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "        0\n",
              "Id       \n",
              "P170  1.0\n",
              "P68   1.0\n",
              "P49   1.0\n",
              "P16   1.0\n",
              "P4    0.0\n",
              "P196  1.0\n",
              "P175  1.0\n",
              "P9    1.0\n",
              "P58   1.0\n",
              "P114  1.0\n",
              "P81   1.0\n",
              "P120  1.0\n",
              "P56   1.0\n",
              "P152  1.0\n",
              "P108  0.0\n",
              "P197  1.0\n",
              "P132  0.0\n",
              "P98   1.0\n",
              "P86   1.0\n",
              "P178  0.0\n",
              "P203  1.0\n",
              "P92   1.0\n",
              "P93   0.0\n",
              "P188  1.0\n",
              "P148  1.0\n",
              "P32   1.0\n",
              "P14   1.0\n",
              "P119  1.0\n",
              "P139  1.0\n",
              "P138  1.0\n",
              "P7    1.0\n",
              "P71   1.0\n",
              "P143  1.0\n",
              "P18   1.0\n",
              "P69   1.0\n",
              "P75   1.0\n",
              "P133  0.0\n",
              "P57   1.0\n",
              "P195  1.0\n",
              "P73   1.0\n",
              "P24   1.0\n",
              "P172  1.0"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 113
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "rOB43yPGLpi3"
      },
      "source": [
        "##Oversampling"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "AH3uJEYJGsLe",
        "outputId": "a8839045-63eb-45ee-fb85-db1d02a82f66"
      },
      "source": [
        "from sklearn.model_selection import StratifiedKFold, KFold\n",
        "from imblearn.under_sampling import RandomUnderSampler \n",
        "from imblearn.over_sampling import  RandomOverSampler\n",
        "\n",
        "\n",
        "orig = '/content/trainset/'\n",
        "\n",
        "df = pd.read_csv(\"clinical_annotation.csv\")\n",
        "df = df[df.LABEL > -0.5].reset_index(drop=True) # patient ID with label = -1 are the one that belongs to the test file\n",
        "df = df.drop('Unnamed: 0',axis=1)\n",
        "df.DOB = pd.to_datetime(df.DOB)\n",
        "df['AGE'] = pd.to_datetime('today').normalize() - pd.to_datetime(df.DOB)\n",
        "df.AGE = df.AGE.astype(\"timedelta64[Y]\")\n",
        "df = df[df.AGE > 62.]\n",
        "\n",
        "ros = RandomOverSampler()\n",
        "X_rus, y_rus = ros.fit_sample(df.ID.to_numpy().reshape(-1, 1), df.LABEL.to_numpy().reshape(-1, 1))\n",
        "X_rus = np.squeeze(X_rus)\n",
        "y_rus = np.squeeze(y_rus)\n",
        "\n",
        "\n",
        "n_splits= 3\n",
        "current_split= 1\n",
        "skf = StratifiedKFold(n_splits=n_splits)\n",
        "\n",
        "list_best_models = []\n",
        "\n",
        "for train_id_patient, val_id_patient in skf.split(X_rus,y_rus):\n",
        "\n",
        "    print('Split {}/{}'.format(current_split,n_splits))\n",
        "    best_model = None\n",
        "    #data_train = return_data(df.set_index(['ID']), df.ID.to_numpy()[train_id_patient])\n",
        "    data_train = return_data(df.set_index(['ID']), X_rus[train_id_patient])\n",
        "\n",
        "    img_list,  concentration, labels = data_train['indice'], data_train['concentration'], data_train['label']\n",
        "    train = LymphoDataset(orig, img_list, concentration, labels, get_transform(True))\n",
        "    train_loader = torch.utils.data.DataLoader(\n",
        "        train, batch_size=1, shuffle=True, num_workers=8, collate_fn=custom_fn)\n",
        "    \n",
        "\n",
        "    data_valid = return_data(df.set_index(['ID']), X_rus[val_id_patient])\n",
        "    img_list, concentration, labels = data_valid['indice'], data_valid['concentration'], data_valid['label']\n",
        "    valid = LymphoDataset(orig, img_list, concentration, labels, get_transform(False))\n",
        "    valid_loader = torch.utils.data.DataLoader(\n",
        "        valid, batch_size=1, shuffle=False, num_workers=8, collate_fn=custom_fn)    \n",
        "    \n",
        "    model = GatedAttention().cuda()\n",
        "    for param in model.feature_extractor_part1.parameters():\n",
        "      param.requires_grad = False\n",
        "    for param in model.feature_extractor_part1.fc.parameters():\n",
        "      param.requires_grad = True\n",
        "\n",
        "    optimizer = torch.optim.Adam(model.parameters(), lr=0.00005, betas=(0.9, 0.999),weight_decay=0.000005)\n",
        "    best_model = train_model(model,epoch=15)\n",
        "    list_best_models.append(best_model)\n",
        "\n",
        "    current_split+=1"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Split 1/3\n",
            "Epoch: 1, Loss: 0.6799, Train error: 0.3906, Accuracy: 60.9375\n",
            "Test Set, Loss: 0.7877, Test error: 0.5000, Accuracy: 50.0\n",
            "\n",
            "model successfully saved\n",
            "Epoch: 2, Loss: 0.6983, Train error: 0.4062, Accuracy: 59.375\n",
            "Test Set, Loss: 0.6723, Test error: 0.4375, Accuracy: 56.25\n",
            "\n",
            "model successfully saved\n",
            "Epoch: 3, Loss: 0.6547, Train error: 0.4297, Accuracy: 57.03125\n",
            "Test Set, Loss: 0.6601, Test error: 0.3281, Accuracy: 67.1875\n",
            "\n",
            "model successfully saved\n",
            "Epoch: 4, Loss: 0.5981, Train error: 0.2578, Accuracy: 74.21875\n",
            "Test Set, Loss: 0.6318, Test error: 0.3281, Accuracy: 67.1875\n",
            "\n",
            "model successfully saved\n",
            "Epoch: 5, Loss: 0.4805, Train error: 0.1953, Accuracy: 80.46875\n",
            "Test Set, Loss: 0.6157, Test error: 0.2812, Accuracy: 71.875\n",
            "\n",
            "model successfully saved\n",
            "Epoch: 6, Loss: 0.2635, Train error: 0.1016, Accuracy: 89.84375\n",
            "Test Set, Loss: 0.6093, Test error: 0.2344, Accuracy: 76.5625\n",
            "\n",
            "model successfully saved\n",
            "Epoch: 7, Loss: 0.1678, Train error: 0.0625, Accuracy: 93.75\n",
            "Test Set, Loss: 0.8974, Test error: 0.4531, Accuracy: 54.6875\n",
            "\n",
            "Epoch: 8, Loss: 0.0723, Train error: 0.0156, Accuracy: 98.4375\n",
            "Test Set, Loss: 0.8602, Test error: 0.3594, Accuracy: 64.0625\n",
            "\n",
            "Epoch: 9, Loss: 0.0917, Train error: 0.0234, Accuracy: 97.65625\n",
            "Test Set, Loss: 1.0656, Test error: 0.4688, Accuracy: 53.125\n",
            "\n",
            "Epoch: 10, Loss: 0.0419, Train error: 0.0000, Accuracy: 100.0\n",
            "Test Set, Loss: 0.8362, Test error: 0.4062, Accuracy: 59.375\n",
            "\n",
            "Epoch: 11, Loss: 0.0206, Train error: 0.0000, Accuracy: 100.0\n",
            "Test Set, Loss: 1.0736, Test error: 0.3750, Accuracy: 62.5\n",
            "\n",
            "Epoch: 12, Loss: 0.0170, Train error: 0.0000, Accuracy: 100.0\n",
            "Test Set, Loss: 0.8087, Test error: 0.3438, Accuracy: 65.625\n",
            "\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "Exception ignored in: <function _MultiProcessingDataLoaderIter.__del__ at 0x7fbe074a6170>\n",
            "Traceback (most recent call last):\n",
            "  File \"/usr/local/lib/python3.7/dist-packages/torch/utils/data/dataloader.py\", line 1203, in __del__\n",
            "    self._shutdown_workers()\n",
            "  File \"/usr/local/lib/python3.7/dist-packages/torch/utils/data/dataloader.py\", line 1177, in _shutdown_workers\n",
            "    w.join(timeout=_utils.MP_STATUS_CHECK_INTERVAL)\n",
            "  File \"/usr/lib/python3.7/multiprocessing/process.py\", line 138, in join\n",
            "    assert self._parent_pid == os.getpid(), 'can only join a child process'\n",
            "AssertionError: can only join a child process\n",
            "Exception ignored in: <function _MultiProcessingDataLoaderIter.__del__ at 0x7fbe074a6170>\n",
            "Traceback (most recent call last):\n",
            "  File \"/usr/local/lib/python3.7/dist-packages/torch/utils/data/dataloader.py\", line 1203, in __del__\n",
            "    self._shutdown_workers()\n",
            "  File \"/usr/local/lib/python3.7/dist-packages/torch/utils/data/dataloader.py\", line 1177, in _shutdown_workers\n",
            "    w.join(timeout=_utils.MP_STATUS_CHECK_INTERVAL)\n",
            "  File \"/usr/lib/python3.7/multiprocessing/process.py\", line 138, in join\n",
            "    assert self._parent_pid == os.getpid(), 'can only join a child process'\n",
            "AssertionError: can only join a child process\n",
            "Exception ignored in: <function _MultiProcessingDataLoaderIter.__del__ at 0x7fbe074a6170>\n",
            "Traceback (most recent call last):\n",
            "  File \"/usr/local/lib/python3.7/dist-packages/torch/utils/data/dataloader.py\", line 1203, in __del__\n",
            "    self._shutdown_workers()\n",
            "  File \"/usr/local/lib/python3.7/dist-packages/torch/utils/data/dataloader.py\", line 1177, in _shutdown_workers\n",
            "    w.join(timeout=_utils.MP_STATUS_CHECK_INTERVAL)\n",
            "  File \"/usr/lib/python3.7/multiprocessing/process.py\", line 138, in join\n",
            "    assert self._parent_pid == os.getpid(), 'can only join a child process'\n",
            "AssertionError: can only join a child process\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "Epoch: 13, Loss: 0.0102, Train error: 0.0000, Accuracy: 100.0\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "Exception ignored in: <function _MultiProcessingDataLoaderIter.__del__ at 0x7fbe074a6170>\n",
            "Traceback (most recent call last):\n",
            "  File \"/usr/local/lib/python3.7/dist-packages/torch/utils/data/dataloader.py\", line 1203, in __del__\n",
            "Exception ignored in: <function _MultiProcessingDataLoaderIter.__del__ at 0x7fbe074a6170>\n",
            "    self._shutdown_workers()\n",
            "Exception ignored in: <function _MultiProcessingDataLoaderIter.__del__ at 0x7fbe074a6170>\n",
            "  File \"/usr/local/lib/python3.7/dist-packages/torch/utils/data/dataloader.py\", line 1177, in _shutdown_workers\n",
            "Traceback (most recent call last):\n",
            "Traceback (most recent call last):\n",
            "  File \"/usr/local/lib/python3.7/dist-packages/torch/utils/data/dataloader.py\", line 1203, in __del__\n",
            "    w.join(timeout=_utils.MP_STATUS_CHECK_INTERVAL)\n",
            "  File \"/usr/local/lib/python3.7/dist-packages/torch/utils/data/dataloader.py\", line 1203, in __del__\n",
            "    self._shutdown_workers()\n",
            "  File \"/usr/lib/python3.7/multiprocessing/process.py\", line 138, in join\n",
            "    self._shutdown_workers()\n",
            "    assert self._parent_pid == os.getpid(), 'can only join a child process'\n",
            "  File \"/usr/local/lib/python3.7/dist-packages/torch/utils/data/dataloader.py\", line 1177, in _shutdown_workers\n",
            "    w.join(timeout=_utils.MP_STATUS_CHECK_INTERVAL)\n",
            "  File \"/usr/local/lib/python3.7/dist-packages/torch/utils/data/dataloader.py\", line 1177, in _shutdown_workers\n",
            "AssertionError: can only join a child process\n",
            "    w.join(timeout=_utils.MP_STATUS_CHECK_INTERVAL)\n",
            "  File \"/usr/lib/python3.7/multiprocessing/process.py\", line 138, in join\n",
            "    assert self._parent_pid == os.getpid(), 'can only join a child process'\n",
            "  File \"/usr/lib/python3.7/multiprocessing/process.py\", line 138, in join\n",
            "    assert self._parent_pid == os.getpid(), 'can only join a child process'\n",
            "AssertionError: can only join a child process\n",
            "AssertionError: can only join a child process\n",
            "Exception ignored in: <function _MultiProcessingDataLoaderIter.__del__ at 0x7fbe074a6170>\n",
            "Traceback (most recent call last):\n",
            "  File \"/usr/local/lib/python3.7/dist-packages/torch/utils/data/dataloader.py\", line 1203, in __del__\n",
            "    self._shutdown_workers()\n",
            "  File \"/usr/local/lib/python3.7/dist-packages/torch/utils/data/dataloader.py\", line 1177, in _shutdown_workers\n",
            "    w.join(timeout=_utils.MP_STATUS_CHECK_INTERVAL)\n",
            "  File \"/usr/lib/python3.7/multiprocessing/process.py\", line 138, in join\n",
            "    assert self._parent_pid == os.getpid(), 'can only join a child process'\n",
            "AssertionError: can only join a child process\n",
            "Exception ignored in: <function _MultiProcessingDataLoaderIter.__del__ at 0x7fbe074a6170>\n",
            "Traceback (most recent call last):\n",
            "  File \"/usr/local/lib/python3.7/dist-packages/torch/utils/data/dataloader.py\", line 1203, in __del__\n",
            "    self._shutdown_workers()\n",
            "  File \"/usr/local/lib/python3.7/dist-packages/torch/utils/data/dataloader.py\", line 1177, in _shutdown_workers\n",
            "    w.join(timeout=_utils.MP_STATUS_CHECK_INTERVAL)\n",
            "  File \"/usr/lib/python3.7/multiprocessing/process.py\", line 138, in join\n",
            "    assert self._parent_pid == os.getpid(), 'can only join a child process'\n",
            "AssertionError: can only join a child process\n",
            "Exception ignored in: <function _MultiProcessingDataLoaderIter.__del__ at 0x7fbe074a6170>\n",
            "Traceback (most recent call last):\n",
            "  File \"/usr/local/lib/python3.7/dist-packages/torch/utils/data/dataloader.py\", line 1203, in __del__\n",
            "    self._shutdown_workers()\n",
            "  File \"/usr/local/lib/python3.7/dist-packages/torch/utils/data/dataloader.py\", line 1177, in _shutdown_workers\n",
            "    w.join(timeout=_utils.MP_STATUS_CHECK_INTERVAL)\n",
            "  File \"/usr/lib/python3.7/multiprocessing/process.py\", line 138, in join\n",
            "    assert self._parent_pid == os.getpid(), 'can only join a child process'\n",
            "AssertionError: can only join a child process\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "Test Set, Loss: 1.3027, Test error: 0.4844, Accuracy: 51.5625\n",
            "\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "Exception ignored in: <function _MultiProcessingDataLoaderIter.__del__ at 0x7fbe074a6170>\n",
            "Traceback (most recent call last):\n",
            "  File \"/usr/local/lib/python3.7/dist-packages/torch/utils/data/dataloader.py\", line 1203, in __del__\n",
            "    self._shutdown_workers()\n",
            "  File \"/usr/local/lib/python3.7/dist-packages/torch/utils/data/dataloader.py\", line 1177, in _shutdown_workers\n",
            "    w.join(timeout=_utils.MP_STATUS_CHECK_INTERVAL)\n",
            "  File \"/usr/lib/python3.7/multiprocessing/process.py\", line 138, in join\n",
            "    assert self._parent_pid == os.getpid(), 'can only join a child process'\n",
            "AssertionError: can only join a child process\n",
            "Exception ignored in: <function _MultiProcessingDataLoaderIter.__del__ at 0x7fbe074a6170>\n",
            "Traceback (most recent call last):\n",
            "  File \"/usr/local/lib/python3.7/dist-packages/torch/utils/data/dataloader.py\", line 1203, in __del__\n",
            "    self._shutdown_workers()\n",
            "  File \"/usr/local/lib/python3.7/dist-packages/torch/utils/data/dataloader.py\", line 1177, in _shutdown_workers\n",
            "    w.join(timeout=_utils.MP_STATUS_CHECK_INTERVAL)\n",
            "  File \"/usr/lib/python3.7/multiprocessing/process.py\", line 138, in join\n",
            "    assert self._parent_pid == os.getpid(), 'can only join a child process'\n",
            "AssertionError: can only join a child process\n",
            "Exception ignored in: <function _MultiProcessingDataLoaderIter.__del__ at 0x7fbe074a6170>\n",
            "Traceback (most recent call last):\n",
            "  File \"/usr/local/lib/python3.7/dist-packages/torch/utils/data/dataloader.py\", line 1203, in __del__\n",
            "    self._shutdown_workers()\n",
            "  File \"/usr/local/lib/python3.7/dist-packages/torch/utils/data/dataloader.py\", line 1177, in _shutdown_workers\n",
            "    w.join(timeout=_utils.MP_STATUS_CHECK_INTERVAL)\n",
            "  File \"/usr/lib/python3.7/multiprocessing/process.py\", line 138, in join\n",
            "    assert self._parent_pid == os.getpid(), 'can only join a child process'\n",
            "AssertionError: can only join a child process\n",
            "Exception ignored in: <function _MultiProcessingDataLoaderIter.__del__ at 0x7fbe074a6170>\n",
            "Traceback (most recent call last):\n",
            "  File \"/usr/local/lib/python3.7/dist-packages/torch/utils/data/dataloader.py\", line 1203, in __del__\n",
            "Exception ignored in: <function _MultiProcessingDataLoaderIter.__del__ at 0x7fbe074a6170>\n",
            "    self._shutdown_workers()\n",
            "Traceback (most recent call last):\n",
            "  File \"/usr/local/lib/python3.7/dist-packages/torch/utils/data/dataloader.py\", line 1177, in _shutdown_workers\n",
            "  File \"/usr/local/lib/python3.7/dist-packages/torch/utils/data/dataloader.py\", line 1203, in __del__\n",
            "    w.join(timeout=_utils.MP_STATUS_CHECK_INTERVAL)\n",
            "  File \"/usr/lib/python3.7/multiprocessing/process.py\", line 138, in join\n",
            "    assert self._parent_pid == os.getpid(), 'can only join a child process'\n",
            "    self._shutdown_workers()\n",
            "AssertionError: can only join a child process\n",
            "  File \"/usr/local/lib/python3.7/dist-packages/torch/utils/data/dataloader.py\", line 1177, in _shutdown_workers\n",
            "    w.join(timeout=_utils.MP_STATUS_CHECK_INTERVAL)\n",
            "  File \"/usr/lib/python3.7/multiprocessing/process.py\", line 138, in join\n",
            "    assert self._parent_pid == os.getpid(), 'can only join a child process'\n",
            "AssertionError: can only join a child process\n",
            "Exception ignored in: <function _MultiProcessingDataLoaderIter.__del__ at 0x7fbe074a6170>\n",
            "Traceback (most recent call last):\n",
            "  File \"/usr/local/lib/python3.7/dist-packages/torch/utils/data/dataloader.py\", line 1203, in __del__\n",
            "    self._shutdown_workers()\n",
            "  File \"/usr/local/lib/python3.7/dist-packages/torch/utils/data/dataloader.py\", line 1177, in _shutdown_workers\n",
            "    w.join(timeout=_utils.MP_STATUS_CHECK_INTERVAL)\n",
            "  File \"/usr/lib/python3.7/multiprocessing/process.py\", line 138, in join\n",
            "    assert self._parent_pid == os.getpid(), 'can only join a child process'\n",
            "AssertionError: can only join a child process\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "Epoch: 14, Loss: 0.0093, Train error: 0.0000, Accuracy: 100.0\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "Exception ignored in: <function _MultiProcessingDataLoaderIter.__del__ at 0x7fbe074a6170>\n",
            "Traceback (most recent call last):\n",
            "  File \"/usr/local/lib/python3.7/dist-packages/torch/utils/data/dataloader.py\", line 1203, in __del__\n",
            "    self._shutdown_workers()\n",
            "  File \"/usr/local/lib/python3.7/dist-packages/torch/utils/data/dataloader.py\", line 1177, in _shutdown_workers\n",
            "Exception ignored in: <function _MultiProcessingDataLoaderIter.__del__ at 0x7fbe074a6170>\n",
            "    w.join(timeout=_utils.MP_STATUS_CHECK_INTERVAL)\n",
            "Traceback (most recent call last):\n",
            "Exception ignored in: <function _MultiProcessingDataLoaderIter.__del__ at 0x7fbe074a6170>\n",
            "  File \"/usr/local/lib/python3.7/dist-packages/torch/utils/data/dataloader.py\", line 1203, in __del__\n",
            "Traceback (most recent call last):\n",
            "    self._shutdown_workers()\n",
            "  File \"/usr/local/lib/python3.7/dist-packages/torch/utils/data/dataloader.py\", line 1203, in __del__\n",
            "  File \"/usr/local/lib/python3.7/dist-packages/torch/utils/data/dataloader.py\", line 1177, in _shutdown_workers\n",
            "    self._shutdown_workers()\n",
            "Exception ignored in: <function _MultiProcessingDataLoaderIter.__del__ at 0x7fbe074a6170>\n",
            "Traceback (most recent call last):\n",
            "    w.join(timeout=_utils.MP_STATUS_CHECK_INTERVAL)\n",
            "  File \"/usr/local/lib/python3.7/dist-packages/torch/utils/data/dataloader.py\", line 1177, in _shutdown_workers\n",
            "  File \"/usr/local/lib/python3.7/dist-packages/torch/utils/data/dataloader.py\", line 1203, in __del__\n",
            "    w.join(timeout=_utils.MP_STATUS_CHECK_INTERVAL)\n",
            "  File \"/usr/lib/python3.7/multiprocessing/process.py\", line 138, in join\n",
            "  File \"/usr/lib/python3.7/multiprocessing/process.py\", line 138, in join\n",
            "    assert self._parent_pid == os.getpid(), 'can only join a child process'\n",
            "    self._shutdown_workers()\n",
            "Exception ignored in: <function _MultiProcessingDataLoaderIter.__del__ at 0x7fbe074a6170>\n",
            "  File \"/usr/local/lib/python3.7/dist-packages/torch/utils/data/dataloader.py\", line 1177, in _shutdown_workers\n",
            "  File \"/usr/lib/python3.7/multiprocessing/process.py\", line 138, in join\n",
            "    w.join(timeout=_utils.MP_STATUS_CHECK_INTERVAL)\n",
            "AssertionError: can only join a child process\n",
            "    assert self._parent_pid == os.getpid(), 'can only join a child process'\n",
            "    assert self._parent_pid == os.getpid(), 'can only join a child process'\n",
            "Traceback (most recent call last):\n",
            "  File \"/usr/lib/python3.7/multiprocessing/process.py\", line 138, in join\n",
            "AssertionError: can only join a child process\n",
            "  File \"/usr/local/lib/python3.7/dist-packages/torch/utils/data/dataloader.py\", line 1203, in __del__\n",
            "    assert self._parent_pid == os.getpid(), 'can only join a child process'\n",
            "AssertionError: can only join a child process\n",
            "AssertionError: can only join a child process\n",
            "    self._shutdown_workers()\n",
            "  File \"/usr/local/lib/python3.7/dist-packages/torch/utils/data/dataloader.py\", line 1177, in _shutdown_workers\n",
            "Exception ignored in: <function _MultiProcessingDataLoaderIter.__del__ at 0x7fbe074a6170>\n",
            "    w.join(timeout=_utils.MP_STATUS_CHECK_INTERVAL)\n",
            "Traceback (most recent call last):\n",
            "  File \"/usr/lib/python3.7/multiprocessing/process.py\", line 138, in join\n",
            "    assert self._parent_pid == os.getpid(), 'can only join a child process'\n",
            "  File \"/usr/local/lib/python3.7/dist-packages/torch/utils/data/dataloader.py\", line 1203, in __del__\n",
            "AssertionError: can only join a child process\n",
            "    self._shutdown_workers()\n",
            "  File \"/usr/local/lib/python3.7/dist-packages/torch/utils/data/dataloader.py\", line 1177, in _shutdown_workers\n",
            "    w.join(timeout=_utils.MP_STATUS_CHECK_INTERVAL)\n",
            "  File \"/usr/lib/python3.7/multiprocessing/process.py\", line 138, in join\n",
            "    assert self._parent_pid == os.getpid(), 'can only join a child process'\n",
            "AssertionError: can only join a child process\n",
            "Exception ignored in: <function _MultiProcessingDataLoaderIter.__del__ at 0x7fbe074a6170>\n",
            "Traceback (most recent call last):\n",
            "  File \"/usr/local/lib/python3.7/dist-packages/torch/utils/data/dataloader.py\", line 1203, in __del__\n",
            "    self._shutdown_workers()\n",
            "  File \"/usr/local/lib/python3.7/dist-packages/torch/utils/data/dataloader.py\", line 1177, in _shutdown_workers\n",
            "    w.join(timeout=_utils.MP_STATUS_CHECK_INTERVAL)\n",
            "  File \"/usr/lib/python3.7/multiprocessing/process.py\", line 138, in join\n",
            "    assert self._parent_pid == os.getpid(), 'can only join a child process'\n",
            "AssertionError: can only join a child process\n",
            "Exception ignored in: <function _MultiProcessingDataLoaderIter.__del__ at 0x7fbe074a6170>\n",
            "Traceback (most recent call last):\n",
            "  File \"/usr/local/lib/python3.7/dist-packages/torch/utils/data/dataloader.py\", line 1203, in __del__\n",
            "    self._shutdown_workers()\n",
            "  File \"/usr/local/lib/python3.7/dist-packages/torch/utils/data/dataloader.py\", line 1177, in _shutdown_workers\n",
            "    w.join(timeout=_utils.MP_STATUS_CHECK_INTERVAL)\n",
            "  File \"/usr/lib/python3.7/multiprocessing/process.py\", line 138, in join\n",
            "    assert self._parent_pid == os.getpid(), 'can only join a child process'\n",
            "AssertionError: can only join a child process\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "Test Set, Loss: 1.0482, Test error: 0.3281, Accuracy: 67.1875\n",
            "\n",
            "Split 2/3\n",
            "Epoch: 1, Loss: 0.7504, Train error: 0.5000, Accuracy: 50.0\n",
            "Test Set, Loss: 0.6801, Test error: 0.4531, Accuracy: 54.6875\n",
            "\n",
            "model successfully saved\n",
            "Epoch: 2, Loss: 0.6666, Train error: 0.4297, Accuracy: 57.03125\n",
            "Test Set, Loss: 0.7197, Test error: 0.5000, Accuracy: 50.0\n",
            "\n",
            "Epoch: 3, Loss: 0.6508, Train error: 0.3203, Accuracy: 67.96875\n",
            "Test Set, Loss: 0.6549, Test error: 0.2344, Accuracy: 76.5625\n",
            "\n",
            "model successfully saved\n",
            "Epoch: 4, Loss: 0.6138, Train error: 0.3125, Accuracy: 68.75\n",
            "Test Set, Loss: 0.6484, Test error: 0.4844, Accuracy: 51.5625\n",
            "\n",
            "model successfully saved\n",
            "Test Set, Loss: 0.4785, Test error: 0.1562, Accuracy: 84.375\n",
            "\n",
            "model successfully saved\n",
            "Epoch: 6, Loss: 0.2293, Train error: 0.0781, Accuracy: 92.1875\n",
            "Test Set, Loss: 0.5608, Test error: 0.2812, Accuracy: 71.875\n",
            "\n",
            "Epoch: 7, Loss: 0.1183, Train error: 0.0234, Accuracy: 97.65625\n",
            "Test Set, Loss: 0.6763, Test error: 0.2969, Accuracy: 70.3125\n",
            "\n",
            "Epoch: 8, Loss: 0.0565, Train error: 0.0000, Accuracy: 100.0\n",
            "Test Set, Loss: 0.6917, Test error: 0.2188, Accuracy: 78.125\n",
            "\n",
            "Epoch: 9, Loss: 0.0415, Train error: 0.0078, Accuracy: 99.21875\n",
            "Test Set, Loss: 0.6633, Test error: 0.2344, Accuracy: 76.5625\n",
            "\n",
            "Epoch: 10, Loss: 0.0367, Train error: 0.0000, Accuracy: 100.0\n",
            "Test Set, Loss: 0.7678, Test error: 0.2656, Accuracy: 73.4375\n",
            "\n",
            "Epoch: 11, Loss: 0.0169, Train error: 0.0000, Accuracy: 100.0\n",
            "Test Set, Loss: 0.8780, Test error: 0.2656, Accuracy: 73.4375\n",
            "\n",
            "Epoch: 12, Loss: 0.0123, Train error: 0.0000, Accuracy: 100.0\n",
            "Test Set, Loss: 0.7815, Test error: 0.2188, Accuracy: 78.125\n",
            "\n",
            "Epoch: 13, Loss: 0.0078, Train error: 0.0000, Accuracy: 100.0\n",
            "Test Set, Loss: 0.7284, Test error: 0.1562, Accuracy: 84.375\n",
            "\n",
            "Epoch: 14, Loss: 0.0082, Train error: 0.0000, Accuracy: 100.0\n",
            "Test Set, Loss: 0.7625, Test error: 0.2031, Accuracy: 79.6875\n",
            "\n",
            "Split 3/3\n",
            "Epoch: 1, Loss: 0.7417, Train error: 0.5781, Accuracy: 42.1875\n",
            "Test Set, Loss: 0.6841, Test error: 0.3906, Accuracy: 60.9375\n",
            "\n",
            "model successfully saved\n",
            "Epoch: 2, Loss: 0.6761, Train error: 0.4609, Accuracy: 53.90625\n",
            "Test Set, Loss: 0.6794, Test error: 0.4688, Accuracy: 53.125\n",
            "\n",
            "model successfully saved\n",
            "Epoch: 3, Loss: 0.6409, Train error: 0.3672, Accuracy: 63.28125\n",
            "Test Set, Loss: 0.7288, Test error: 0.5625, Accuracy: 43.75\n",
            "\n",
            "Epoch: 4, Loss: 0.6023, Train error: 0.2656, Accuracy: 73.4375\n",
            "Test Set, Loss: 0.7177, Test error: 0.4219, Accuracy: 57.8125\n",
            "\n",
            "Epoch: 5, Loss: 0.4221, Train error: 0.1250, Accuracy: 87.5\n",
            "Test Set, Loss: 0.9648, Test error: 0.4219, Accuracy: 57.8125\n",
            "\n",
            "Epoch: 6, Loss: 0.2754, Train error: 0.1094, Accuracy: 89.0625\n",
            "Test Set, Loss: 0.8864, Test error: 0.3438, Accuracy: 65.625\n",
            "\n",
            "Epoch: 7, Loss: 0.1326, Train error: 0.0391, Accuracy: 96.09375\n",
            "Test Set, Loss: 1.1703, Test error: 0.4219, Accuracy: 57.8125\n",
            "\n",
            "Epoch: 8, Loss: 0.0528, Train error: 0.0000, Accuracy: 100.0\n",
            "Test Set, Loss: 1.4925, Test error: 0.4531, Accuracy: 54.6875\n",
            "\n",
            "Epoch: 9, Loss: 0.0416, Train error: 0.0000, Accuracy: 100.0\n",
            "Test Set, Loss: 1.4666, Test error: 0.4844, Accuracy: 51.5625\n",
            "\n",
            "Epoch: 10, Loss: 0.0219, Train error: 0.0000, Accuracy: 100.0\n",
            "Test Set, Loss: 1.3902, Test error: 0.3750, Accuracy: 62.5\n",
            "\n",
            "Epoch: 11, Loss: 0.0193, Train error: 0.0000, Accuracy: 100.0\n",
            "Test Set, Loss: 1.5636, Test error: 0.3594, Accuracy: 64.0625\n",
            "\n",
            "Epoch: 12, Loss: 0.0115, Train error: 0.0000, Accuracy: 100.0\n",
            "Test Set, Loss: 1.6078, Test error: 0.3906, Accuracy: 60.9375\n",
            "\n",
            "Epoch: 13, Loss: 0.0097, Train error: 0.0000, Accuracy: 100.0\n",
            "Test Set, Loss: 2.6596, Test error: 0.5469, Accuracy: 45.3125\n",
            "\n",
            "Epoch: 14, Loss: 0.0339, Train error: 0.0000, Accuracy: 100.0\n",
            "Test Set, Loss: 1.6914, Test error: 0.3750, Accuracy: 62.5\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "pUDfDde-Rs9O"
      },
      "source": [
        "df_test = pd.read_csv(\"testset/testset_data.csv\")\n",
        "\n",
        "data_test = return_data(df_test.set_index(['ID']), df_test.ID.to_list())\n",
        "\n",
        "orig = 'testset/'\n",
        "\n",
        "img_list,  concentration, labels = data_test['indice'], data_test['concentration'], data_test['label']\n",
        "test = LymphoDataset(orig, img_list, concentration, labels, get_transform(True))\n",
        "test_loader = torch.utils.data.DataLoader(\n",
        "    test, batch_size=1, shuffle=True, num_workers=8, collate_fn=custom_fn)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "xy68wM5JRs9R"
      },
      "source": [
        "def submission(model):\n",
        "  ID = []\n",
        "  outputs = []\n",
        "  model.eval()\n",
        "\n",
        "  for idx, batch in enumerate(test_loader):\n",
        "    data, name, bag_label = batch['images'].cuda(), batch['name'] , batch['label'].cuda()\n",
        "    ID.append(name[0])\n",
        "    _, predicted_label = model.calculate_classification_error(data, bag_label)\n",
        "    outputs.append(int(predicted_label.data.cpu().numpy()[0][0]))\n",
        "\n",
        "  df = pd.DataFrame({'Id': ID,'Predicted':outputs})\n",
        "  return df"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 66,
          "referenced_widgets": [
            "399bfbe17ae049f181bf6ffd2d3a06aa",
            "ad28dc5162ed47f5b4fb32dafdbd39cb",
            "b2b123465b304759a61e5b988403bd74",
            "31d97e74bdc94d7aa47fd005f11f3604",
            "84b8216f084c465893b7613a92899c9f",
            "782f252224344e62aea9baf60362e358",
            "52817edcf9ad4de09393588723d231c9",
            "fae0c6e23b5c44b2a0d3f4b9b5419fe0"
          ]
        },
        "id": "6bwGawqWRs9S",
        "outputId": "8c161e43-19d7-4d9b-e6b3-e533b2d70128"
      },
      "source": [
        "df_concat = []\n",
        "\n",
        "for model in tqdm(list_best_models):\n",
        "  df_concat.append(submission(model))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "399bfbe17ae049f181bf6ffd2d3a06aa",
              "version_major": 2,
              "version_minor": 0
            },
            "text/plain": [
              "HBox(children=(FloatProgress(value=0.0, max=3.0), HTML(value='')))"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Is4dQyolRs9S",
        "outputId": "b4c1b03e-dfc7-4033-8ae2-5b97f7751ab6"
      },
      "source": [
        "from functools import reduce\n",
        "\n",
        "df_merged = reduce(lambda  left,right: pd.merge(left,right,on=['Id'],\n",
        "                                            how='outer'), df_concat[:-1])\n",
        "\n",
        "print(df_merged)\n",
        "df_merged.set_index('Id')\n",
        "df_merged = df_merged.set_index('Id').mode(axis=1)[0].to_frame()\n",
        "df_merged = df_merged.rename(columns={0:\"Predicted\"})\n",
        "df_merged.Predicted = df_merged.Predicted.astype(int)\n",
        "df_merged.to_csv('pred3.csv')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "      Id  Predicted_x  Predicted_y\n",
            "0    P71            1            1\n",
            "1   P119            1            1\n",
            "2   P197            0            0\n",
            "3    P18            1            0\n",
            "4    P98            1            1\n",
            "5   P170            1            1\n",
            "6   P114            1            1\n",
            "7   P152            1            1\n",
            "8    P93            1            1\n",
            "9   P132            0            0\n",
            "10  P138            1            0\n",
            "11  P108            1            0\n",
            "12  P172            1            1\n",
            "13   P92            0            1\n",
            "14   P86            0            0\n",
            "15  P188            0            0\n",
            "16   P49            1            1\n",
            "17  P133            1            1\n",
            "18  P195            1            1\n",
            "19   P14            1            1\n",
            "20  P143            1            1\n",
            "21   P32            1            1\n",
            "22  P148            1            0\n",
            "23   P24            1            1\n",
            "24   P81            0            0\n",
            "25  P203            1            1\n",
            "26   P56            0            0\n",
            "27    P7            1            1\n",
            "28    P9            0            1\n",
            "29   P75            1            1\n",
            "30  P175            0            0\n",
            "31    P4            1            1\n",
            "32   P16            1            1\n",
            "33   P57            1            1\n",
            "34  P178            0            1\n",
            "35   P69            1            0\n",
            "36   P58            0            0\n",
            "37   P73            0            0\n",
            "38  P120            0            0\n",
            "39  P196            1            0\n",
            "40   P68            1            1\n",
            "41  P139            1            1\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "uiuO33mhRs9T",
        "outputId": "45cc1279-575a-45c5-ab1c-bb29b53242af"
      },
      "source": [
        "df_merged"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Id</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>P170</th>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>P68</th>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>P49</th>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>P16</th>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>P4</th>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>P196</th>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>P175</th>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>P9</th>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>P58</th>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>P114</th>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>P81</th>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>P120</th>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>P56</th>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>P152</th>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>P108</th>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>P197</th>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>P132</th>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>P98</th>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>P86</th>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>P178</th>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>P203</th>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>P92</th>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>P93</th>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>P188</th>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>P148</th>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>P32</th>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>P14</th>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>P119</th>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>P139</th>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>P138</th>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>P7</th>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>P71</th>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>P143</th>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>P18</th>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>P69</th>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>P75</th>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>P133</th>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>P57</th>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>P195</th>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>P73</th>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>P24</th>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>P172</th>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "        0\n",
              "Id       \n",
              "P170  1.0\n",
              "P68   1.0\n",
              "P49   1.0\n",
              "P16   1.0\n",
              "P4    0.0\n",
              "P196  1.0\n",
              "P175  1.0\n",
              "P9    1.0\n",
              "P58   1.0\n",
              "P114  1.0\n",
              "P81   1.0\n",
              "P120  1.0\n",
              "P56   1.0\n",
              "P152  1.0\n",
              "P108  0.0\n",
              "P197  1.0\n",
              "P132  0.0\n",
              "P98   1.0\n",
              "P86   1.0\n",
              "P178  0.0\n",
              "P203  1.0\n",
              "P92   1.0\n",
              "P93   0.0\n",
              "P188  1.0\n",
              "P148  1.0\n",
              "P32   1.0\n",
              "P14   1.0\n",
              "P119  1.0\n",
              "P139  1.0\n",
              "P138  1.0\n",
              "P7    1.0\n",
              "P71   1.0\n",
              "P143  1.0\n",
              "P18   1.0\n",
              "P69   1.0\n",
              "P75   1.0\n",
              "P133  0.0\n",
              "P57   1.0\n",
              "P195  1.0\n",
              "P73   1.0\n",
              "P24   1.0\n",
              "P172  1.0"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 113
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GuKwqvU7yHfo",
        "outputId": "288b55f4-a0e0-4556-d2b2-aafb68841eab"
      },
      "source": [
        "z# You can have a look on the output of each file\n",
        "train_id_patient[:3]"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['P131', 'P64', 'P147']"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 118
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "8GjLZ1OFG0SU"
      },
      "source": [
        "# For the train set\n",
        "data_train = return_data(df.set_index(['ID']), train_id_patient)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qRdh-OGpycNt",
        "outputId": "717ab71e-fbf0-43ed-d8c0-8f42df2f2fa7"
      },
      "source": [
        "# Have a look on data_train (it is a dict with 4 keys (indice, age, concentration, label))\n",
        "print(data_train['indice'][:10])\n",
        "#print(data_train['age'][:3])\n",
        "print(data_train['concentration'][:10])\n",
        "print(data_train['label'][:10])"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "['P131', 'P64', 'P147', 'P96', 'P38', 'P2', 'P46', 'P146', 'P31', 'P41']\n",
            "[4.43, 4.28, 175.71, 21.27, 5.29, 30.83, 39.84, 5.72, 6.31, 4.25]\n",
            "[1, 0, 1, 1, 1, 1, 1, 0, 1, 0]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "oOzyX1Luyz-D"
      },
      "source": [
        "# Now creating the train_loader\n",
        "#img_list, ages, concentration, labels = data_train['indice'], data_train['age'], data_train['concentration'], data_train['label']\n",
        "img_list,  concentration, labels = data_train['indice'], data_train['concentration'], data_train['label']\n",
        "train = LymphoDataset(orig, img_list, concentration, labels, get_transform(True))\n",
        "train_loader = torch.utils.data.DataLoader(\n",
        "    train, batch_size=1, shuffle=True, num_workers=8, collate_fn=custom_fn)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "we_EByVRy6-M"
      },
      "source": [
        "I set batch_size to 1 because you'll have a memory issue otherwise. Indeed, there are some patient that have more than 100 images (the maximum is 198 images). but there is a walk around to work with larger batch size, you'll see :)"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "X0Sl-mTXvYVG"
      },
      "source": [
        "iter = iter(train_loader)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "N9eIM4xyv61i"
      },
      "source": [
        "test = next(iter)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "K7CkFHfqvuRt",
        "outputId": "7d45c8dc-721f-4257-bf29-360c38cf4986"
      },
      "source": [
        "test['images'].shape"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "torch.Size([104, 3, 224, 224])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 22
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "crhyYhQNwPhk"
      },
      "source": [
        "# We can do the same thing with validation \n",
        "data_valid = return_data(df.set_index(['ID']), val_id_patient)\n",
        "img_list, concentration, labels = data_valid['indice'], data_valid['concentration'], data_valid['label']\n",
        "valid = LymphoDataset(orig, img_list, concentration, labels, get_transform(False))\n",
        "valid_loader = torch.utils.data.DataLoader(\n",
        "    valid, batch_size=1, shuffle=False, num_workers=8, collate_fn=custom_fn)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ldjanaB48EAF",
        "outputId": "fcad34ba-ee52-4110-ef71-e666f78219a0"
      },
      "source": [
        "### EXAMPLES ###\n",
        "start = time.time()\n",
        "for idx, batch in enumerate(train_loader):\n",
        "  test = batch\n",
        "print(f\"Time for loading all the train images : {round(time.time() - start, 4)} seconds\")"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Time for loading all the train images : 10.6299 seconds\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8jE2J1cQ0Vnx"
      },
      "source": [
        "It will probably took 30/40 seconds if you add data augmentation :) \\\n",
        "Now let's have a look on one of the element returned by train_loader"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "g2piz--N1XAX"
      },
      "source": [
        "Now let's imagine you want to use mini batch gradient descent (backward on multiple element (batch_size > 1)) instead of a stochastic gradient descent (batch_size = 1)), I will show you a walk around to do that :)"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "OExyHFn1CrGr"
      },
      "source": [
        "def train_walk_around(train_loader, model, epochs, batch_size, criterion, optimizer):\n",
        "  for epoch_no in range(epochs):  \n",
        "    model.train()\n",
        "    total_loss = 0\n",
        "    outputs = []\n",
        "    labels = []\n",
        "    i = 0\n",
        "    for idx, batch in enumerate(train_loader):\n",
        "      img, label = batch['images'].cuda(), batch['label'].cuda()\n",
        "      #output, _ = model.get_outputs(img)\n",
        "      #output, _ = model(img)\n",
        "      output, Y_hat, A = model(img)\n",
        "      outputs.append(output)\n",
        "      labels.append(label)\n",
        "      i += 1\n",
        "      if i < batch_size and idx < len(train_loader)-1: \n",
        "          continue\n",
        "      outputs = torch.cat(outputs, dim=0)\n",
        "      labels = torch.cat(labels, dim=0)\n",
        "      loss = criterion(outputs, labels)\n",
        "      loss.backward()\n",
        "      optimizer.step()\n",
        "      optimizer.zero_grad()\n",
        "\n",
        "      total_loss += loss.item()\n",
        "\n",
        "      outputs = []\n",
        "      labels = []\n",
        "      i = 0"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "zCvNVW1Z5jyN"
      },
      "source": [
        "How does it work ? \\\n",
        "Code Explanation"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "3YQHLuGl5wmM"
      },
      "source": [
        "def train_walk_around(train_loader, model, epochs, batch_size, criterion, optimizer):\n",
        "  for epoch_no in range(self.epochs):  \n",
        "    model.train()\n",
        "    total_loss = 0\n",
        "    outputs = [] # List to store the outputs of the model \n",
        "    labels = [] # List to store the true label \n",
        "    i = 0 # For incrementation\n",
        "    for idx, batch in enumerate(train_loader):\n",
        "      img, label = batch['images'].cuda(), batch['label'].cuda() # Get the images and the label and transfer to GPU\n",
        "      output = model.get_outputs(img) # Get the output of the model \n",
        "      outputs.append(output) # store it in outputs\n",
        "      labels.append(label) # store it in labels\n",
        "      i += 1 # Incrementation\n",
        "      if i < batch_size and idx < len(train_loader)-1: \n",
        "        # Now if the number of patient (representend by bag of images) on which we ran the model\n",
        "        # is less than the batch size, we won't backpropagate and we will skip the lines of code below\n",
        "        # and move to the next patient\n",
        "        continue\n",
        "      # Now that we have ran our model on batch_size patients we can backpropagate.\n",
        "      outputs = torch.cat(outputs, dim=0)\n",
        "      labels = torch.cat(labels, dim=0)\n",
        "      loss = criterion(outputs, labels)\n",
        "      loss.backward()\n",
        "      optimizer.step()\n",
        "      optimizer.zero_grad()\n",
        "\n",
        "      total_loss += loss.item()\n",
        "\n",
        "      outputs = []\n",
        "      labels = []\n",
        "      i = 0"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "g_jJ2UBP7F2U"
      },
      "source": [
        "So this is the naive framework, the issue here is that you need a small model (resnet34 for instance) if you have less than 16/17 gb of VRAM (GPU RAM). \\"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 104,
          "referenced_widgets": [
            "159f81c68bda465c8f6f7db35ad6c78d",
            "98b477c8c17f438c8525b4bbb0f3aae1",
            "ccc4fb232ed941a2ba2164ccb39dad31",
            "5ecd1fb1058d4e42be82814736ed6c34",
            "d1a60de5ec3e4a86a8d108f4f4c46d8c",
            "e580cdf302a748528a9a059230684b97",
            "8158a197c13240ebb34dde656cb967cf",
            "77ba8e6aac194fde9774a7775bd65c9f"
          ]
        },
        "id": "N45hWQmxeS_O",
        "outputId": "6361b7ef-b747-4650-cafc-39526d60a2a4"
      },
      "source": [
        "model_conv = models.resnet50(pretrained=True)\n",
        "for param in model_conv.parameters():\n",
        "    param.requires_grad = False\n",
        "\n",
        "# Parameters of newly constructed modules have requires_grad=True by default\n",
        "num_ftrs = model_conv.fc.out_features\n",
        "\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Downloading: \"https://download.pytorch.org/models/resnet50-19c8e357.pth\" to /root/.cache/torch/hub/checkpoints/resnet50-19c8e357.pth\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "159f81c68bda465c8f6f7db35ad6c78d",
              "version_major": 2,
              "version_minor": 0
            },
            "text/plain": [
              "HBox(children=(FloatProgress(value=0.0, max=102502400.0), HTML(value='')))"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "JUasIygjLTK1"
      },
      "source": [
        "        model_conv = models.resnet18(pretrained=True)\n",
        "        #model_conv = model_conv.to(device)\n",
        "        #model_conv = model_conv\n",
        "        for param in model_conv.parameters():\n",
        "            param.requires_grad = False\n",
        "\n",
        "\n",
        "        #model_conv.fc.out_features\n",
        "        # Parameters of newly constructed modules have requires_grad=True by default\n",
        "        num_ftrs = model_conv.fc.in_features\n",
        "        del model_conv.fc"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "JgSbgjbjdw7t"
      },
      "source": [
        "from torchvision import models\n",
        "device = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "LCEi98kJw4fo"
      },
      "source": [
        "from torchvision import models\n",
        "import copy\n",
        "#optimizer = torch.optim.SGD(model_conv.fc.parameters(), lr=0.001, momentum=0.9)\n",
        "\n",
        "def train(model,epoch):\n",
        "    best_model_wts = copy.deepcopy(model.state_dict())\n",
        "    best_acc_test = 0.0\n",
        "    best_acc_train = 0.0\n",
        "\n",
        "    for epoch_ in range(1,epoch):\n",
        "      correct = 0\n",
        "      total = 0\n",
        "      model.train()\n",
        "      train_loss = 0.\n",
        "      train_error = 0.\n",
        "      outputs = [] # List to store the outputs of the model \n",
        "      labels = [] # List to store the true label \n",
        "\n",
        "      #for batch_idx, (data, label) in enumerate(train_loader):\n",
        "      for idx, batch in enumerate(train_loader):\n",
        "          data, bag_label = batch['images'].cuda(), batch['label'].cuda()\n",
        "          #bag_label = label[0]\n",
        "          #if args.cuda:\n",
        "          #    data, bag_label = data.cuda(), bag_label.cuda()\n",
        "          #data, bag_label = Variable(data), Variable(bag_label)\n",
        "\n",
        "          # reset gradients\n",
        "          optimizer.zero_grad()\n",
        "          # calculate loss and metrics\n",
        "          loss, _ = model.calculate_objective(data, bag_label)\n",
        "          train_loss += loss.data[0]\n",
        "          error, output = model.calculate_classification_error(data, bag_label)\n",
        "          train_error += error\n",
        "\n",
        "          outputs.append(output) # store it in outputs\n",
        "          labels.append(bag_label) \n",
        "          # backward pass\n",
        "          loss.backward()\n",
        "          # step\n",
        "          optimizer.step()\n",
        "\n",
        "      # calculate loss and error for epoch\n",
        "      train_loss /= len(train_loader)\n",
        "      train_error /= len(train_loader)\n",
        "\n",
        "\n",
        "      total = len(labels)\n",
        "      outputs= np.asarray(outputs)\n",
        "      labels= np.asarray(labels)\n",
        "\n",
        "      correct += (outputs == labels).sum().item()\n",
        "\n",
        "      acc = 100 * correct / total\n",
        "\n",
        "      print('Epoch: {}, Loss: {:.4f}, Train error: {:.4f}, Accuracy: {}'.format(epoch_, train_loss.cpu().numpy()[0], train_error, acc))\n",
        "\n",
        "      test_loss , test_acc = test()\n",
        "\n",
        "      if test_acc >= best_acc_test and acc > best_acc_train:\n",
        "        best_acc_test = test_acc\n",
        "        best_acc_train = acc\n",
        "        best_model_wts = copy.deepcopy(model.state_dict())\n",
        "        print(\"model successfully savec\")\n",
        "\n",
        "    model.load_state_dict(best_model_wts)\n",
        "\n",
        "    return model\n",
        "\n",
        "def test():\n",
        "    correct = 0\n",
        "    total = 0\n",
        "\n",
        "    outputs = [] # List to store the outputs of the model \n",
        "    labels = [] # List to store the true label \n",
        "\n",
        "    model.eval()\n",
        "    test_loss = 0.\n",
        "    test_error = 0.\n",
        "    #for batch_idx, (data, label) in enumerate(test_loader):\n",
        "    for idx, batch in enumerate(valid_loader):\n",
        "        data, bag_label = batch['images'].cuda(), batch['label'].cuda()\n",
        "\n",
        "        loss, attention_weights = model.calculate_objective(data, bag_label)\n",
        "        test_loss += loss.data[0]\n",
        "        error, predicted_label = model.calculate_classification_error(data, bag_label)\n",
        "        test_error += error\n",
        "\n",
        "        if idx < 5:  # plot bag labels and instance labels for first 5 bags\n",
        "            bag_level = (bag_label.cpu().data.numpy()[0], int(predicted_label.cpu().data.numpy()[0][0]))\n",
        "            #instance_level = list(zip(instance_labels.numpy()[0].tolist(),\n",
        "            #                     np.round(attention_weights.cpu().data.numpy()[0], decimals=3).tolist()))\n",
        "\n",
        "            #print('\\nTrue Bag Label, Predicted Bag Label: {}\\n'\n",
        "            #      'True Instance Labels, Attention Weights: {}'.format(bag_level, instance_level))\n",
        "        outputs.append(predicted_label) # store it in outputs\n",
        "        labels.append(bag_label) \n",
        "\n",
        "    test_error /= len(valid_loader)\n",
        "    test_loss /= len(valid_loader)\n",
        "\n",
        "    total = len(labels)\n",
        "    outputs= np.asarray(outputs)\n",
        "    labels= np.asarray(labels)\n",
        "\n",
        "    correct += (outputs == labels).sum().item()\n",
        "\n",
        "    print('Test Set, Loss: {:.4f}, Test error: {:.4f}, Accuracy: {}\\n'.format(test_loss.cpu().numpy()[0], test_error,  100 * correct / total))\n",
        "\n",
        "    return test_loss.cpu().numpy()[0] , 100 * correct / total\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Xn9_O9H-ezsL"
      },
      "source": [
        "import torch\n",
        "import torch.nn as nn\n",
        "import torch.nn.functional as F\n",
        "\n",
        "\n",
        "class Attention(nn.Module):\n",
        "    def __init__(self):\n",
        "        super(Attention, self).__init__()\n",
        "        self.L = 500\n",
        "        self.D = 128\n",
        "        self.K = 1\n",
        "\n",
        "        self.feature_extractor_part1 = nn.Sequential(\n",
        "            nn.Conv2d(1, 20, kernel_size=5),\n",
        "            nn.ReLU(),\n",
        "            nn.MaxPool2d(2, stride=2),\n",
        "            nn.Conv2d(20, 50, kernel_size=5),\n",
        "            nn.ReLU(),\n",
        "            nn.MaxPool2d(2, stride=2)\n",
        "        )\n",
        "\n",
        "        self.feature_extractor_part2 = nn.Sequential(\n",
        "            nn.Linear(50 * 4 * 4, self.L),\n",
        "            nn.ReLU(),\n",
        "        )\n",
        "\n",
        "        self.attention = nn.Sequential(\n",
        "            nn.Linear(self.L, self.D),\n",
        "            nn.Tanh(),\n",
        "            nn.Linear(self.D, self.K)\n",
        "        )\n",
        "\n",
        "        self.classifier = nn.Sequential(\n",
        "            nn.Linear(self.L*self.K, 1),\n",
        "            nn.Sigmoid()\n",
        "        )\n",
        "\n",
        "    def forward(self, x):\n",
        "        x = x.squeeze(0)\n",
        "\n",
        "        H = self.feature_extractor_part1(x)\n",
        "        H = H.view(-1, 50 * 4 * 4)\n",
        "        H = self.feature_extractor_part2(H)  # NxL\n",
        "\n",
        "        A = self.attention(H)  # NxK\n",
        "        A = torch.transpose(A, 1, 0)  # KxN\n",
        "        A = F.softmax(A, dim=1)  # softmax over N\n",
        "\n",
        "        M = torch.mm(A, H)  # KxL\n",
        "\n",
        "        Y_prob = self.classifier(M)\n",
        "        Y_hat = torch.ge(Y_prob, 0.5).float()\n",
        "\n",
        "        return Y_prob, Y_hat, A\n",
        "\n",
        "    # AUXILIARY METHODS\n",
        "    def calculate_classification_error(self, X, Y):\n",
        "        Y = Y.float()\n",
        "        _, Y_hat, _ = self.forward(X)\n",
        "        error = 1. - Y_hat.eq(Y).cpu().float().mean().data[0]\n",
        "\n",
        "        return error, Y_hat\n",
        "\n",
        "    def calculate_objective(self, X, Y):\n",
        "        Y = Y.float()\n",
        "        Y_prob, _, A = self.forward(X)\n",
        "        Y_prob = torch.clamp(Y_prob, min=1e-5, max=1. - 1e-5)\n",
        "        neg_log_likelihood = -1. * (Y * torch.log(Y_prob) + (1. - Y) * torch.log(1. - Y_prob))  # negative log bernoulli\n",
        "\n",
        "        return neg_log_likelihood, A\n",
        "\n",
        "class GatedAttention(nn.Module):\n",
        "    def __init__(self):\n",
        "        super(GatedAttention, self).__init__()\n",
        "        self.L = 500\n",
        "        self.D = 128\n",
        "        self.K = 1\n",
        "\n",
        "        \"\"\"\n",
        "        self.feature_extractor_part1 = nn.Sequential(\n",
        "            nn.Conv2d(1, 20, kernel_size=5),\n",
        "            nn.ReLU(),\n",
        "            nn.MaxPool2d(2, stride=2),\n",
        "            nn.Conv2d(20, 50, kernel_size=5),\n",
        "            nn.ReLU(),\n",
        "            nn.MaxPool2d(2, stride=2)\n",
        "        )\n",
        "        \"\"\"\n",
        "\n",
        "        #model_conv = models.resnet152(pretrained=True)\n",
        "        model_conv = models.resnet50(pretrained=True)\n",
        "\n",
        "\n",
        "        #model_conv.fc.out_features\n",
        "        # Parameters of newly constructed modules have requires_grad=True by default\n",
        "        #num_ftrs = model_conv.fc.in_features\n",
        "        #del model_conv.fc\n",
        "        #model_conv.fc = None\n",
        "\n",
        "        self.feature_extractor_part1 = model_conv\n",
        "        \n",
        "        num_ftrs = 1000\n",
        "\n",
        "        self.feature_extractor_part2 = nn.Sequential(\n",
        "            nn.Linear(num_ftrs, self.L),\n",
        "            nn.ReLU(),\n",
        "            nn.Dropout(0.5)\n",
        "        )\n",
        "\n",
        "        self.attention_V = nn.Sequential(\n",
        "            nn.Linear(self.L, self.D),\n",
        "            nn.Tanh()\n",
        "        )\n",
        "\n",
        "        self.attention_U = nn.Sequential(\n",
        "            nn.Linear(self.L, self.D),\n",
        "            nn.Sigmoid()\n",
        "        )\n",
        "\n",
        "        self.attention_weights = nn.Linear(self.D, self.K)\n",
        "\n",
        "        self.classifier = nn.Sequential(\n",
        "            nn.Linear(self.L*self.K, 1),\n",
        "            nn.Sigmoid()\n",
        "        )\n",
        "\n",
        "    def forward(self, x):\n",
        "        x = x.squeeze(0)\n",
        "\n",
        "        H = self.feature_extractor_part1(x)\n",
        "        #print(H.shape)\n",
        "        #H = H.view(-1, num_ftrs)\n",
        "        H = self.feature_extractor_part2(H)  # NxL\n",
        "\n",
        "        A_V = self.attention_V(H)  # NxD\n",
        "        A_U = self.attention_U(H)  # NxD\n",
        "        A = self.attention_weights(A_V * A_U) # element wise multiplication # NxK\n",
        "        A = torch.transpose(A, 1, 0)  # KxN\n",
        "        A = F.softmax(A, dim=1)  # softmax over N\n",
        "\n",
        "        M = torch.mm(A, H)  # KxL\n",
        "\n",
        "        Y_prob = self.classifier(M)\n",
        "        Y_hat = torch.ge(Y_prob, 0.5).float()\n",
        "\n",
        "        return Y_prob, Y_hat, A\n",
        "\n",
        "    # AUXILIARY METHODS\n",
        "    def calculate_classification_error(self, X, Y):\n",
        "        Y = Y.float()\n",
        "        _, Y_hat, _ = self.forward(X)\n",
        "        error = 1. - Y_hat.eq(Y).cpu().float().mean().item()\n",
        "\n",
        "        return error, Y_hat\n",
        "\n",
        "    def calculate_objective(self, X, Y):\n",
        "        Y = Y.float()\n",
        "        Y_prob, _, A = self.forward(X)\n",
        "        Y_prob = torch.clamp(Y_prob, min=1e-5, max=1. - 1e-5)\n",
        "        neg_log_likelihood = -1. * (Y * torch.log(Y_prob) + (1. - Y) * torch.log(1. - Y_prob))  # negative log bernoulli\n",
        "\n",
        "        return neg_log_likelihood, A"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "BTb_TSeFffqr"
      },
      "source": [
        "model = GatedAttention().cuda()\n",
        "for param in model.feature_extractor_part1.parameters():\n",
        "  param.requires_grad = False\n",
        "for param in model.feature_extractor_part1.fc.parameters():\n",
        "  param.requires_grad = True"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "4RoImBNwJQa9"
      },
      "source": [
        "from torchsummary import summary\n",
        "\n",
        "summary(model,input_size=(3,224,224))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wgX_DA1_lWhE",
        "outputId": "00834b5e-e7b3-47bc-9aea-b29c92ba1603"
      },
      "source": [
        "#optimizer = torch.optim.Adam(model.parameters(), lr=0.0005, betas=(0.9, 0.999),weight_decay=0.05)\n",
        "model = GatedAttention().cuda()\n",
        "for param in model.feature_extractor_part1.parameters():\n",
        "  param.requires_grad = False\n",
        "for param in model.feature_extractor_part1.fc.parameters():\n",
        "  param.requires_grad = True\n",
        "\n",
        "\n",
        "optimizer = torch.optim.Adam(model.parameters(), lr=0.00005, betas=(0.9, 0.999),weight_decay=0.000005)\n",
        "best_model = train(model,epoch=15)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Epoch: 1, Loss: 0.6706, Train error: 0.3361, Accuracy: 66.39344262295081\n",
            "Test Set, Loss: 0.5148, Test error: 0.2195, Accuracy: 78.04878048780488\n",
            "\n",
            "model successfully savec\n",
            "Epoch: 2, Loss: 0.6578, Train error: 0.3361, Accuracy: 66.39344262295081\n",
            "Test Set, Loss: 0.5521, Test error: 0.2195, Accuracy: 78.04878048780488\n",
            "\n",
            "Epoch: 3, Loss: 0.6332, Train error: 0.3852, Accuracy: 61.47540983606557\n",
            "Test Set, Loss: 0.5200, Test error: 0.2195, Accuracy: 78.04878048780488\n",
            "\n",
            "Epoch: 4, Loss: 0.6229, Train error: 0.3361, Accuracy: 66.39344262295081\n",
            "Test Set, Loss: 0.5621, Test error: 0.2195, Accuracy: 78.04878048780488\n",
            "\n",
            "Epoch: 5, Loss: 0.6075, Train error: 0.3361, Accuracy: 66.39344262295081\n",
            "Test Set, Loss: 0.6433, Test error: 0.3171, Accuracy: 68.29268292682927\n",
            "\n",
            "Epoch: 6, Loss: 0.6001, Train error: 0.3115, Accuracy: 68.85245901639344\n",
            "Test Set, Loss: 0.6186, Test error: 0.2439, Accuracy: 75.60975609756098\n",
            "\n",
            "Epoch: 7, Loss: 0.5848, Train error: 0.3115, Accuracy: 68.85245901639344\n",
            "Test Set, Loss: 0.5647, Test error: 0.1707, Accuracy: 82.92682926829268\n",
            "\n",
            "model successfully savec\n",
            "Epoch: 8, Loss: 0.5232, Train error: 0.1803, Accuracy: 81.9672131147541\n",
            "Test Set, Loss: 0.5233, Test error: 0.2195, Accuracy: 78.04878048780488\n",
            "\n",
            "Epoch: 9, Loss: 0.4913, Train error: 0.2295, Accuracy: 77.04918032786885\n",
            "Test Set, Loss: 0.5104, Test error: 0.1707, Accuracy: 82.92682926829268\n",
            "\n",
            "model successfully savec\n",
            "Epoch: 10, Loss: 0.3708, Train error: 0.1557, Accuracy: 84.42622950819673\n",
            "Test Set, Loss: 0.6822, Test error: 0.3902, Accuracy: 60.97560975609756\n",
            "\n",
            "Epoch: 11, Loss: 0.2835, Train error: 0.1230, Accuracy: 87.70491803278688\n",
            "Test Set, Loss: 0.5945, Test error: 0.2683, Accuracy: 73.17073170731707\n",
            "\n",
            "Epoch: 12, Loss: 0.2513, Train error: 0.0492, Accuracy: 95.08196721311475\n",
            "Test Set, Loss: 0.4661, Test error: 0.2683, Accuracy: 73.17073170731707\n",
            "\n",
            "Epoch: 13, Loss: 0.1853, Train error: 0.0328, Accuracy: 96.72131147540983\n",
            "Test Set, Loss: 0.8378, Test error: 0.4146, Accuracy: 58.53658536585366\n",
            "\n",
            "Epoch: 14, Loss: 0.1419, Train error: 0.0246, Accuracy: 97.54098360655738\n",
            "Test Set, Loss: 0.8603, Test error: 0.3659, Accuracy: 63.41463414634146\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yw3_alBPKD7K",
        "outputId": "a37649e9-9a72-49bd-f1c2-1d4189e75311"
      },
      "source": [
        "test()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Test Set, Loss: 0.5104, Test error: 0.1707, Accuracy: 82.92682926829268\n",
            "\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(0.51040226, 82.92682926829268)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 126
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "XWjzrW8R4oFg"
      },
      "source": [
        "##Test loader"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "cf-_3k2T5G3-"
      },
      "source": [
        "orig = 'content/testset'\n",
        "test_img = [i for i in os.listdir('testset') if '.csv' not in i]\n",
        "df_test = pd.read_csv(\"testset/testset_data.csv\")"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "qs6I99_k7Ast"
      },
      "source": [
        "test_img,  concentration, labels = df_test['indice'], df_test['concentration'], df_test'label']\n",
        "train = LymphoDataset(orig, img_list, concentration, labels, get_transform(True))\n",
        "train_loader = torch.utils.data.DataLoader(\n",
        "    train, batch_size=1, shuffle=True, num_workers=8, collate_fn=custom_"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "pJ5rOufb7MjT"
      },
      "source": [
        "data_test = return_data(df_test.set_index(['ID']), df_test.ID.to_list())"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_Un6ILHU4gZF"
      },
      "source": [
        "orig = 'testset/'\n",
        "\n",
        "img_list,  concentration, labels = data_test['indice'], data_test['concentration'], data_test['label']\n",
        "test = LymphoDataset(orig, img_list, concentration, labels, get_transform(True))\n",
        "test_loader = torch.utils.data.DataLoader(\n",
        "    test, batch_size=1, shuffle=True, num_workers=8, collate_fn=custom_fn)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "uJvpTmKV8GGC"
      },
      "source": [
        "def test():\n",
        "    correct = 0\n",
        "    total = 0\n",
        "\n",
        "    outputs = [] # List to store the outputs of the model \n",
        "    labels = [] # List to store the true label \n",
        "\n",
        "    model.eval()\n",
        "    test_loss = 0.\n",
        "    test_error = 0.\n",
        "    #for batch_idx, (data, label) in enumerate(test_loader):\n",
        "    for idx, batch in enumerate(valid_loader):\n",
        "        data, bag_label = batch['images'].cuda(), batch['label'].cuda()\n",
        "\n",
        "        loss, attention_weights = model.calculate_objective(data, bag_label)\n",
        "        test_loss += loss.data[0]\n",
        "        error, predicted_label = model.calculate_classification_error(data, bag_label)\n",
        "        test_error += error\n",
        "\n",
        "        if idx < 5:  # plot bag labels and instance labels for first 5 bags\n",
        "            bag_level = (bag_label.cpu().data.numpy()[0], int(predicted_label.cpu().data.numpy()[0][0]))\n",
        "            #instance_level = list(zip(instance_labels.numpy()[0].tolist(),\n",
        "            #                     np.round(attention_weights.cpu().data.numpy()[0], decimals=3).tolist()))\n",
        "\n",
        "            #print('\\nTrue Bag Label, Predicted Bag Label: {}\\n'\n",
        "            #      'True Instance Labels, Attention Weights: {}'.format(bag_level, instance_level))\n",
        "        outputs.append(predicted_label) # store it in outputs\n",
        "        labels.append(bag_label) \n",
        "\n",
        "    test_error /= len(valid_loader)\n",
        "    test_loss /= len(valid_loader)\n",
        "\n",
        "    total = len(labels)\n",
        "    outputs= np.asarray(outputs)\n",
        "    labels= np.asarray(labels)\n",
        "\n",
        "    correct += (outputs == labels).sum().item()\n",
        "\n",
        "    print('Test Set, Loss: {:.4f}, Test error: {:.4f}, Accuracy: {}\\n'.format(test_loss.cpu().numpy()[0], test_error,  100 * correct / total))\n",
        "\n",
        "    return test_loss.cpu().numpy()[0] , 100 * correct / total\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "pb875x5x8DDV"
      },
      "source": [
        "def submission(model):\n",
        "  ID = []\n",
        "  outputs = []\n",
        "  model.eval()\n",
        "\n",
        "  for idx, batch in enumerate(test_loader):\n",
        "    data, name, bag_label = batch['images'].cuda(), batch['name'] , batch['label'].cuda()\n",
        "    ID.append(name[0])\n",
        "    _, predicted_label = model.calculate_classification_error(data, bag_label)\n",
        "    outputs.append(int(predicted_label.data.cpu().numpy()[0][0]))\n",
        "\n",
        "  df = pd.DataFrame({'Id': ID,'Predicted':outputs})\n",
        "  return df"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "q_PXE_qX9egv"
      },
      "source": [
        "df = submission(best_model)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 557
        },
        "id": "bVwQWT5KD-bG",
        "outputId": "720c7491-715c-426c-c742-3ff6c297a108"
      },
      "source": [
        "pd.read_csv('sample_submission.csv',index=False)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>ID</th>\n",
              "      <th>LABEL</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>P9</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>P172</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>P57</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>P16</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>P203</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>P24</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>P138</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>P119</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>P170</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>P175</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>P69</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>P92</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>P93</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>P132</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>P75</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>P143</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>P14</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "      ID  LABEL\n",
              "0     P9      0\n",
              "1   P172      1\n",
              "2    P57      0\n",
              "3    P16      0\n",
              "4   P203      0\n",
              "5    P24      1\n",
              "6   P138      1\n",
              "7   P119      0\n",
              "8   P170      0\n",
              "9   P175      0\n",
              "10   P69      1\n",
              "11   P92      1\n",
              "12   P93      0\n",
              "13  P132      1\n",
              "14   P75      0\n",
              "15  P143      0\n",
              "16   P14      1"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 100
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "4UeDAZDg_PVl",
        "outputId": "87d16eba-b6ab-4cac-e345-4b9fcc5d4bc5"
      },
      "source": [
        "df"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>ID</th>\n",
              "      <th>LABEL</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>P132</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>P16</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>P133</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>P75</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>P170</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>P92</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>P69</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>P18</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>P138</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>P120</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>P81</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>P9</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>P119</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>P86</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>P56</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>P71</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>P4</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>P143</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>P196</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>P197</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20</th>\n",
              "      <td>P93</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21</th>\n",
              "      <td>P139</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>22</th>\n",
              "      <td>P148</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>23</th>\n",
              "      <td>P24</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24</th>\n",
              "      <td>P203</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25</th>\n",
              "      <td>P195</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>26</th>\n",
              "      <td>P58</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>27</th>\n",
              "      <td>P98</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>28</th>\n",
              "      <td>P14</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>29</th>\n",
              "      <td>P178</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>30</th>\n",
              "      <td>P172</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>31</th>\n",
              "      <td>P32</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>32</th>\n",
              "      <td>P49</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>33</th>\n",
              "      <td>P152</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>34</th>\n",
              "      <td>P68</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>35</th>\n",
              "      <td>P114</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>36</th>\n",
              "      <td>P175</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>37</th>\n",
              "      <td>P57</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>38</th>\n",
              "      <td>P188</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>39</th>\n",
              "      <td>P73</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>40</th>\n",
              "      <td>P108</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>41</th>\n",
              "      <td>P7</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "      ID  LABEL\n",
              "0   P132      1\n",
              "1    P16      1\n",
              "2   P133      1\n",
              "3    P75      1\n",
              "4   P170      1\n",
              "5    P92      1\n",
              "6    P69      1\n",
              "7    P18      1\n",
              "8   P138      1\n",
              "9   P120      1\n",
              "10   P81      1\n",
              "11    P9      1\n",
              "12  P119      1\n",
              "13   P86      1\n",
              "14   P56      1\n",
              "15   P71      1\n",
              "16    P4      1\n",
              "17  P143      1\n",
              "18  P196      1\n",
              "19  P197      1\n",
              "20   P93      1\n",
              "21  P139      1\n",
              "22  P148      0\n",
              "23   P24      1\n",
              "24  P203      1\n",
              "25  P195      1\n",
              "26   P58      0\n",
              "27   P98      1\n",
              "28   P14      1\n",
              "29  P178      1\n",
              "30  P172      1\n",
              "31   P32      1\n",
              "32   P49      1\n",
              "33  P152      1\n",
              "34   P68      0\n",
              "35  P114      1\n",
              "36  P175      1\n",
              "37   P57      1\n",
              "38  P188      1\n",
              "39   P73      1\n",
              "40  P108      1\n",
              "41    P7      0"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 99
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "khKNeL-wA2eP"
      },
      "source": [
        "df.to_csv?"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "G6j2xZFP_Ri_"
      },
      "source": [
        "df.to_csv('submission.csv',index=False)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "oIPQPbqi-ySa",
        "outputId": "7586fbd8-5413-4932-c3d8-6ca2884be77a"
      },
      "source": [
        "df[1][0].data.cpu().numpy()[0][0]"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1.0"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 81
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Ox065zidffg6"
      },
      "source": [
        "class MILResnet(nn.Module):\n",
        "    def __init__(self):\n",
        "        super(MILResnet, self).__init__()\n",
        "        \n",
        "        model_conv = models.resnet50(pretrained=True)\n",
        "        num_ftrs = model_conv.fc.in_features\n",
        "        model_conv.fc = nn.Sequential(nn.Linear(num_ftrs, 512),\n",
        "                                      nn.ReLU(),\n",
        "                                      nn.Linear(512, 1),\n",
        "                                      nn.Softmax())\n",
        "\n",
        "        self.model = model_conv\n",
        "\n",
        "    def forward(self, x):\n",
        "        #x = x.squeeze(0)\n",
        "\n",
        "        #H = self.feature_extractor_part1(x)\n",
        "        x = x.squeeze(0)\n",
        "        Y_prob = self.model(x)\n",
        "        Y_hat = torch.ge(Y_prob, 0.5).float()\n",
        "\n",
        "        return Y_prob, Y_hat\n",
        "\n",
        "    # AUXILIARY METHODS\n",
        "    def calculate_classification_error(self, X, Y):\n",
        "        Y = Y.float()\n",
        "        _, Y_hat = self.forward(X)\n",
        "        error = 1. - Y_hat.eq(Y).cpu().float().mean().item()\n",
        "\n",
        "        return error, Y_hat\n",
        "\n",
        "    def calculate_objective(self, X, Y):\n",
        "        Y = Y.float()\n",
        "        Y_prob, _ = self.forward(X)\n",
        "        Y_prob = torch.clamp(Y_prob, min=1e-5, max=1. - 1e-5)\n",
        "        neg_log_likelihood = -1. * (Y * torch.log(Y_prob) + (1. - Y) * torch.log(1. - Y_prob))  # negative log bernoulli\n",
        "\n",
        "        return neg_log_likelihood"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Y2VyunL-geQs"
      },
      "source": [
        "model = MILResnet().cuda()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "YCE4bNiqVmov"
      },
      "source": [
        "import gc \n",
        "gc.collect()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "znUmB4B2c59H"
      },
      "source": [
        "torch.cuda.empty_cache()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bTHFgMd-iAuy",
        "outputId": "20527b4f-c0ed-4d65-ec3f-d54b5a6a1189"
      },
      "source": [
        "gc.collect()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "2380"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 149
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 328
        },
        "id": "VthszrShUVu4",
        "outputId": "f7165dd3-554f-4587-b95b-87a187a66102"
      },
      "source": [
        "# Observe that all parameters are being optimized\n",
        "optimizer = torch.optim.SGD(model.parameters(), lr=0.001, momentum=0.9)\n",
        "\n",
        "train(10)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "ValueError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-154-ff5ced6399c0>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0moptimizer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moptim\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mSGD\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mparameters\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlr\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0.001\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmomentum\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0.9\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m \u001b[0mtrain\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m<ipython-input-151-852198a3ae98>\u001b[0m in \u001b[0;36mtrain\u001b[0;34m(epoch)\u001b[0m\n\u001b[1;32m     23\u001b[0m           \u001b[0moptimizer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mzero_grad\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     24\u001b[0m           \u001b[0;31m# calculate loss and metrics\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 25\u001b[0;31m           \u001b[0mloss\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0m_\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcalculate_objective\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbag_label\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     26\u001b[0m           \u001b[0mtrain_loss\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0mloss\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     27\u001b[0m           \u001b[0merror\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0moutput\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcalculate_classification_error\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbag_label\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mValueError\u001b[0m: not enough values to unpack (expected 2, got 1)"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Y0OVqRlp1ChM"
      },
      "source": [
        "optimizer = torch.optim.Adam(model.parameters(), lr=0.0005, betas=(0.9, 0.999),weight_decay=0.005)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "uwEgMFudGP0L"
      },
      "source": [
        "optimizer = torch.optim.SGD(model.parameters(), lr=0.001, momentum=0.9)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "background_save": true,
          "base_uri": "https://localhost:8080/"
        },
        "id": "1TwsVM4Px_yY",
        "outputId": "aa4666c9-2715-4116-dbef-6fcf26577d5c"
      },
      "source": [
        "train(10)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Epoch: 1, Loss: 1.8812, Train error: 0.3770, Accuracy: 62.295081967213115\n",
            "Test Set, Loss: 0.6036, Test error: 0.2195, Accuracy: 78.04878048780488\n",
            "\n",
            "Epoch: 2, Loss: 0.6656, Train error: 0.3361, Accuracy: 66.39344262295081\n",
            "Test Set, Loss: 0.6200, Test error: 0.2195, Accuracy: 78.04878048780488\n",
            "\n",
            "Epoch: 3, Loss: 0.6753, Train error: 0.3443, Accuracy: 65.57377049180327\n",
            "Test Set, Loss: 0.6248, Test error: 0.2195, Accuracy: 78.04878048780488\n",
            "\n",
            "Epoch: 4, Loss: 0.6647, Train error: 0.3361, Accuracy: 66.39344262295081\n",
            "Test Set, Loss: 0.5559, Test error: 0.2195, Accuracy: 78.04878048780488\n",
            "\n",
            "Epoch: 5, Loss: 0.6836, Train error: 0.3361, Accuracy: 66.39344262295081\n",
            "Test Set, Loss: 0.5487, Test error: 0.2195, Accuracy: 78.04878048780488\n",
            "\n",
            "Epoch: 6, Loss: 0.6557, Train error: 0.3361, Accuracy: 66.39344262295081\n",
            "Test Set, Loss: 0.5552, Test error: 0.2195, Accuracy: 78.04878048780488\n",
            "\n",
            "Epoch: 7, Loss: 0.6713, Train error: 0.3607, Accuracy: 63.9344262295082\n",
            "Test Set, Loss: 0.5487, Test error: 0.2195, Accuracy: 78.04878048780488\n",
            "\n",
            "Epoch: 8, Loss: 1.0022, Train error: 0.3525, Accuracy: 64.75409836065573\n",
            "Test Set, Loss: 2.5269, Test error: 0.2195, Accuracy: 78.04878048780488\n",
            "\n",
            "Epoch: 9, Loss: 3.6402, Train error: 0.3361, Accuracy: 66.39344262295081\n",
            "Test Set, Loss: 4.8374, Test error: 0.7805, Accuracy: 21.951219512195124\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Knm1wstzzCl8"
      },
      "source": [
        "val"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qK-lQcdrfkgk",
        "outputId": "2e541524-8022-4ef0-aa3e-dfa8799f21b5"
      },
      "source": [
        "test()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "\n",
            "Test Set, Loss: 3.2622, Test error: 0.5122\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "uJlSbQB98wFx"
      },
      "source": [
        "import torch\n",
        "import torch.nn as nn\n",
        "import torch.nn.functional as F\n",
        "\n",
        "from torchvision import models\n",
        "\n",
        "\n",
        "class ResnetMIL(nn.Module):\n",
        "  def __init__(self):\n",
        "    super(ResnetMIL, self).__init__()\n",
        "\n",
        "    model_resnet = models.resnet152(pretrained=True)\n",
        "    num_ftrs = model_resnet.fc.in_features\n",
        "\n",
        "    model_resnet.fc = nn.Sequential(\n",
        "                                  nn.Linear(num_ftrs, 1024),\n",
        "                                  nn.ReLU()\n",
        "                                  )\n",
        "    #nn.Identity()\n",
        "    self.model = model_resnet\n",
        "\n",
        "    self.avgpool = nn.AdaptiveAvgPool1d(1)\n",
        "\n",
        "    self.classifier = nn.Sequential(\n",
        "                                  nn.Linear(1026, 256),\n",
        "                                  nn.ReLU(),\n",
        "                                  nn.Linear(256, 1),\n",
        "                                  nn.Sigmoid()\n",
        "                                )\n",
        "    \n",
        "\n",
        "  def forward(self, x):\n",
        "  #def forward(self, x):\n",
        "    #print(x.shape)\n",
        "    img = x[0]\n",
        "    age, concentration = x[1], x[2]\n",
        "    #print(img.shape)\n",
        "    x = self.model(img)\n",
        "    #print(x.shape)\n",
        "    x = torch.transpose(x, 0, 1)\n",
        "    #print(x.shape)\n",
        "    x = torch.unsqueeze(x,dim=0)\n",
        "    #print(x.shape)\n",
        "    x = self.avgpool(x)\n",
        "    #print(x.shape)\n",
        "    x = torch.squeeze(x,dim=-1)\n",
        "    #print(x.shape)\n",
        "    x = torch.cat([x,concentration,age],axis=-1)\n",
        "    #print(x.shape)\n",
        "    pred= self.classifier(x)\n",
        "    #print(pred)\n",
        "    \n",
        "    return pred"
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}